// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

// 
// This source code was auto-generated by Web Services Description Language Utility
//Mono Framework v2.0.50727.1433
//


/// <remarks/>
/// <remarks>
///iFolder Admin Web Service
///</remarks>
[System.Web.Services.WebServiceBinding(Name="iFolderAdminSoap", Namespace="http://novell.com/ifolder/webservice/")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class iFolderAdmin : System.Web.Services.Protocols.SoapHttpClientProtocol {
    
    private System.Threading.SendOrPostCallback GetSystemOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetHomeServerOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetHomeServerForUserOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetHomeServerURLForUserIDOperationCompleted;
    
    private System.Threading.SendOrPostCallback IsUserOrSystemEncryptionEnforcedOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetiFolderLocationOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetOrphanediFoldersOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetiFolderLimitPolicyStatusOperationCompleted;
    
    private System.Threading.SendOrPostCallback IsOrphanediFolderOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetShortenedNameOperationCompleted;
    
    private System.Threading.SendOrPostCallback IsGroupIdOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetSharingStatusOperationCompleted;
    
    private System.Threading.SendOrPostCallback DisableSystemPastSharingOperationCompleted;
    
    private System.Threading.SendOrPostCallback DisableUserPastSharingOperationCompleted;
    
    private System.Threading.SendOrPostCallback DisableiFolderPastSharingOperationCompleted;
    
    private System.Threading.SendOrPostCallback AddDataStoreOperationCompleted;
    
    private System.Threading.SendOrPostCallback ModifyDataStoreOperationCompleted;
    
    private System.Threading.SendOrPostCallback DeleteDataStoreOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetVolumesOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetReportsOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetServerOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetServersOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetServersByNameOperationCompleted;
    
    private System.Threading.SendOrPostCallback DeleteiFolderOperationCompleted;
    
    private System.Threading.SendOrPostCallback RestoreiFolderDataOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetRestoreStatusForCollectionOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetiFolderOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetiFolderDetailsOperationCompleted;
    
    private System.Threading.SendOrPostCallback SetiFolderDescriptionOperationCompleted;
    
    private System.Threading.SendOrPostCallback PublishiFolderOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetChangesOperationCompleted;
    
    private System.Threading.SendOrPostCallback TrimUrlOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetAuthenticatedUserOperationCompleted;
    
    private System.Threading.SendOrPostCallback SetMemberRightsOperationCompleted;
    
    private System.Threading.SendOrPostCallback AddMemberOperationCompleted;
    
    private System.Threading.SendOrPostCallback RemoveMemberOperationCompleted;
    
    private System.Threading.SendOrPostCallback SetiFolderOwnerOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetMembersOperationCompleted;
    
    private System.Threading.SendOrPostCallback IsPassPhraseSetForUserOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetUsersOperationCompleted;
    
    private System.Threading.SendOrPostCallback ProvisionUsersToServersOperationCompleted;
    
    private System.Threading.SendOrPostCallback ProvisionUsersToServerOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetServerProvisioningListOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetSimiasRequiresSSLStatusOperationCompleted;
    
    private System.Threading.SendOrPostCallback SetIPDetailsOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetUserOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetUserDetailsOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetUsersBySearchOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetMonitoredGroupsBySearchOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetReprovisionUsersOperationCompleted;
    
    private System.Threading.SendOrPostCallback CreateiFolderOperationCompleted;
    
    private System.Threading.SendOrPostCallback CreateiFolderWithIDOperationCompleted;
    
    private System.Threading.SendOrPostCallback CreateEncryptediFolderWithIDOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetiFoldersOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetiFoldersByMemberOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetiFoldersByNameOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetSystemSettingOperationCompleted;
    
    private System.Threading.SendOrPostCallback SetSystemSettingOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetUserSettingOperationCompleted;
    
    private System.Threading.SendOrPostCallback SetUserSettingOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetiFolderSettingOperationCompleted;
    
    private System.Threading.SendOrPostCallback SetiFolderSettingOperationCompleted;
    
    private System.Threading.SendOrPostCallback CreateUserOperationCompleted;
    
    private System.Threading.SendOrPostCallback DeleteUserOperationCompleted;
    
    private System.Threading.SendOrPostCallback SetUserOperationCompleted;
    
    private System.Threading.SendOrPostCallback SetPasswordOperationCompleted;
    
    private System.Threading.SendOrPostCallback SetSystemOperationCompleted;
    
    private System.Threading.SendOrPostCallback SetSimiasSSLStatusOperationCompleted;
    
    private System.Threading.SendOrPostCallback AddAdministratorOperationCompleted;
    
    private System.Threading.SendOrPostCallback AddGroupAdministratorOperationCompleted;
    
    private System.Threading.SendOrPostCallback RemoveGroupAdministratorOperationCompleted;
    
    private System.Threading.SendOrPostCallback DiskQuotaPolicyChangeAllowedOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetUserSystemRightsOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetUserGroupRightsOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetMonitoredGroupsOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetMonitoredGroupNamesOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetAggregateDiskQuotaOperationCompleted;
    
    private System.Threading.SendOrPostCallback SpaceUsedByGroupOperationCompleted;
    
    private System.Threading.SendOrPostCallback SetAggregateDiskQuotaOperationCompleted;
    
    private System.Threading.SendOrPostCallback RemoveAdministratorOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetAdministratorsOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetSystemPolicyOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetGroupSharingPolicyOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetGroupEncryptionPolicyOperationCompleted;
    
    private System.Threading.SendOrPostCallback SetSystemPolicyOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetUserPolicyOperationCompleted;
    
    private System.Threading.SendOrPostCallback SetUserPolicyOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetiFolderPolicyOperationCompleted;
    
    private System.Threading.SendOrPostCallback SetiFolderPolicyOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetIdentityPolicyOperationCompleted;
    
    private System.Threading.SendOrPostCallback IdentitySyncDisableServiceOperationCompleted;
    
    private System.Threading.SendOrPostCallback IdentitySyncGetLastInfoOperationCompleted;
    
    private System.Threading.SendOrPostCallback IdentitySyncGetServiceInfoOperationCompleted;
    
    private System.Threading.SendOrPostCallback IdentitySyncSetDeleteMemberGracePeriodOperationCompleted;
    
    private System.Threading.SendOrPostCallback IdentitySyncSetIntervalOperationCompleted;
    
    private System.Threading.SendOrPostCallback IdentitySyncNowOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetLogLevelsOperationCompleted;
    
    private System.Threading.SendOrPostCallback SetLogLevelOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetLdapDetailsOperationCompleted;
    
    private System.Threading.SendOrPostCallback SetLdapDetailsOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetSharingPolicyOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetUserGroupSharingPolicyOperationCompleted;
    
    private System.Threading.SendOrPostCallback ModifyStoreOperationCompleted;
    
    private System.Threading.SendOrPostCallback DeleteDataPathOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetRAListOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetRACertificateOperationCompleted;
    
    private System.Threading.SendOrPostCallback IsPassPhraseSetOperationCompleted;
    
    private System.Threading.SendOrPostCallback ValidatePassPhraseOperationCompleted;
    
    private System.Threading.SendOrPostCallback SetPassPhraseOperationCompleted;
    
    private System.Threading.SendOrPostCallback ChangePasswordOperationCompleted;
    
    private System.Threading.SendOrPostCallback DisableGroupPastSharingOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetGroupIDsOperationCompleted;
    
    private System.Threading.SendOrPostCallback ReProvisionUsersToServerOperationCompleted;
    
    public iFolderAdmin() {
        this.Url = "http://164.99.101.23/simias10/iFolderAdmin.asmx";
    }
    
    public event GetSystemCompletedEventHandler GetSystemCompleted;
    
    public event GetHomeServerCompletedEventHandler GetHomeServerCompleted;
    
    public event GetHomeServerForUserCompletedEventHandler GetHomeServerForUserCompleted;
    
    public event GetHomeServerURLForUserIDCompletedEventHandler GetHomeServerURLForUserIDCompleted;
    
    public event IsUserOrSystemEncryptionEnforcedCompletedEventHandler IsUserOrSystemEncryptionEnforcedCompleted;
    
    public event GetiFolderLocationCompletedEventHandler GetiFolderLocationCompleted;
    
    public event GetOrphanediFoldersCompletedEventHandler GetOrphanediFoldersCompleted;
    
    public event GetiFolderLimitPolicyStatusCompletedEventHandler GetiFolderLimitPolicyStatusCompleted;
    
    public event IsOrphanediFolderCompletedEventHandler IsOrphanediFolderCompleted;
    
    public event GetShortenedNameCompletedEventHandler GetShortenedNameCompleted;
    
    public event IsGroupIdCompletedEventHandler IsGroupIdCompleted;
    
    public event GetSharingStatusCompletedEventHandler GetSharingStatusCompleted;
    
    public event DisableSystemPastSharingCompletedEventHandler DisableSystemPastSharingCompleted;
    
    public event DisableUserPastSharingCompletedEventHandler DisableUserPastSharingCompleted;
    
    public event DisableiFolderPastSharingCompletedEventHandler DisableiFolderPastSharingCompleted;
    
    public event AddDataStoreCompletedEventHandler AddDataStoreCompleted;
    
    public event ModifyDataStoreCompletedEventHandler ModifyDataStoreCompleted;
    
    public event DeleteDataStoreCompletedEventHandler DeleteDataStoreCompleted;
    
    public event GetVolumesCompletedEventHandler GetVolumesCompleted;
    
    public event GetReportsCompletedEventHandler GetReportsCompleted;
    
    public event GetServerCompletedEventHandler GetServerCompleted;
    
    public event GetServersCompletedEventHandler GetServersCompleted;
    
    public event GetServersByNameCompletedEventHandler GetServersByNameCompleted;
    
    public event DeleteiFolderCompletedEventHandler DeleteiFolderCompleted;
    
    public event RestoreiFolderDataCompletedEventHandler RestoreiFolderDataCompleted;
    
    public event GetRestoreStatusForCollectionCompletedEventHandler GetRestoreStatusForCollectionCompleted;
    
    public event GetiFolderCompletedEventHandler GetiFolderCompleted;
    
    public event GetiFolderDetailsCompletedEventHandler GetiFolderDetailsCompleted;
    
    public event SetiFolderDescriptionCompletedEventHandler SetiFolderDescriptionCompleted;
    
    public event PublishiFolderCompletedEventHandler PublishiFolderCompleted;
    
    public event GetChangesCompletedEventHandler GetChangesCompleted;
    
    public event TrimUrlCompletedEventHandler TrimUrlCompleted;
    
    public event GetAuthenticatedUserCompletedEventHandler GetAuthenticatedUserCompleted;
    
    public event SetMemberRightsCompletedEventHandler SetMemberRightsCompleted;
    
    public event AddMemberCompletedEventHandler AddMemberCompleted;
    
    public event RemoveMemberCompletedEventHandler RemoveMemberCompleted;
    
    public event SetiFolderOwnerCompletedEventHandler SetiFolderOwnerCompleted;
    
    public event GetMembersCompletedEventHandler GetMembersCompleted;
    
    public event IsPassPhraseSetForUserCompletedEventHandler IsPassPhraseSetForUserCompleted;
    
    public event GetUsersCompletedEventHandler GetUsersCompleted;
    
    public event ProvisionUsersToServersCompletedEventHandler ProvisionUsersToServersCompleted;
    
    public event ProvisionUsersToServerCompletedEventHandler ProvisionUsersToServerCompleted;
    
    public event GetServerProvisioningListCompletedEventHandler GetServerProvisioningListCompleted;
    
    public event GetSimiasRequiresSSLStatusCompletedEventHandler GetSimiasRequiresSSLStatusCompleted;
    
    public event SetIPDetailsCompletedEventHandler SetIPDetailsCompleted;
    
    public event GetUserCompletedEventHandler GetUserCompleted;
    
    public event GetUserDetailsCompletedEventHandler GetUserDetailsCompleted;
    
    public event GetUsersBySearchCompletedEventHandler GetUsersBySearchCompleted;
    
    public event GetMonitoredGroupsBySearchCompletedEventHandler GetMonitoredGroupsBySearchCompleted;
    
    public event GetReprovisionUsersCompletedEventHandler GetReprovisionUsersCompleted;
    
    public event CreateiFolderCompletedEventHandler CreateiFolderCompleted;
    
    public event CreateiFolderWithIDCompletedEventHandler CreateiFolderWithIDCompleted;
    
    public event CreateEncryptediFolderWithIDCompletedEventHandler CreateEncryptediFolderWithIDCompleted;
    
    public event GetiFoldersCompletedEventHandler GetiFoldersCompleted;
    
    public event GetiFoldersByMemberCompletedEventHandler GetiFoldersByMemberCompleted;
    
    public event GetiFoldersByNameCompletedEventHandler GetiFoldersByNameCompleted;
    
    public event GetSystemSettingCompletedEventHandler GetSystemSettingCompleted;
    
    public event SetSystemSettingCompletedEventHandler SetSystemSettingCompleted;
    
    public event GetUserSettingCompletedEventHandler GetUserSettingCompleted;
    
    public event SetUserSettingCompletedEventHandler SetUserSettingCompleted;
    
    public event GetiFolderSettingCompletedEventHandler GetiFolderSettingCompleted;
    
    public event SetiFolderSettingCompletedEventHandler SetiFolderSettingCompleted;
    
    public event CreateUserCompletedEventHandler CreateUserCompleted;
    
    public event DeleteUserCompletedEventHandler DeleteUserCompleted;
    
    public event SetUserCompletedEventHandler SetUserCompleted;
    
    public event SetPasswordCompletedEventHandler SetPasswordCompleted;
    
    public event SetSystemCompletedEventHandler SetSystemCompleted;
    
    public event SetSimiasSSLStatusCompletedEventHandler SetSimiasSSLStatusCompleted;
    
    public event AddAdministratorCompletedEventHandler AddAdministratorCompleted;
    
    public event AddGroupAdministratorCompletedEventHandler AddGroupAdministratorCompleted;
    
    public event RemoveGroupAdministratorCompletedEventHandler RemoveGroupAdministratorCompleted;
    
    public event DiskQuotaPolicyChangeAllowedCompletedEventHandler DiskQuotaPolicyChangeAllowedCompleted;
    
    public event GetUserSystemRightsCompletedEventHandler GetUserSystemRightsCompleted;
    
    public event GetUserGroupRightsCompletedEventHandler GetUserGroupRightsCompleted;
    
    public event GetMonitoredGroupsCompletedEventHandler GetMonitoredGroupsCompleted;
    
    public event GetMonitoredGroupNamesCompletedEventHandler GetMonitoredGroupNamesCompleted;
    
    public event GetAggregateDiskQuotaCompletedEventHandler GetAggregateDiskQuotaCompleted;
    
    public event SpaceUsedByGroupCompletedEventHandler SpaceUsedByGroupCompleted;
    
    public event SetAggregateDiskQuotaCompletedEventHandler SetAggregateDiskQuotaCompleted;
    
    public event RemoveAdministratorCompletedEventHandler RemoveAdministratorCompleted;
    
    public event GetAdministratorsCompletedEventHandler GetAdministratorsCompleted;
    
    public event GetSystemPolicyCompletedEventHandler GetSystemPolicyCompleted;
    
    public event GetGroupSharingPolicyCompletedEventHandler GetGroupSharingPolicyCompleted;
    
    public event GetGroupEncryptionPolicyCompletedEventHandler GetGroupEncryptionPolicyCompleted;
    
    public event SetSystemPolicyCompletedEventHandler SetSystemPolicyCompleted;
    
    public event GetUserPolicyCompletedEventHandler GetUserPolicyCompleted;
    
    public event SetUserPolicyCompletedEventHandler SetUserPolicyCompleted;
    
    public event GetiFolderPolicyCompletedEventHandler GetiFolderPolicyCompleted;
    
    public event SetiFolderPolicyCompletedEventHandler SetiFolderPolicyCompleted;
    
    public event GetIdentityPolicyCompletedEventHandler GetIdentityPolicyCompleted;
    
    public event IdentitySyncDisableServiceCompletedEventHandler IdentitySyncDisableServiceCompleted;
    
    public event IdentitySyncGetLastInfoCompletedEventHandler IdentitySyncGetLastInfoCompleted;
    
    public event IdentitySyncGetServiceInfoCompletedEventHandler IdentitySyncGetServiceInfoCompleted;
    
    public event IdentitySyncSetDeleteMemberGracePeriodCompletedEventHandler IdentitySyncSetDeleteMemberGracePeriodCompleted;
    
    public event IdentitySyncSetIntervalCompletedEventHandler IdentitySyncSetIntervalCompleted;
    
    public event IdentitySyncNowCompletedEventHandler IdentitySyncNowCompleted;
    
    public event GetLogLevelsCompletedEventHandler GetLogLevelsCompleted;
    
    public event SetLogLevelCompletedEventHandler SetLogLevelCompleted;
    
    public event GetLdapDetailsCompletedEventHandler GetLdapDetailsCompleted;
    
    public event SetLdapDetailsCompletedEventHandler SetLdapDetailsCompleted;
    
    public event GetSharingPolicyCompletedEventHandler GetSharingPolicyCompleted;
    
    public event GetUserGroupSharingPolicyCompletedEventHandler GetUserGroupSharingPolicyCompleted;
    
    public event ModifyStoreCompletedEventHandler ModifyStoreCompleted;
    
    public event DeleteDataPathCompletedEventHandler DeleteDataPathCompleted;
    
    public event GetRAListCompletedEventHandler GetRAListCompleted;
    
    public event GetRACertificateCompletedEventHandler GetRACertificateCompleted;
    
    public event IsPassPhraseSetCompletedEventHandler IsPassPhraseSetCompleted;
    
    public event ValidatePassPhraseCompletedEventHandler ValidatePassPhraseCompleted;
    
    public event SetPassPhraseCompletedEventHandler SetPassPhraseCompleted;
    
    public event ChangePasswordCompletedEventHandler ChangePasswordCompleted;
    
    public event DisableGroupPastSharingCompletedEventHandler DisableGroupPastSharingCompleted;
    
    public event GetGroupIDsCompletedEventHandler GetGroupIDsCompleted;
    
    public event ReProvisionUsersToServerCompletedEventHandler ReProvisionUsersToServerCompleted;
    
    /// <remarks>
///Get information about the iFolder system.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetSystem", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public iFolderSystem GetSystem() {
        object[] results = this.Invoke("GetSystem", new object[0]);
        return ((iFolderSystem)(results[0]));
    }
    
    public System.IAsyncResult BeginGetSystem(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetSystem", new object[0], callback, asyncState);
    }
    
    public iFolderSystem EndGetSystem(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((iFolderSystem)(results[0]));
    }
    
    public void GetSystemAsync() {
        this.GetSystemAsync(null);
    }
    
    public void GetSystemAsync(object userState) {
        if ((this.GetSystemOperationCompleted == null)) {
            this.GetSystemOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSystemCompleted);
        }
        this.InvokeAsync("GetSystem", new object[0], this.GetSystemOperationCompleted, userState);
    }
    
    private void OnGetSystemCompleted(object arg) {
        if ((this.GetSystemCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetSystemCompleted(this, new GetSystemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Get information about the authenticated user's home iFolder server.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetHomeServer", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public iFolderServer GetHomeServer() {
        object[] results = this.Invoke("GetHomeServer", new object[0]);
        return ((iFolderServer)(results[0]));
    }
    
    public System.IAsyncResult BeginGetHomeServer(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetHomeServer", new object[0], callback, asyncState);
    }
    
    public iFolderServer EndGetHomeServer(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((iFolderServer)(results[0]));
    }
    
    public void GetHomeServerAsync() {
        this.GetHomeServerAsync(null);
    }
    
    public void GetHomeServerAsync(object userState) {
        if ((this.GetHomeServerOperationCompleted == null)) {
            this.GetHomeServerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHomeServerCompleted);
        }
        this.InvokeAsync("GetHomeServer", new object[0], this.GetHomeServerOperationCompleted, userState);
    }
    
    private void OnGetHomeServerCompleted(object arg) {
        if ((this.GetHomeServerCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetHomeServerCompleted(this, new GetHomeServerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Get the homeserver for the user.Server Provisioning will be done if user has no HomeServer.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetHomeServerForUser", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public string GetHomeServerForUser(string username, string password) {
        object[] results = this.Invoke("GetHomeServerForUser", new object[] {
                    username,
                    password});
        return ((string)(results[0]));
    }
    
    public System.IAsyncResult BeginGetHomeServerForUser(string username, string password, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetHomeServerForUser", new object[] {
                    username,
                    password}, callback, asyncState);
    }
    
    public string EndGetHomeServerForUser(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    public void GetHomeServerForUserAsync(string username, string password) {
        this.GetHomeServerForUserAsync(username, password, null);
    }
    
    public void GetHomeServerForUserAsync(string username, string password, object userState) {
        if ((this.GetHomeServerForUserOperationCompleted == null)) {
            this.GetHomeServerForUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHomeServerForUserCompleted);
        }
        this.InvokeAsync("GetHomeServerForUser", new object[] {
                    username,
                    password}, this.GetHomeServerForUserOperationCompleted, userState);
    }
    
    private void OnGetHomeServerForUserCompleted(object arg) {
        if ((this.GetHomeServerForUserCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetHomeServerForUserCompleted(this, new GetHomeServerForUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Get the homeserver for the user.Server Provisioning will be done if user has no HomeServer.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetHomeServerURLForUserID", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public string GetHomeServerURLForUserID(string userid) {
        object[] results = this.Invoke("GetHomeServerURLForUserID", new object[] {
                    userid});
        return ((string)(results[0]));
    }
    
    public System.IAsyncResult BeginGetHomeServerURLForUserID(string userid, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetHomeServerURLForUserID", new object[] {
                    userid}, callback, asyncState);
    }
    
    public string EndGetHomeServerURLForUserID(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    public void GetHomeServerURLForUserIDAsync(string userid) {
        this.GetHomeServerURLForUserIDAsync(userid, null);
    }
    
    public void GetHomeServerURLForUserIDAsync(string userid, object userState) {
        if ((this.GetHomeServerURLForUserIDOperationCompleted == null)) {
            this.GetHomeServerURLForUserIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHomeServerURLForUserIDCompleted);
        }
        this.InvokeAsync("GetHomeServerURLForUserID", new object[] {
                    userid}, this.GetHomeServerURLForUserIDOperationCompleted, userState);
    }
    
    private void OnGetHomeServerURLForUserIDCompleted(object arg) {
        if ((this.GetHomeServerURLForUserIDCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetHomeServerURLForUserIDCompleted(this, new GetHomeServerURLForUserIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///returns true/false based on whether encryption is enforced for this user or not 
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/IsUserOrSystemEncryptionEnforced", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public bool IsUserOrSystemEncryptionEnforced(string userid) {
        object[] results = this.Invoke("IsUserOrSystemEncryptionEnforced", new object[] {
                    userid});
        return ((bool)(results[0]));
    }
    
    public System.IAsyncResult BeginIsUserOrSystemEncryptionEnforced(string userid, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("IsUserOrSystemEncryptionEnforced", new object[] {
                    userid}, callback, asyncState);
    }
    
    public bool EndIsUserOrSystemEncryptionEnforced(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    public void IsUserOrSystemEncryptionEnforcedAsync(string userid) {
        this.IsUserOrSystemEncryptionEnforcedAsync(userid, null);
    }
    
    public void IsUserOrSystemEncryptionEnforcedAsync(string userid, object userState) {
        if ((this.IsUserOrSystemEncryptionEnforcedOperationCompleted == null)) {
            this.IsUserOrSystemEncryptionEnforcedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsUserOrSystemEncryptionEnforcedCompleted);
        }
        this.InvokeAsync("IsUserOrSystemEncryptionEnforced", new object[] {
                    userid}, this.IsUserOrSystemEncryptionEnforcedOperationCompleted, userState);
    }
    
    private void OnIsUserOrSystemEncryptionEnforcedCompleted(object arg) {
        if ((this.IsUserOrSystemEncryptionEnforcedCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.IsUserOrSystemEncryptionEnforcedCompleted(this, new IsUserOrSystemEncryptionEnforcedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Get the private url of ifolder's homeserver.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetiFolderLocation", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public string GetiFolderLocation(string ifolderID) {
        object[] results = this.Invoke("GetiFolderLocation", new object[] {
                    ifolderID});
        return ((string)(results[0]));
    }
    
    public System.IAsyncResult BeginGetiFolderLocation(string ifolderID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetiFolderLocation", new object[] {
                    ifolderID}, callback, asyncState);
    }
    
    public string EndGetiFolderLocation(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    public void GetiFolderLocationAsync(string ifolderID) {
        this.GetiFolderLocationAsync(ifolderID, null);
    }
    
    public void GetiFolderLocationAsync(string ifolderID, object userState) {
        if ((this.GetiFolderLocationOperationCompleted == null)) {
            this.GetiFolderLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetiFolderLocationCompleted);
        }
        this.InvokeAsync("GetiFolderLocation", new object[] {
                    ifolderID}, this.GetiFolderLocationOperationCompleted, userState);
    }
    
    private void OnGetiFolderLocationCompleted(object arg) {
        if ((this.GetiFolderLocationCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetiFolderLocationCompleted(this, new GetiFolderLocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Get the list of orphaned ifolders
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetOrphanediFolders", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public iFolderSet GetOrphanediFolders(SearchOperation operation, string pattern, int index, int max) {
        object[] results = this.Invoke("GetOrphanediFolders", new object[] {
                    operation,
                    pattern,
                    index,
                    max});
        return ((iFolderSet)(results[0]));
    }
    
    public System.IAsyncResult BeginGetOrphanediFolders(SearchOperation operation, string pattern, int index, int max, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetOrphanediFolders", new object[] {
                    operation,
                    pattern,
                    index,
                    max}, callback, asyncState);
    }
    
    public iFolderSet EndGetOrphanediFolders(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((iFolderSet)(results[0]));
    }
    
    public void GetOrphanediFoldersAsync(SearchOperation operation, string pattern, int index, int max) {
        this.GetOrphanediFoldersAsync(operation, pattern, index, max, null);
    }
    
    public void GetOrphanediFoldersAsync(SearchOperation operation, string pattern, int index, int max, object userState) {
        if ((this.GetOrphanediFoldersOperationCompleted == null)) {
            this.GetOrphanediFoldersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOrphanediFoldersCompleted);
        }
        this.InvokeAsync("GetOrphanediFolders", new object[] {
                    operation,
                    pattern,
                    index,
                    max}, this.GetOrphanediFoldersOperationCompleted, userState);
    }
    
    private void OnGetOrphanediFoldersCompleted(object arg) {
        if ((this.GetOrphanediFoldersCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetOrphanediFoldersCompleted(this, new GetOrphanediFoldersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Get ifolder limit policy information for an iFolder.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetiFolderLimitPolicyStatus", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public int GetiFolderLimitPolicyStatus(string userID) {
        object[] results = this.Invoke("GetiFolderLimitPolicyStatus", new object[] {
                    userID});
        return ((int)(results[0]));
    }
    
    public System.IAsyncResult BeginGetiFolderLimitPolicyStatus(string userID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetiFolderLimitPolicyStatus", new object[] {
                    userID}, callback, asyncState);
    }
    
    public int EndGetiFolderLimitPolicyStatus(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((int)(results[0]));
    }
    
    public void GetiFolderLimitPolicyStatusAsync(string userID) {
        this.GetiFolderLimitPolicyStatusAsync(userID, null);
    }
    
    public void GetiFolderLimitPolicyStatusAsync(string userID, object userState) {
        if ((this.GetiFolderLimitPolicyStatusOperationCompleted == null)) {
            this.GetiFolderLimitPolicyStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetiFolderLimitPolicyStatusCompleted);
        }
        this.InvokeAsync("GetiFolderLimitPolicyStatus", new object[] {
                    userID}, this.GetiFolderLimitPolicyStatusOperationCompleted, userState);
    }
    
    private void OnGetiFolderLimitPolicyStatusCompleted(object arg) {
        if ((this.GetiFolderLimitPolicyStatusCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetiFolderLimitPolicyStatusCompleted(this, new GetiFolderLimitPolicyStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///check the orphaned property
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/IsOrphanediFolder", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public string IsOrphanediFolder(string iFolderID) {
        object[] results = this.Invoke("IsOrphanediFolder", new object[] {
                    iFolderID});
        return ((string)(results[0]));
    }
    
    public System.IAsyncResult BeginIsOrphanediFolder(string iFolderID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("IsOrphanediFolder", new object[] {
                    iFolderID}, callback, asyncState);
    }
    
    public string EndIsOrphanediFolder(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    public void IsOrphanediFolderAsync(string iFolderID) {
        this.IsOrphanediFolderAsync(iFolderID, null);
    }
    
    public void IsOrphanediFolderAsync(string iFolderID, object userState) {
        if ((this.IsOrphanediFolderOperationCompleted == null)) {
            this.IsOrphanediFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsOrphanediFolderCompleted);
        }
        this.InvokeAsync("IsOrphanediFolder", new object[] {
                    iFolderID}, this.IsOrphanediFolderOperationCompleted, userState);
    }
    
    private void OnIsOrphanediFolderCompleted(object arg) {
        if ((this.IsOrphanediFolderCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.IsOrphanediFolderCompleted(this, new IsOrphanediFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///return a string which is short.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetShortenedName", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public string GetShortenedName(string name, int length) {
        object[] results = this.Invoke("GetShortenedName", new object[] {
                    name,
                    length});
        return ((string)(results[0]));
    }
    
    public System.IAsyncResult BeginGetShortenedName(string name, int length, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetShortenedName", new object[] {
                    name,
                    length}, callback, asyncState);
    }
    
    public string EndGetShortenedName(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    public void GetShortenedNameAsync(string name, int length) {
        this.GetShortenedNameAsync(name, length, null);
    }
    
    public void GetShortenedNameAsync(string name, int length, object userState) {
        if ((this.GetShortenedNameOperationCompleted == null)) {
            this.GetShortenedNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetShortenedNameCompleted);
        }
        this.InvokeAsync("GetShortenedName", new object[] {
                    name,
                    length}, this.GetShortenedNameOperationCompleted, userState);
    }
    
    private void OnGetShortenedNameCompleted(object arg) {
        if ((this.GetShortenedNameCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetShortenedNameCompleted(this, new GetShortenedNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///returns true if the parameter is a group id 
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/IsGroupId", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public bool IsGroupId(string userid) {
        object[] results = this.Invoke("IsGroupId", new object[] {
                    userid});
        return ((bool)(results[0]));
    }
    
    public System.IAsyncResult BeginIsGroupId(string userid, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("IsGroupId", new object[] {
                    userid}, callback, asyncState);
    }
    
    public bool EndIsGroupId(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    public void IsGroupIdAsync(string userid) {
        this.IsGroupIdAsync(userid, null);
    }
    
    public void IsGroupIdAsync(string userid, object userState) {
        if ((this.IsGroupIdOperationCompleted == null)) {
            this.IsGroupIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsGroupIdCompleted);
        }
        this.InvokeAsync("IsGroupId", new object[] {
                    userid}, this.IsGroupIdOperationCompleted, userState);
    }
    
    private void OnIsGroupIdCompleted(object arg) {
        if ((this.IsGroupIdCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.IsGroupIdCompleted(this, new IsGroupIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///evaluate the disable sharing policy
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetSharingStatus", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public int GetSharingStatus(string iFolderID) {
        object[] results = this.Invoke("GetSharingStatus", new object[] {
                    iFolderID});
        return ((int)(results[0]));
    }
    
    public System.IAsyncResult BeginGetSharingStatus(string iFolderID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetSharingStatus", new object[] {
                    iFolderID}, callback, asyncState);
    }
    
    public int EndGetSharingStatus(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((int)(results[0]));
    }
    
    public void GetSharingStatusAsync(string iFolderID) {
        this.GetSharingStatusAsync(iFolderID, null);
    }
    
    public void GetSharingStatusAsync(string iFolderID, object userState) {
        if ((this.GetSharingStatusOperationCompleted == null)) {
            this.GetSharingStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSharingStatusCompleted);
        }
        this.InvokeAsync("GetSharingStatus", new object[] {
                    iFolderID}, this.GetSharingStatusOperationCompleted, userState);
    }
    
    private void OnGetSharingStatusCompleted(object arg) {
        if ((this.GetSharingStatusCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetSharingStatusCompleted(this, new GetSharingStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///to remove past sharing of all iFolders of the system 
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/DisableSystemPastSharing", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void DisableSystemPastSharing() {
        this.Invoke("DisableSystemPastSharing", new object[0]);
    }
    
    public System.IAsyncResult BeginDisableSystemPastSharing(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("DisableSystemPastSharing", new object[0], callback, asyncState);
    }
    
    public void EndDisableSystemPastSharing(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    public void DisableSystemPastSharingAsync() {
        this.DisableSystemPastSharingAsync(null);
    }
    
    public void DisableSystemPastSharingAsync(object userState) {
        if ((this.DisableSystemPastSharingOperationCompleted == null)) {
            this.DisableSystemPastSharingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDisableSystemPastSharingCompleted);
        }
        this.InvokeAsync("DisableSystemPastSharing", new object[0], this.DisableSystemPastSharingOperationCompleted, userState);
    }
    
    private void OnDisableSystemPastSharingCompleted(object arg) {
        if ((this.DisableSystemPastSharingCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.DisableSystemPastSharingCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///to remove past sharing of all iFolders of this user 
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/DisableUserPastSharing", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void DisableUserPastSharing(string UserID) {
        this.Invoke("DisableUserPastSharing", new object[] {
                    UserID});
    }
    
    public System.IAsyncResult BeginDisableUserPastSharing(string UserID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("DisableUserPastSharing", new object[] {
                    UserID}, callback, asyncState);
    }
    
    public void EndDisableUserPastSharing(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    public void DisableUserPastSharingAsync(string UserID) {
        this.DisableUserPastSharingAsync(UserID, null);
    }
    
    public void DisableUserPastSharingAsync(string UserID, object userState) {
        if ((this.DisableUserPastSharingOperationCompleted == null)) {
            this.DisableUserPastSharingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDisableUserPastSharingCompleted);
        }
        this.InvokeAsync("DisableUserPastSharing", new object[] {
                    UserID}, this.DisableUserPastSharingOperationCompleted, userState);
    }
    
    private void OnDisableUserPastSharingCompleted(object arg) {
        if ((this.DisableUserPastSharingCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.DisableUserPastSharingCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///to remove past sharing of this iFolder 
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/DisableiFolderPastSharing", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void DisableiFolderPastSharing(string iFolderID) {
        this.Invoke("DisableiFolderPastSharing", new object[] {
                    iFolderID});
    }
    
    public System.IAsyncResult BeginDisableiFolderPastSharing(string iFolderID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("DisableiFolderPastSharing", new object[] {
                    iFolderID}, callback, asyncState);
    }
    
    public void EndDisableiFolderPastSharing(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    public void DisableiFolderPastSharingAsync(string iFolderID) {
        this.DisableiFolderPastSharingAsync(iFolderID, null);
    }
    
    public void DisableiFolderPastSharingAsync(string iFolderID, object userState) {
        if ((this.DisableiFolderPastSharingOperationCompleted == null)) {
            this.DisableiFolderPastSharingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDisableiFolderPastSharingCompleted);
        }
        this.InvokeAsync("DisableiFolderPastSharing", new object[] {
                    iFolderID}, this.DisableiFolderPastSharingOperationCompleted, userState);
    }
    
    private void OnDisableiFolderPastSharingCompleted(object arg) {
        if ((this.DisableiFolderPastSharingCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.DisableiFolderPastSharingCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Add a data store for an iFolder Server.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/AddDataStore", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public int AddDataStore(string datapathname, string fullpath, string ServerID) {
        object[] results = this.Invoke("AddDataStore", new object[] {
                    datapathname,
                    fullpath,
                    ServerID});
        return ((int)(results[0]));
    }
    
    public System.IAsyncResult BeginAddDataStore(string datapathname, string fullpath, string ServerID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("AddDataStore", new object[] {
                    datapathname,
                    fullpath,
                    ServerID}, callback, asyncState);
    }
    
    public int EndAddDataStore(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((int)(results[0]));
    }
    
    public void AddDataStoreAsync(string datapathname, string fullpath, string ServerID) {
        this.AddDataStoreAsync(datapathname, fullpath, ServerID, null);
    }
    
    public void AddDataStoreAsync(string datapathname, string fullpath, string ServerID, object userState) {
        if ((this.AddDataStoreOperationCompleted == null)) {
            this.AddDataStoreOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddDataStoreCompleted);
        }
        this.InvokeAsync("AddDataStore", new object[] {
                    datapathname,
                    fullpath,
                    ServerID}, this.AddDataStoreOperationCompleted, userState);
    }
    
    private void OnAddDataStoreCompleted(object arg) {
        if ((this.AddDataStoreCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.AddDataStoreCompleted(this, new AddDataStoreCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Modify a data store for an iFolder Server.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/ModifyDataStore", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public bool ModifyDataStore(string datapathname, bool enabled) {
        object[] results = this.Invoke("ModifyDataStore", new object[] {
                    datapathname,
                    enabled});
        return ((bool)(results[0]));
    }
    
    public System.IAsyncResult BeginModifyDataStore(string datapathname, bool enabled, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ModifyDataStore", new object[] {
                    datapathname,
                    enabled}, callback, asyncState);
    }
    
    public bool EndModifyDataStore(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    public void ModifyDataStoreAsync(string datapathname, bool enabled) {
        this.ModifyDataStoreAsync(datapathname, enabled, null);
    }
    
    public void ModifyDataStoreAsync(string datapathname, bool enabled, object userState) {
        if ((this.ModifyDataStoreOperationCompleted == null)) {
            this.ModifyDataStoreOperationCompleted = new System.Threading.SendOrPostCallback(this.OnModifyDataStoreCompleted);
        }
        this.InvokeAsync("ModifyDataStore", new object[] {
                    datapathname,
                    enabled}, this.ModifyDataStoreOperationCompleted, userState);
    }
    
    private void OnModifyDataStoreCompleted(object arg) {
        if ((this.ModifyDataStoreCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.ModifyDataStoreCompleted(this, new ModifyDataStoreCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Delete a data store for an iFolder Server.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/DeleteDataStore", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public bool DeleteDataStore(string datapathname) {
        object[] results = this.Invoke("DeleteDataStore", new object[] {
                    datapathname});
        return ((bool)(results[0]));
    }
    
    public System.IAsyncResult BeginDeleteDataStore(string datapathname, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("DeleteDataStore", new object[] {
                    datapathname}, callback, asyncState);
    }
    
    public bool EndDeleteDataStore(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    public void DeleteDataStoreAsync(string datapathname) {
        this.DeleteDataStoreAsync(datapathname, null);
    }
    
    public void DeleteDataStoreAsync(string datapathname, object userState) {
        if ((this.DeleteDataStoreOperationCompleted == null)) {
            this.DeleteDataStoreOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteDataStoreCompleted);
        }
        this.InvokeAsync("DeleteDataStore", new object[] {
                    datapathname}, this.DeleteDataStoreOperationCompleted, userState);
    }
    
    private void OnDeleteDataStoreCompleted(object arg) {
        if ((this.DeleteDataStoreCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.DeleteDataStoreCompleted(this, new DeleteDataStoreCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Gets all the Data Store for an iFolder Server.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetVolumes", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public VolumesList GetVolumes(int index, int max) {
        object[] results = this.Invoke("GetVolumes", new object[] {
                    index,
                    max});
        return ((VolumesList)(results[0]));
    }
    
    public System.IAsyncResult BeginGetVolumes(int index, int max, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetVolumes", new object[] {
                    index,
                    max}, callback, asyncState);
    }
    
    public VolumesList EndGetVolumes(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((VolumesList)(results[0]));
    }
    
    public void GetVolumesAsync(int index, int max) {
        this.GetVolumesAsync(index, max, null);
    }
    
    public void GetVolumesAsync(int index, int max, object userState) {
        if ((this.GetVolumesOperationCompleted == null)) {
            this.GetVolumesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetVolumesCompleted);
        }
        this.InvokeAsync("GetVolumes", new object[] {
                    index,
                    max}, this.GetVolumesOperationCompleted, userState);
    }
    
    private void OnGetVolumesCompleted(object arg) {
        if ((this.GetVolumesCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetVolumesCompleted(this, new GetVolumesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Fetch the list of available reports.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetReports", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public string[] GetReports() {
        object[] results = this.Invoke("GetReports", new object[0]);
        return ((string[])(results[0]));
    }
    
    public System.IAsyncResult BeginGetReports(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetReports", new object[0], callback, asyncState);
    }
    
    public string[] EndGetReports(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string[])(results[0]));
    }
    
    public void GetReportsAsync() {
        this.GetReportsAsync(null);
    }
    
    public void GetReportsAsync(object userState) {
        if ((this.GetReportsOperationCompleted == null)) {
            this.GetReportsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetReportsCompleted);
        }
        this.InvokeAsync("GetReports", new object[0], this.GetReportsOperationCompleted, userState);
    }
    
    private void OnGetReportsCompleted(object arg) {
        if ((this.GetReportsCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetReportsCompleted(this, new GetReportsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Get information about an iFolder Server.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetServer", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public iFolderServer GetServer(string serverID) {
        object[] results = this.Invoke("GetServer", new object[] {
                    serverID});
        return ((iFolderServer)(results[0]));
    }
    
    public System.IAsyncResult BeginGetServer(string serverID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetServer", new object[] {
                    serverID}, callback, asyncState);
    }
    
    public iFolderServer EndGetServer(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((iFolderServer)(results[0]));
    }
    
    public void GetServerAsync(string serverID) {
        this.GetServerAsync(serverID, null);
    }
    
    public void GetServerAsync(string serverID, object userState) {
        if ((this.GetServerOperationCompleted == null)) {
            this.GetServerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServerCompleted);
        }
        this.InvokeAsync("GetServer", new object[] {
                    serverID}, this.GetServerOperationCompleted, userState);
    }
    
    private void OnGetServerCompleted(object arg) {
        if ((this.GetServerCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetServerCompleted(this, new GetServerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Get information about all the iFolder servers.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetServers", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public iFolderServer[] GetServers() {
        object[] results = this.Invoke("GetServers", new object[0]);
        return ((iFolderServer[])(results[0]));
    }
    
    public System.IAsyncResult BeginGetServers(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetServers", new object[0], callback, asyncState);
    }
    
    public iFolderServer[] EndGetServers(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((iFolderServer[])(results[0]));
    }
    
    public void GetServersAsync() {
        this.GetServersAsync(null);
    }
    
    public void GetServersAsync(object userState) {
        if ((this.GetServersOperationCompleted == null)) {
            this.GetServersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServersCompleted);
        }
        this.InvokeAsync("GetServers", new object[0], this.GetServersOperationCompleted, userState);
    }
    
    private void OnGetServersCompleted(object arg) {
        if ((this.GetServersCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetServersCompleted(this, new GetServersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Get information about iFolder Servers identified by a search on name.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetServersByName", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public iFolderServerSet GetServersByName(SearchOperation operation, string pattern, int index, int count) {
        object[] results = this.Invoke("GetServersByName", new object[] {
                    operation,
                    pattern,
                    index,
                    count});
        return ((iFolderServerSet)(results[0]));
    }
    
    public System.IAsyncResult BeginGetServersByName(SearchOperation operation, string pattern, int index, int count, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetServersByName", new object[] {
                    operation,
                    pattern,
                    index,
                    count}, callback, asyncState);
    }
    
    public iFolderServerSet EndGetServersByName(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((iFolderServerSet)(results[0]));
    }
    
    public void GetServersByNameAsync(SearchOperation operation, string pattern, int index, int count) {
        this.GetServersByNameAsync(operation, pattern, index, count, null);
    }
    
    public void GetServersByNameAsync(SearchOperation operation, string pattern, int index, int count, object userState) {
        if ((this.GetServersByNameOperationCompleted == null)) {
            this.GetServersByNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServersByNameCompleted);
        }
        this.InvokeAsync("GetServersByName", new object[] {
                    operation,
                    pattern,
                    index,
                    count}, this.GetServersByNameOperationCompleted, userState);
    }
    
    private void OnGetServersByNameCompleted(object arg) {
        if ((this.GetServersByNameCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetServersByNameCompleted(this, new GetServersByNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Delete an iFolder
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/DeleteiFolder", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void DeleteiFolder(string ifolderID) {
        this.Invoke("DeleteiFolder", new object[] {
                    ifolderID});
    }
    
    public System.IAsyncResult BeginDeleteiFolder(string ifolderID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("DeleteiFolder", new object[] {
                    ifolderID}, callback, asyncState);
    }
    
    public void EndDeleteiFolder(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    public void DeleteiFolderAsync(string ifolderID) {
        this.DeleteiFolderAsync(ifolderID, null);
    }
    
    public void DeleteiFolderAsync(string ifolderID, object userState) {
        if ((this.DeleteiFolderOperationCompleted == null)) {
            this.DeleteiFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteiFolderCompleted);
        }
        this.InvokeAsync("DeleteiFolder", new object[] {
                    ifolderID}, this.DeleteiFolderOperationCompleted, userState);
    }
    
    private void OnDeleteiFolderCompleted(object arg) {
        if ((this.DeleteiFolderCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.DeleteiFolderCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Delete an iFolder
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/RestoreiFolderData", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public int RestoreiFolderData(string url, string adminname, string adminpassword, string ifolderid, string relativepath, string basepath, int startindex, string LogLocation) {
        object[] results = this.Invoke("RestoreiFolderData", new object[] {
                    url,
                    adminname,
                    adminpassword,
                    ifolderid,
                    relativepath,
                    basepath,
                    startindex,
                    LogLocation});
        return ((int)(results[0]));
    }
    
    public System.IAsyncResult BeginRestoreiFolderData(string url, string adminname, string adminpassword, string ifolderid, string relativepath, string basepath, int startindex, string LogLocation, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("RestoreiFolderData", new object[] {
                    url,
                    adminname,
                    adminpassword,
                    ifolderid,
                    relativepath,
                    basepath,
                    startindex,
                    LogLocation}, callback, asyncState);
    }
    
    public int EndRestoreiFolderData(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((int)(results[0]));
    }
    
    public void RestoreiFolderDataAsync(string url, string adminname, string adminpassword, string ifolderid, string relativepath, string basepath, int startindex, string LogLocation) {
        this.RestoreiFolderDataAsync(url, adminname, adminpassword, ifolderid, relativepath, basepath, startindex, LogLocation, null);
    }
    
    public void RestoreiFolderDataAsync(string url, string adminname, string adminpassword, string ifolderid, string relativepath, string basepath, int startindex, string LogLocation, object userState) {
        if ((this.RestoreiFolderDataOperationCompleted == null)) {
            this.RestoreiFolderDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRestoreiFolderDataCompleted);
        }
        this.InvokeAsync("RestoreiFolderData", new object[] {
                    url,
                    adminname,
                    adminpassword,
                    ifolderid,
                    relativepath,
                    basepath,
                    startindex,
                    LogLocation}, this.RestoreiFolderDataOperationCompleted, userState);
    }
    
    private void OnRestoreiFolderDataCompleted(object arg) {
        if ((this.RestoreiFolderDataCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.RestoreiFolderDataCompleted(this, new RestoreiFolderDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Delete an iFolder
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetRestoreStatusForCollection", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public int GetRestoreStatusForCollection(string ifolderid, out int totalcount, out int finishedcount) {
        object[] results = this.Invoke("GetRestoreStatusForCollection", new object[] {
                    ifolderid});
        finishedcount = ((int)(results[2]));
        totalcount = ((int)(results[1]));
        return ((int)(results[0]));
    }
    
    public System.IAsyncResult BeginGetRestoreStatusForCollection(string ifolderid, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetRestoreStatusForCollection", new object[] {
                    ifolderid}, callback, asyncState);
    }
    
    public int EndGetRestoreStatusForCollection(System.IAsyncResult asyncResult, out int totalcount, out int finishedcount) {
        object[] results = this.EndInvoke(asyncResult);
        finishedcount = ((int)(results[2]));
        totalcount = ((int)(results[1]));
        return ((int)(results[0]));
    }
    
    public void GetRestoreStatusForCollectionAsync(string ifolderid) {
        this.GetRestoreStatusForCollectionAsync(ifolderid, null);
    }
    
    public void GetRestoreStatusForCollectionAsync(string ifolderid, object userState) {
        if ((this.GetRestoreStatusForCollectionOperationCompleted == null)) {
            this.GetRestoreStatusForCollectionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRestoreStatusForCollectionCompleted);
        }
        this.InvokeAsync("GetRestoreStatusForCollection", new object[] {
                    ifolderid}, this.GetRestoreStatusForCollectionOperationCompleted, userState);
    }
    
    private void OnGetRestoreStatusForCollectionCompleted(object arg) {
        if ((this.GetRestoreStatusForCollectionCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetRestoreStatusForCollectionCompleted(this, new GetRestoreStatusForCollectionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Get information about an iFolder.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetiFolder", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public iFolder GetiFolder(string ifolderID) {
        object[] results = this.Invoke("GetiFolder", new object[] {
                    ifolderID});
        return ((iFolder)(results[0]));
    }
    
    public System.IAsyncResult BeginGetiFolder(string ifolderID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetiFolder", new object[] {
                    ifolderID}, callback, asyncState);
    }
    
    public iFolder EndGetiFolder(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((iFolder)(results[0]));
    }
    
    public void GetiFolderAsync(string ifolderID) {
        this.GetiFolderAsync(ifolderID, null);
    }
    
    public void GetiFolderAsync(string ifolderID, object userState) {
        if ((this.GetiFolderOperationCompleted == null)) {
            this.GetiFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetiFolderCompleted);
        }
        this.InvokeAsync("GetiFolder", new object[] {
                    ifolderID}, this.GetiFolderOperationCompleted, userState);
    }
    
    private void OnGetiFolderCompleted(object arg) {
        if ((this.GetiFolderCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetiFolderCompleted(this, new GetiFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Get detailed information about an iFolder.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetiFolderDetails", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public iFolderDetails GetiFolderDetails(string ifolderID) {
        object[] results = this.Invoke("GetiFolderDetails", new object[] {
                    ifolderID});
        return ((iFolderDetails)(results[0]));
    }
    
    public System.IAsyncResult BeginGetiFolderDetails(string ifolderID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetiFolderDetails", new object[] {
                    ifolderID}, callback, asyncState);
    }
    
    public iFolderDetails EndGetiFolderDetails(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((iFolderDetails)(results[0]));
    }
    
    public void GetiFolderDetailsAsync(string ifolderID) {
        this.GetiFolderDetailsAsync(ifolderID, null);
    }
    
    public void GetiFolderDetailsAsync(string ifolderID, object userState) {
        if ((this.GetiFolderDetailsOperationCompleted == null)) {
            this.GetiFolderDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetiFolderDetailsCompleted);
        }
        this.InvokeAsync("GetiFolderDetails", new object[] {
                    ifolderID}, this.GetiFolderDetailsOperationCompleted, userState);
    }
    
    private void OnGetiFolderDetailsCompleted(object arg) {
        if ((this.GetiFolderDetailsCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetiFolderDetailsCompleted(this, new GetiFolderDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Set the description of an iFolder.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/SetiFolderDescription", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void SetiFolderDescription(string ifolderID, string description) {
        this.Invoke("SetiFolderDescription", new object[] {
                    ifolderID,
                    description});
    }
    
    public System.IAsyncResult BeginSetiFolderDescription(string ifolderID, string description, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetiFolderDescription", new object[] {
                    ifolderID,
                    description}, callback, asyncState);
    }
    
    public void EndSetiFolderDescription(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    public void SetiFolderDescriptionAsync(string ifolderID, string description) {
        this.SetiFolderDescriptionAsync(ifolderID, description, null);
    }
    
    public void SetiFolderDescriptionAsync(string ifolderID, string description, object userState) {
        if ((this.SetiFolderDescriptionOperationCompleted == null)) {
            this.SetiFolderDescriptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetiFolderDescriptionCompleted);
        }
        this.InvokeAsync("SetiFolderDescription", new object[] {
                    ifolderID,
                    description}, this.SetiFolderDescriptionOperationCompleted, userState);
    }
    
    private void OnSetiFolderDescriptionCompleted(object arg) {
        if ((this.SetiFolderDescriptionCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SetiFolderDescriptionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Publish an iFolder.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/PublishiFolder", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void PublishiFolder(string ifolderID, bool publish) {
        this.Invoke("PublishiFolder", new object[] {
                    ifolderID,
                    publish});
    }
    
    public System.IAsyncResult BeginPublishiFolder(string ifolderID, bool publish, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("PublishiFolder", new object[] {
                    ifolderID,
                    publish}, callback, asyncState);
    }
    
    public void EndPublishiFolder(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    public void PublishiFolderAsync(string ifolderID, bool publish) {
        this.PublishiFolderAsync(ifolderID, publish, null);
    }
    
    public void PublishiFolderAsync(string ifolderID, bool publish, object userState) {
        if ((this.PublishiFolderOperationCompleted == null)) {
            this.PublishiFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPublishiFolderCompleted);
        }
        this.InvokeAsync("PublishiFolder", new object[] {
                    ifolderID,
                    publish}, this.PublishiFolderOperationCompleted, userState);
    }
    
    private void OnPublishiFolderCompleted(object arg) {
        if ((this.PublishiFolderCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.PublishiFolderCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Get a history of changes to an iFolder.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetChanges", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public ChangeEntrySet GetChanges(string ifolderID, string itemID, int index, int max) {
        object[] results = this.Invoke("GetChanges", new object[] {
                    ifolderID,
                    itemID,
                    index,
                    max});
        return ((ChangeEntrySet)(results[0]));
    }
    
    public System.IAsyncResult BeginGetChanges(string ifolderID, string itemID, int index, int max, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetChanges", new object[] {
                    ifolderID,
                    itemID,
                    index,
                    max}, callback, asyncState);
    }
    
    public ChangeEntrySet EndGetChanges(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((ChangeEntrySet)(results[0]));
    }
    
    public void GetChangesAsync(string ifolderID, string itemID, int index, int max) {
        this.GetChangesAsync(ifolderID, itemID, index, max, null);
    }
    
    public void GetChangesAsync(string ifolderID, string itemID, int index, int max, object userState) {
        if ((this.GetChangesOperationCompleted == null)) {
            this.GetChangesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetChangesCompleted);
        }
        this.InvokeAsync("GetChanges", new object[] {
                    ifolderID,
                    itemID,
                    index,
                    max}, this.GetChangesOperationCompleted, userState);
    }
    
    private void OnGetChangesCompleted(object arg) {
        if ((this.GetChangesCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetChangesCompleted(this, new GetChangesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Get a trimmed url from full url
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/TrimUrl", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public string TrimUrl(string FullUrl) {
        object[] results = this.Invoke("TrimUrl", new object[] {
                    FullUrl});
        return ((string)(results[0]));
    }
    
    public System.IAsyncResult BeginTrimUrl(string FullUrl, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("TrimUrl", new object[] {
                    FullUrl}, callback, asyncState);
    }
    
    public string EndTrimUrl(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    public void TrimUrlAsync(string FullUrl) {
        this.TrimUrlAsync(FullUrl, null);
    }
    
    public void TrimUrlAsync(string FullUrl, object userState) {
        if ((this.TrimUrlOperationCompleted == null)) {
            this.TrimUrlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTrimUrlCompleted);
        }
        this.InvokeAsync("TrimUrl", new object[] {
                    FullUrl}, this.TrimUrlOperationCompleted, userState);
    }
    
    private void OnTrimUrlCompleted(object arg) {
        if ((this.TrimUrlCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.TrimUrlCompleted(this, new TrimUrlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Get information about the authenticated user.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetAuthenticatedUser", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public iFolderUser GetAuthenticatedUser() {
        object[] results = this.Invoke("GetAuthenticatedUser", new object[0]);
        return ((iFolderUser)(results[0]));
    }
    
    public System.IAsyncResult BeginGetAuthenticatedUser(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetAuthenticatedUser", new object[0], callback, asyncState);
    }
    
    public iFolderUser EndGetAuthenticatedUser(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((iFolderUser)(results[0]));
    }
    
    public void GetAuthenticatedUserAsync() {
        this.GetAuthenticatedUserAsync(null);
    }
    
    public void GetAuthenticatedUserAsync(object userState) {
        if ((this.GetAuthenticatedUserOperationCompleted == null)) {
            this.GetAuthenticatedUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAuthenticatedUserCompleted);
        }
        this.InvokeAsync("GetAuthenticatedUser", new object[0], this.GetAuthenticatedUserOperationCompleted, userState);
    }
    
    private void OnGetAuthenticatedUserCompleted(object arg) {
        if ((this.GetAuthenticatedUserCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetAuthenticatedUserCompleted(this, new GetAuthenticatedUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Set the rights of a member on an iFolder.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/SetMemberRights", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void SetMemberRights(string ifolderID, string userID, Rights rights) {
        this.Invoke("SetMemberRights", new object[] {
                    ifolderID,
                    userID,
                    rights});
    }
    
    public System.IAsyncResult BeginSetMemberRights(string ifolderID, string userID, Rights rights, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetMemberRights", new object[] {
                    ifolderID,
                    userID,
                    rights}, callback, asyncState);
    }
    
    public void EndSetMemberRights(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    public void SetMemberRightsAsync(string ifolderID, string userID, Rights rights) {
        this.SetMemberRightsAsync(ifolderID, userID, rights, null);
    }
    
    public void SetMemberRightsAsync(string ifolderID, string userID, Rights rights, object userState) {
        if ((this.SetMemberRightsOperationCompleted == null)) {
            this.SetMemberRightsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetMemberRightsCompleted);
        }
        this.InvokeAsync("SetMemberRights", new object[] {
                    ifolderID,
                    userID,
                    rights}, this.SetMemberRightsOperationCompleted, userState);
    }
    
    private void OnSetMemberRightsCompleted(object arg) {
        if ((this.SetMemberRightsCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SetMemberRightsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Add a member to an iFolder.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/AddMember", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void AddMember(string ifolderID, string userID, Rights rights) {
        this.Invoke("AddMember", new object[] {
                    ifolderID,
                    userID,
                    rights});
    }
    
    public System.IAsyncResult BeginAddMember(string ifolderID, string userID, Rights rights, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("AddMember", new object[] {
                    ifolderID,
                    userID,
                    rights}, callback, asyncState);
    }
    
    public void EndAddMember(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    public void AddMemberAsync(string ifolderID, string userID, Rights rights) {
        this.AddMemberAsync(ifolderID, userID, rights, null);
    }
    
    public void AddMemberAsync(string ifolderID, string userID, Rights rights, object userState) {
        if ((this.AddMemberOperationCompleted == null)) {
            this.AddMemberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddMemberCompleted);
        }
        this.InvokeAsync("AddMember", new object[] {
                    ifolderID,
                    userID,
                    rights}, this.AddMemberOperationCompleted, userState);
    }
    
    private void OnAddMemberCompleted(object arg) {
        if ((this.AddMemberCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.AddMemberCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Remove a member from an iFolder.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/RemoveMember", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void RemoveMember(string ifolderID, string userID) {
        this.Invoke("RemoveMember", new object[] {
                    ifolderID,
                    userID});
    }
    
    public System.IAsyncResult BeginRemoveMember(string ifolderID, string userID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("RemoveMember", new object[] {
                    ifolderID,
                    userID}, callback, asyncState);
    }
    
    public void EndRemoveMember(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    public void RemoveMemberAsync(string ifolderID, string userID) {
        this.RemoveMemberAsync(ifolderID, userID, null);
    }
    
    public void RemoveMemberAsync(string ifolderID, string userID, object userState) {
        if ((this.RemoveMemberOperationCompleted == null)) {
            this.RemoveMemberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveMemberCompleted);
        }
        this.InvokeAsync("RemoveMember", new object[] {
                    ifolderID,
                    userID}, this.RemoveMemberOperationCompleted, userState);
    }
    
    private void OnRemoveMemberCompleted(object arg) {
        if ((this.RemoveMemberCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.RemoveMemberCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Set the owner of an iFolder.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/SetiFolderOwner", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void SetiFolderOwner(string ifolderID, string userID, bool OrphanAdopt) {
        this.Invoke("SetiFolderOwner", new object[] {
                    ifolderID,
                    userID,
                    OrphanAdopt});
    }
    
    public System.IAsyncResult BeginSetiFolderOwner(string ifolderID, string userID, bool OrphanAdopt, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetiFolderOwner", new object[] {
                    ifolderID,
                    userID,
                    OrphanAdopt}, callback, asyncState);
    }
    
    public void EndSetiFolderOwner(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    public void SetiFolderOwnerAsync(string ifolderID, string userID, bool OrphanAdopt) {
        this.SetiFolderOwnerAsync(ifolderID, userID, OrphanAdopt, null);
    }
    
    public void SetiFolderOwnerAsync(string ifolderID, string userID, bool OrphanAdopt, object userState) {
        if ((this.SetiFolderOwnerOperationCompleted == null)) {
            this.SetiFolderOwnerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetiFolderOwnerCompleted);
        }
        this.InvokeAsync("SetiFolderOwner", new object[] {
                    ifolderID,
                    userID,
                    OrphanAdopt}, this.SetiFolderOwnerOperationCompleted, userState);
    }
    
    private void OnSetiFolderOwnerCompleted(object arg) {
        if ((this.SetiFolderOwnerCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SetiFolderOwnerCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Get information about the members of an iFolder.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetMembers", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public iFolderUserSet GetMembers(string ifolderID, int index, int max) {
        object[] results = this.Invoke("GetMembers", new object[] {
                    ifolderID,
                    index,
                    max});
        return ((iFolderUserSet)(results[0]));
    }
    
    public System.IAsyncResult BeginGetMembers(string ifolderID, int index, int max, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetMembers", new object[] {
                    ifolderID,
                    index,
                    max}, callback, asyncState);
    }
    
    public iFolderUserSet EndGetMembers(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((iFolderUserSet)(results[0]));
    }
    
    public void GetMembersAsync(string ifolderID, int index, int max) {
        this.GetMembersAsync(ifolderID, index, max, null);
    }
    
    public void GetMembersAsync(string ifolderID, int index, int max, object userState) {
        if ((this.GetMembersOperationCompleted == null)) {
            this.GetMembersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMembersCompleted);
        }
        this.InvokeAsync("GetMembers", new object[] {
                    ifolderID,
                    index,
                    max}, this.GetMembersOperationCompleted, userState);
    }
    
    private void OnGetMembersCompleted(object arg) {
        if ((this.GetMembersCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetMembersCompleted(this, new GetMembersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Get PassPhrase set status
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/IsPassPhraseSetForUser", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public bool IsPassPhraseSetForUser(string userID) {
        object[] results = this.Invoke("IsPassPhraseSetForUser", new object[] {
                    userID});
        return ((bool)(results[0]));
    }
    
    public System.IAsyncResult BeginIsPassPhraseSetForUser(string userID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("IsPassPhraseSetForUser", new object[] {
                    userID}, callback, asyncState);
    }
    
    public bool EndIsPassPhraseSetForUser(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    public void IsPassPhraseSetForUserAsync(string userID) {
        this.IsPassPhraseSetForUserAsync(userID, null);
    }
    
    public void IsPassPhraseSetForUserAsync(string userID, object userState) {
        if ((this.IsPassPhraseSetForUserOperationCompleted == null)) {
            this.IsPassPhraseSetForUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsPassPhraseSetForUserCompleted);
        }
        this.InvokeAsync("IsPassPhraseSetForUser", new object[] {
                    userID}, this.IsPassPhraseSetForUserOperationCompleted, userState);
    }
    
    private void OnIsPassPhraseSetForUserCompleted(object arg) {
        if ((this.IsPassPhraseSetForUserCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.IsPassPhraseSetForUserCompleted(this, new IsPassPhraseSetForUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Get information about all of the iFolder users.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetUsers", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public iFolderUserSet GetUsers(int index, int max) {
        object[] results = this.Invoke("GetUsers", new object[] {
                    index,
                    max});
        return ((iFolderUserSet)(results[0]));
    }
    
    public System.IAsyncResult BeginGetUsers(int index, int max, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetUsers", new object[] {
                    index,
                    max}, callback, asyncState);
    }
    
    public iFolderUserSet EndGetUsers(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((iFolderUserSet)(results[0]));
    }
    
    public void GetUsersAsync(int index, int max) {
        this.GetUsersAsync(index, max, null);
    }
    
    public void GetUsersAsync(int index, int max, object userState) {
        if ((this.GetUsersOperationCompleted == null)) {
            this.GetUsersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUsersCompleted);
        }
        this.InvokeAsync("GetUsers", new object[] {
                    index,
                    max}, this.GetUsersOperationCompleted, userState);
    }
    
    private void OnGetUsersCompleted(object arg) {
        if ((this.GetUsersCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetUsersCompleted(this, new GetUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Provision the users to different servers
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/ProvisionUsersToServers", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void ProvisionUsersToServers(string[] ServerNames, string[] UserIDs) {
        this.Invoke("ProvisionUsersToServers", new object[] {
                    ServerNames,
                    UserIDs});
    }
    
    public System.IAsyncResult BeginProvisionUsersToServers(string[] ServerNames, string[] UserIDs, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ProvisionUsersToServers", new object[] {
                    ServerNames,
                    UserIDs}, callback, asyncState);
    }
    
    public void EndProvisionUsersToServers(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    public void ProvisionUsersToServersAsync(string[] ServerNames, string[] UserIDs) {
        this.ProvisionUsersToServersAsync(ServerNames, UserIDs, null);
    }
    
    public void ProvisionUsersToServersAsync(string[] ServerNames, string[] UserIDs, object userState) {
        if ((this.ProvisionUsersToServersOperationCompleted == null)) {
            this.ProvisionUsersToServersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProvisionUsersToServersCompleted);
        }
        this.InvokeAsync("ProvisionUsersToServers", new object[] {
                    ServerNames,
                    UserIDs}, this.ProvisionUsersToServersOperationCompleted, userState);
    }
    
    private void OnProvisionUsersToServersCompleted(object arg) {
        if ((this.ProvisionUsersToServersCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.ProvisionUsersToServersCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Provision the users to one server
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/ProvisionUsersToServer", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void ProvisionUsersToServer(string ServerName, string[] ListOfUsers) {
        this.Invoke("ProvisionUsersToServer", new object[] {
                    ServerName,
                    ListOfUsers});
    }
    
    public System.IAsyncResult BeginProvisionUsersToServer(string ServerName, string[] ListOfUsers, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ProvisionUsersToServer", new object[] {
                    ServerName,
                    ListOfUsers}, callback, asyncState);
    }
    
    public void EndProvisionUsersToServer(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    public void ProvisionUsersToServerAsync(string ServerName, string[] ListOfUsers) {
        this.ProvisionUsersToServerAsync(ServerName, ListOfUsers, null);
    }
    
    public void ProvisionUsersToServerAsync(string ServerName, string[] ListOfUsers, object userState) {
        if ((this.ProvisionUsersToServerOperationCompleted == null)) {
            this.ProvisionUsersToServerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProvisionUsersToServerCompleted);
        }
        this.InvokeAsync("ProvisionUsersToServer", new object[] {
                    ServerName,
                    ListOfUsers}, this.ProvisionUsersToServerOperationCompleted, userState);
    }
    
    private void OnProvisionUsersToServerCompleted(object arg) {
        if ((this.ProvisionUsersToServerCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.ProvisionUsersToServerCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Get the list of servers
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetServerProvisioningList", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public string[] GetServerProvisioningList() {
        object[] results = this.Invoke("GetServerProvisioningList", new object[0]);
        return ((string[])(results[0]));
    }
    
    public System.IAsyncResult BeginGetServerProvisioningList(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetServerProvisioningList", new object[0], callback, asyncState);
    }
    
    public string[] EndGetServerProvisioningList(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string[])(results[0]));
    }
    
    public void GetServerProvisioningListAsync() {
        this.GetServerProvisioningListAsync(null);
    }
    
    public void GetServerProvisioningListAsync(object userState) {
        if ((this.GetServerProvisioningListOperationCompleted == null)) {
            this.GetServerProvisioningListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServerProvisioningListCompleted);
        }
        this.InvokeAsync("GetServerProvisioningList", new object[0], this.GetServerProvisioningListOperationCompleted, userState);
    }
    
    private void OnGetServerProvisioningListCompleted(object arg) {
        if ((this.GetServerProvisioningListCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetServerProvisioningListCompleted(this, new GetServerProvisioningListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Get the status of simiasrequiressl
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetSimiasRequiresSSLStatus", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public string GetSimiasRequiresSSLStatus() {
        object[] results = this.Invoke("GetSimiasRequiresSSLStatus", new object[0]);
        return ((string)(results[0]));
    }
    
    public System.IAsyncResult BeginGetSimiasRequiresSSLStatus(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetSimiasRequiresSSLStatus", new object[0], callback, asyncState);
    }
    
    public string EndGetSimiasRequiresSSLStatus(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    public void GetSimiasRequiresSSLStatusAsync() {
        this.GetSimiasRequiresSSLStatusAsync(null);
    }
    
    public void GetSimiasRequiresSSLStatusAsync(object userState) {
        if ((this.GetSimiasRequiresSSLStatusOperationCompleted == null)) {
            this.GetSimiasRequiresSSLStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSimiasRequiresSSLStatusCompleted);
        }
        this.InvokeAsync("GetSimiasRequiresSSLStatus", new object[0], this.GetSimiasRequiresSSLStatusOperationCompleted, userState);
    }
    
    private void OnGetSimiasRequiresSSLStatusCompleted(object arg) {
        if ((this.GetSimiasRequiresSSLStatusCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetSimiasRequiresSSLStatusCompleted(this, new GetSimiasRequiresSSLStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///sets IP details for the server
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/SetIPDetails", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public bool SetIPDetails(string privateIP, string publicIP, string MastersIP) {
        object[] results = this.Invoke("SetIPDetails", new object[] {
                    privateIP,
                    publicIP,
                    MastersIP});
        return ((bool)(results[0]));
    }
    
    public System.IAsyncResult BeginSetIPDetails(string privateIP, string publicIP, string MastersIP, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetIPDetails", new object[] {
                    privateIP,
                    publicIP,
                    MastersIP}, callback, asyncState);
    }
    
    public bool EndSetIPDetails(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    public void SetIPDetailsAsync(string privateIP, string publicIP, string MastersIP) {
        this.SetIPDetailsAsync(privateIP, publicIP, MastersIP, null);
    }
    
    public void SetIPDetailsAsync(string privateIP, string publicIP, string MastersIP, object userState) {
        if ((this.SetIPDetailsOperationCompleted == null)) {
            this.SetIPDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetIPDetailsCompleted);
        }
        this.InvokeAsync("SetIPDetails", new object[] {
                    privateIP,
                    publicIP,
                    MastersIP}, this.SetIPDetailsOperationCompleted, userState);
    }
    
    private void OnSetIPDetailsCompleted(object arg) {
        if ((this.SetIPDetailsCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SetIPDetailsCompleted(this, new SetIPDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Get information about a user using an id or username.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetUser", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public iFolderUser GetUser(string userID) {
        object[] results = this.Invoke("GetUser", new object[] {
                    userID});
        return ((iFolderUser)(results[0]));
    }
    
    public System.IAsyncResult BeginGetUser(string userID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetUser", new object[] {
                    userID}, callback, asyncState);
    }
    
    public iFolderUser EndGetUser(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((iFolderUser)(results[0]));
    }
    
    public void GetUserAsync(string userID) {
        this.GetUserAsync(userID, null);
    }
    
    public void GetUserAsync(string userID, object userState) {
        if ((this.GetUserOperationCompleted == null)) {
            this.GetUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserCompleted);
        }
        this.InvokeAsync("GetUser", new object[] {
                    userID}, this.GetUserOperationCompleted, userState);
    }
    
    private void OnGetUserCompleted(object arg) {
        if ((this.GetUserCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetUserCompleted(this, new GetUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Get User Details
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetUserDetails", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public iFolderUserDetails GetUserDetails(string userID) {
        object[] results = this.Invoke("GetUserDetails", new object[] {
                    userID});
        return ((iFolderUserDetails)(results[0]));
    }
    
    public System.IAsyncResult BeginGetUserDetails(string userID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetUserDetails", new object[] {
                    userID}, callback, asyncState);
    }
    
    public iFolderUserDetails EndGetUserDetails(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((iFolderUserDetails)(results[0]));
    }
    
    public void GetUserDetailsAsync(string userID) {
        this.GetUserDetailsAsync(userID, null);
    }
    
    public void GetUserDetailsAsync(string userID, object userState) {
        if ((this.GetUserDetailsOperationCompleted == null)) {
            this.GetUserDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserDetailsCompleted);
        }
        this.InvokeAsync("GetUserDetails", new object[] {
                    userID}, this.GetUserDetailsOperationCompleted, userState);
    }
    
    private void OnGetUserDetailsCompleted(object arg) {
        if ((this.GetUserDetailsCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetUserDetailsCompleted(this, new GetUserDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Get information about all of the iFolder users identified by the search property, operation, and pattern.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetUsersBySearch", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public iFolderUserSet GetUsersBySearch(SearchProperty property, SearchOperation operation, string pattern, int index, int max) {
        object[] results = this.Invoke("GetUsersBySearch", new object[] {
                    property,
                    operation,
                    pattern,
                    index,
                    max});
        return ((iFolderUserSet)(results[0]));
    }
    
    public System.IAsyncResult BeginGetUsersBySearch(SearchProperty property, SearchOperation operation, string pattern, int index, int max, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetUsersBySearch", new object[] {
                    property,
                    operation,
                    pattern,
                    index,
                    max}, callback, asyncState);
    }
    
    public iFolderUserSet EndGetUsersBySearch(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((iFolderUserSet)(results[0]));
    }
    
    public void GetUsersBySearchAsync(SearchProperty property, SearchOperation operation, string pattern, int index, int max) {
        this.GetUsersBySearchAsync(property, operation, pattern, index, max, null);
    }
    
    public void GetUsersBySearchAsync(SearchProperty property, SearchOperation operation, string pattern, int index, int max, object userState) {
        if ((this.GetUsersBySearchOperationCompleted == null)) {
            this.GetUsersBySearchOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUsersBySearchCompleted);
        }
        this.InvokeAsync("GetUsersBySearch", new object[] {
                    property,
                    operation,
                    pattern,
                    index,
                    max}, this.GetUsersBySearchOperationCompleted, userState);
    }
    
    private void OnGetUsersBySearchCompleted(object arg) {
        if ((this.GetUsersBySearchCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetUsersBySearchCompleted(this, new GetUsersBySearchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Get information about all of the iFolder users identified by the search property, operation, and pattern.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetMonitoredGroupsBySearch", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public iFolderUserSet GetMonitoredGroupsBySearch(SearchProperty property, SearchOperation operation, string pattern, int index, int max, string SecondaryAdminiD, bool GetMonitoredGroups, bool adminrequest) {
        object[] results = this.Invoke("GetMonitoredGroupsBySearch", new object[] {
                    property,
                    operation,
                    pattern,
                    index,
                    max,
                    SecondaryAdminiD,
                    GetMonitoredGroups,
                    adminrequest});
        return ((iFolderUserSet)(results[0]));
    }
    
    public System.IAsyncResult BeginGetMonitoredGroupsBySearch(SearchProperty property, SearchOperation operation, string pattern, int index, int max, string SecondaryAdminiD, bool GetMonitoredGroups, bool adminrequest, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetMonitoredGroupsBySearch", new object[] {
                    property,
                    operation,
                    pattern,
                    index,
                    max,
                    SecondaryAdminiD,
                    GetMonitoredGroups,
                    adminrequest}, callback, asyncState);
    }
    
    public iFolderUserSet EndGetMonitoredGroupsBySearch(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((iFolderUserSet)(results[0]));
    }
    
    public void GetMonitoredGroupsBySearchAsync(SearchProperty property, SearchOperation operation, string pattern, int index, int max, string SecondaryAdminiD, bool GetMonitoredGroups, bool adminrequest) {
        this.GetMonitoredGroupsBySearchAsync(property, operation, pattern, index, max, SecondaryAdminiD, GetMonitoredGroups, adminrequest, null);
    }
    
    public void GetMonitoredGroupsBySearchAsync(SearchProperty property, SearchOperation operation, string pattern, int index, int max, string SecondaryAdminiD, bool GetMonitoredGroups, bool adminrequest, object userState) {
        if ((this.GetMonitoredGroupsBySearchOperationCompleted == null)) {
            this.GetMonitoredGroupsBySearchOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMonitoredGroupsBySearchCompleted);
        }
        this.InvokeAsync("GetMonitoredGroupsBySearch", new object[] {
                    property,
                    operation,
                    pattern,
                    index,
                    max,
                    SecondaryAdminiD,
                    GetMonitoredGroups,
                    adminrequest}, this.GetMonitoredGroupsBySearchOperationCompleted, userState);
    }
    
    private void OnGetMonitoredGroupsBySearchCompleted(object arg) {
        if ((this.GetMonitoredGroupsBySearchCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetMonitoredGroupsBySearchCompleted(this, new GetMonitoredGroupsBySearchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Get information about all of the iFolder users with DATA move property set.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetReprovisionUsers", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public iFolderUserSet GetReprovisionUsers(int index, int max) {
        object[] results = this.Invoke("GetReprovisionUsers", new object[] {
                    index,
                    max});
        return ((iFolderUserSet)(results[0]));
    }
    
    public System.IAsyncResult BeginGetReprovisionUsers(int index, int max, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetReprovisionUsers", new object[] {
                    index,
                    max}, callback, asyncState);
    }
    
    public iFolderUserSet EndGetReprovisionUsers(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((iFolderUserSet)(results[0]));
    }
    
    public void GetReprovisionUsersAsync(int index, int max) {
        this.GetReprovisionUsersAsync(index, max, null);
    }
    
    public void GetReprovisionUsersAsync(int index, int max, object userState) {
        if ((this.GetReprovisionUsersOperationCompleted == null)) {
            this.GetReprovisionUsersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetReprovisionUsersCompleted);
        }
        this.InvokeAsync("GetReprovisionUsers", new object[] {
                    index,
                    max}, this.GetReprovisionUsersOperationCompleted, userState);
    }
    
    private void OnGetReprovisionUsersCompleted(object arg) {
        if ((this.GetReprovisionUsersCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetReprovisionUsersCompleted(this, new GetReprovisionUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Create a new iFolder.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/CreateiFolder", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public iFolder CreateiFolder(string name, string userID, string description) {
        object[] results = this.Invoke("CreateiFolder", new object[] {
                    name,
                    userID,
                    description});
        return ((iFolder)(results[0]));
    }
    
    public System.IAsyncResult BeginCreateiFolder(string name, string userID, string description, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CreateiFolder", new object[] {
                    name,
                    userID,
                    description}, callback, asyncState);
    }
    
    public iFolder EndCreateiFolder(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((iFolder)(results[0]));
    }
    
    public void CreateiFolderAsync(string name, string userID, string description) {
        this.CreateiFolderAsync(name, userID, description, null);
    }
    
    public void CreateiFolderAsync(string name, string userID, string description, object userState) {
        if ((this.CreateiFolderOperationCompleted == null)) {
            this.CreateiFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateiFolderCompleted);
        }
        this.InvokeAsync("CreateiFolder", new object[] {
                    name,
                    userID,
                    description}, this.CreateiFolderOperationCompleted, userState);
    }
    
    private void OnCreateiFolderCompleted(object arg) {
        if ((this.CreateiFolderCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.CreateiFolderCompleted(this, new CreateiFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Create a new iFolder.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/CreateiFolderWithID", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public iFolder CreateiFolderWithID(string name, string userID, string description, string iFolderID) {
        object[] results = this.Invoke("CreateiFolderWithID", new object[] {
                    name,
                    userID,
                    description,
                    iFolderID});
        return ((iFolder)(results[0]));
    }
    
    public System.IAsyncResult BeginCreateiFolderWithID(string name, string userID, string description, string iFolderID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CreateiFolderWithID", new object[] {
                    name,
                    userID,
                    description,
                    iFolderID}, callback, asyncState);
    }
    
    public iFolder EndCreateiFolderWithID(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((iFolder)(results[0]));
    }
    
    public void CreateiFolderWithIDAsync(string name, string userID, string description, string iFolderID) {
        this.CreateiFolderWithIDAsync(name, userID, description, iFolderID, null);
    }
    
    public void CreateiFolderWithIDAsync(string name, string userID, string description, string iFolderID, object userState) {
        if ((this.CreateiFolderWithIDOperationCompleted == null)) {
            this.CreateiFolderWithIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateiFolderWithIDCompleted);
        }
        this.InvokeAsync("CreateiFolderWithID", new object[] {
                    name,
                    userID,
                    description,
                    iFolderID}, this.CreateiFolderWithIDOperationCompleted, userState);
    }
    
    private void OnCreateiFolderWithIDCompleted(object arg) {
        if ((this.CreateiFolderWithIDCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.CreateiFolderWithIDCompleted(this, new CreateiFolderWithIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Create a new encrypted iFolder.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/CreateEncryptediFolderWithID", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public iFolder CreateEncryptediFolderWithID(string name, string userID, string description, string iFolderID, string eKey, string eBlob, string eAlgorithm, string rKey) {
        object[] results = this.Invoke("CreateEncryptediFolderWithID", new object[] {
                    name,
                    userID,
                    description,
                    iFolderID,
                    eKey,
                    eBlob,
                    eAlgorithm,
                    rKey});
        return ((iFolder)(results[0]));
    }
    
    public System.IAsyncResult BeginCreateEncryptediFolderWithID(string name, string userID, string description, string iFolderID, string eKey, string eBlob, string eAlgorithm, string rKey, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CreateEncryptediFolderWithID", new object[] {
                    name,
                    userID,
                    description,
                    iFolderID,
                    eKey,
                    eBlob,
                    eAlgorithm,
                    rKey}, callback, asyncState);
    }
    
    public iFolder EndCreateEncryptediFolderWithID(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((iFolder)(results[0]));
    }
    
    public void CreateEncryptediFolderWithIDAsync(string name, string userID, string description, string iFolderID, string eKey, string eBlob, string eAlgorithm, string rKey) {
        this.CreateEncryptediFolderWithIDAsync(name, userID, description, iFolderID, eKey, eBlob, eAlgorithm, rKey, null);
    }
    
    public void CreateEncryptediFolderWithIDAsync(string name, string userID, string description, string iFolderID, string eKey, string eBlob, string eAlgorithm, string rKey, object userState) {
        if ((this.CreateEncryptediFolderWithIDOperationCompleted == null)) {
            this.CreateEncryptediFolderWithIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateEncryptediFolderWithIDCompleted);
        }
        this.InvokeAsync("CreateEncryptediFolderWithID", new object[] {
                    name,
                    userID,
                    description,
                    iFolderID,
                    eKey,
                    eBlob,
                    eAlgorithm,
                    rKey}, this.CreateEncryptediFolderWithIDOperationCompleted, userState);
    }
    
    private void OnCreateEncryptediFolderWithIDCompleted(object arg) {
        if ((this.CreateEncryptediFolderWithIDCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.CreateEncryptediFolderWithIDCompleted(this, new CreateEncryptediFolderWithIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Get iFolders
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetiFolders", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public iFolderSet GetiFolders(iFolderType type, int index, int max) {
        object[] results = this.Invoke("GetiFolders", new object[] {
                    type,
                    index,
                    max});
        return ((iFolderSet)(results[0]));
    }
    
    public System.IAsyncResult BeginGetiFolders(iFolderType type, int index, int max, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetiFolders", new object[] {
                    type,
                    index,
                    max}, callback, asyncState);
    }
    
    public iFolderSet EndGetiFolders(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((iFolderSet)(results[0]));
    }
    
    public void GetiFoldersAsync(iFolderType type, int index, int max) {
        this.GetiFoldersAsync(type, index, max, null);
    }
    
    public void GetiFoldersAsync(iFolderType type, int index, int max, object userState) {
        if ((this.GetiFoldersOperationCompleted == null)) {
            this.GetiFoldersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetiFoldersCompleted);
        }
        this.InvokeAsync("GetiFolders", new object[] {
                    type,
                    index,
                    max}, this.GetiFoldersOperationCompleted, userState);
    }
    
    private void OnGetiFoldersCompleted(object arg) {
        if ((this.GetiFoldersCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetiFoldersCompleted(this, new GetiFoldersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Get information about all iFolders identified by a member.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetiFoldersByMember", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public iFolderSet GetiFoldersByMember(string userID, MemberRole role, int index, int max) {
        object[] results = this.Invoke("GetiFoldersByMember", new object[] {
                    userID,
                    role,
                    index,
                    max});
        return ((iFolderSet)(results[0]));
    }
    
    public System.IAsyncResult BeginGetiFoldersByMember(string userID, MemberRole role, int index, int max, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetiFoldersByMember", new object[] {
                    userID,
                    role,
                    index,
                    max}, callback, asyncState);
    }
    
    public iFolderSet EndGetiFoldersByMember(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((iFolderSet)(results[0]));
    }
    
    public void GetiFoldersByMemberAsync(string userID, MemberRole role, int index, int max) {
        this.GetiFoldersByMemberAsync(userID, role, index, max, null);
    }
    
    public void GetiFoldersByMemberAsync(string userID, MemberRole role, int index, int max, object userState) {
        if ((this.GetiFoldersByMemberOperationCompleted == null)) {
            this.GetiFoldersByMemberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetiFoldersByMemberCompleted);
        }
        this.InvokeAsync("GetiFoldersByMember", new object[] {
                    userID,
                    role,
                    index,
                    max}, this.GetiFoldersByMemberOperationCompleted, userState);
    }
    
    private void OnGetiFoldersByMemberCompleted(object arg) {
        if ((this.GetiFoldersByMemberCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetiFoldersByMemberCompleted(this, new GetiFoldersByMemberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Get information about all iFolders identified by a search on the it's name.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetiFoldersByName", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public iFolderSet GetiFoldersByName(SearchOperation operation, string pattern, int index, int count) {
        object[] results = this.Invoke("GetiFoldersByName", new object[] {
                    operation,
                    pattern,
                    index,
                    count});
        return ((iFolderSet)(results[0]));
    }
    
    public System.IAsyncResult BeginGetiFoldersByName(SearchOperation operation, string pattern, int index, int count, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetiFoldersByName", new object[] {
                    operation,
                    pattern,
                    index,
                    count}, callback, asyncState);
    }
    
    public iFolderSet EndGetiFoldersByName(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((iFolderSet)(results[0]));
    }
    
    public void GetiFoldersByNameAsync(SearchOperation operation, string pattern, int index, int count) {
        this.GetiFoldersByNameAsync(operation, pattern, index, count, null);
    }
    
    public void GetiFoldersByNameAsync(SearchOperation operation, string pattern, int index, int count, object userState) {
        if ((this.GetiFoldersByNameOperationCompleted == null)) {
            this.GetiFoldersByNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetiFoldersByNameCompleted);
        }
        this.InvokeAsync("GetiFoldersByName", new object[] {
                    operation,
                    pattern,
                    index,
                    count}, this.GetiFoldersByNameOperationCompleted, userState);
    }
    
    private void OnGetiFoldersByNameCompleted(object arg) {
        if ((this.GetiFoldersByNameCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetiFoldersByNameCompleted(this, new GetiFoldersByNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Get a setting global to the system.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetSystemSetting", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public string GetSystemSetting(string name) {
        object[] results = this.Invoke("GetSystemSetting", new object[] {
                    name});
        return ((string)(results[0]));
    }
    
    public System.IAsyncResult BeginGetSystemSetting(string name, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetSystemSetting", new object[] {
                    name}, callback, asyncState);
    }
    
    public string EndGetSystemSetting(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    public void GetSystemSettingAsync(string name) {
        this.GetSystemSettingAsync(name, null);
    }
    
    public void GetSystemSettingAsync(string name, object userState) {
        if ((this.GetSystemSettingOperationCompleted == null)) {
            this.GetSystemSettingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSystemSettingCompleted);
        }
        this.InvokeAsync("GetSystemSetting", new object[] {
                    name}, this.GetSystemSettingOperationCompleted, userState);
    }
    
    private void OnGetSystemSettingCompleted(object arg) {
        if ((this.GetSystemSettingCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetSystemSettingCompleted(this, new GetSystemSettingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Set a setting global to the system.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/SetSystemSetting", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void SetSystemSetting(string name, string value) {
        this.Invoke("SetSystemSetting", new object[] {
                    name,
                    value});
    }
    
    public System.IAsyncResult BeginSetSystemSetting(string name, string value, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetSystemSetting", new object[] {
                    name,
                    value}, callback, asyncState);
    }
    
    public void EndSetSystemSetting(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    public void SetSystemSettingAsync(string name, string value) {
        this.SetSystemSettingAsync(name, value, null);
    }
    
    public void SetSystemSettingAsync(string name, string value, object userState) {
        if ((this.SetSystemSettingOperationCompleted == null)) {
            this.SetSystemSettingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetSystemSettingCompleted);
        }
        this.InvokeAsync("SetSystemSetting", new object[] {
                    name,
                    value}, this.SetSystemSettingOperationCompleted, userState);
    }
    
    private void OnSetSystemSettingCompleted(object arg) {
        if ((this.SetSystemSettingCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SetSystemSettingCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Get a setting specific to a user.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetUserSetting", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public string GetUserSetting(string userID, string name) {
        object[] results = this.Invoke("GetUserSetting", new object[] {
                    userID,
                    name});
        return ((string)(results[0]));
    }
    
    public System.IAsyncResult BeginGetUserSetting(string userID, string name, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetUserSetting", new object[] {
                    userID,
                    name}, callback, asyncState);
    }
    
    public string EndGetUserSetting(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    public void GetUserSettingAsync(string userID, string name) {
        this.GetUserSettingAsync(userID, name, null);
    }
    
    public void GetUserSettingAsync(string userID, string name, object userState) {
        if ((this.GetUserSettingOperationCompleted == null)) {
            this.GetUserSettingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserSettingCompleted);
        }
        this.InvokeAsync("GetUserSetting", new object[] {
                    userID,
                    name}, this.GetUserSettingOperationCompleted, userState);
    }
    
    private void OnGetUserSettingCompleted(object arg) {
        if ((this.GetUserSettingCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetUserSettingCompleted(this, new GetUserSettingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Set a setting specific to a user.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/SetUserSetting", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void SetUserSetting(string userID, string name, string value) {
        this.Invoke("SetUserSetting", new object[] {
                    userID,
                    name,
                    value});
    }
    
    public System.IAsyncResult BeginSetUserSetting(string userID, string name, string value, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetUserSetting", new object[] {
                    userID,
                    name,
                    value}, callback, asyncState);
    }
    
    public void EndSetUserSetting(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    public void SetUserSettingAsync(string userID, string name, string value) {
        this.SetUserSettingAsync(userID, name, value, null);
    }
    
    public void SetUserSettingAsync(string userID, string name, string value, object userState) {
        if ((this.SetUserSettingOperationCompleted == null)) {
            this.SetUserSettingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetUserSettingCompleted);
        }
        this.InvokeAsync("SetUserSetting", new object[] {
                    userID,
                    name,
                    value}, this.SetUserSettingOperationCompleted, userState);
    }
    
    private void OnSetUserSettingCompleted(object arg) {
        if ((this.SetUserSettingCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SetUserSettingCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Get a setting specific to an iFolder.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetiFolderSetting", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public string GetiFolderSetting(string ifolderID, string name) {
        object[] results = this.Invoke("GetiFolderSetting", new object[] {
                    ifolderID,
                    name});
        return ((string)(results[0]));
    }
    
    public System.IAsyncResult BeginGetiFolderSetting(string ifolderID, string name, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetiFolderSetting", new object[] {
                    ifolderID,
                    name}, callback, asyncState);
    }
    
    public string EndGetiFolderSetting(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    public void GetiFolderSettingAsync(string ifolderID, string name) {
        this.GetiFolderSettingAsync(ifolderID, name, null);
    }
    
    public void GetiFolderSettingAsync(string ifolderID, string name, object userState) {
        if ((this.GetiFolderSettingOperationCompleted == null)) {
            this.GetiFolderSettingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetiFolderSettingCompleted);
        }
        this.InvokeAsync("GetiFolderSetting", new object[] {
                    ifolderID,
                    name}, this.GetiFolderSettingOperationCompleted, userState);
    }
    
    private void OnGetiFolderSettingCompleted(object arg) {
        if ((this.GetiFolderSettingCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetiFolderSettingCompleted(this, new GetiFolderSettingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Set a setting specific to an iFolder.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/SetiFolderSetting", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void SetiFolderSetting(string ifolderID, string name, string value) {
        this.Invoke("SetiFolderSetting", new object[] {
                    ifolderID,
                    name,
                    value});
    }
    
    public System.IAsyncResult BeginSetiFolderSetting(string ifolderID, string name, string value, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetiFolderSetting", new object[] {
                    ifolderID,
                    name,
                    value}, callback, asyncState);
    }
    
    public void EndSetiFolderSetting(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    public void SetiFolderSettingAsync(string ifolderID, string name, string value) {
        this.SetiFolderSettingAsync(ifolderID, name, value, null);
    }
    
    public void SetiFolderSettingAsync(string ifolderID, string name, string value, object userState) {
        if ((this.SetiFolderSettingOperationCompleted == null)) {
            this.SetiFolderSettingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetiFolderSettingCompleted);
        }
        this.InvokeAsync("SetiFolderSetting", new object[] {
                    ifolderID,
                    name,
                    value}, this.SetiFolderSettingOperationCompleted, userState);
    }
    
    private void OnSetiFolderSettingCompleted(object arg) {
        if ((this.SetiFolderSettingCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SetiFolderSettingCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Create a new user in the iFolder system.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/CreateUser", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public iFolderUser CreateUser(string username, string password, string guid, string firstName, string lastName, string fullName, string dn, string email) {
        object[] results = this.Invoke("CreateUser", new object[] {
                    username,
                    password,
                    guid,
                    firstName,
                    lastName,
                    fullName,
                    dn,
                    email});
        return ((iFolderUser)(results[0]));
    }
    
    public System.IAsyncResult BeginCreateUser(string username, string password, string guid, string firstName, string lastName, string fullName, string dn, string email, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CreateUser", new object[] {
                    username,
                    password,
                    guid,
                    firstName,
                    lastName,
                    fullName,
                    dn,
                    email}, callback, asyncState);
    }
    
    public iFolderUser EndCreateUser(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((iFolderUser)(results[0]));
    }
    
    public void CreateUserAsync(string username, string password, string guid, string firstName, string lastName, string fullName, string dn, string email) {
        this.CreateUserAsync(username, password, guid, firstName, lastName, fullName, dn, email, null);
    }
    
    public void CreateUserAsync(string username, string password, string guid, string firstName, string lastName, string fullName, string dn, string email, object userState) {
        if ((this.CreateUserOperationCompleted == null)) {
            this.CreateUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateUserCompleted);
        }
        this.InvokeAsync("CreateUser", new object[] {
                    username,
                    password,
                    guid,
                    firstName,
                    lastName,
                    fullName,
                    dn,
                    email}, this.CreateUserOperationCompleted, userState);
    }
    
    private void OnCreateUserCompleted(object arg) {
        if ((this.CreateUserCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.CreateUserCompleted(this, new CreateUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Delete a user from the iFolder system.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/DeleteUser", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public bool DeleteUser(string userID) {
        object[] results = this.Invoke("DeleteUser", new object[] {
                    userID});
        return ((bool)(results[0]));
    }
    
    public System.IAsyncResult BeginDeleteUser(string userID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("DeleteUser", new object[] {
                    userID}, callback, asyncState);
    }
    
    public bool EndDeleteUser(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    public void DeleteUserAsync(string userID) {
        this.DeleteUserAsync(userID, null);
    }
    
    public void DeleteUserAsync(string userID, object userState) {
        if ((this.DeleteUserOperationCompleted == null)) {
            this.DeleteUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteUserCompleted);
        }
        this.InvokeAsync("DeleteUser", new object[] {
                    userID}, this.DeleteUserOperationCompleted, userState);
    }
    
    private void OnDeleteUserCompleted(object arg) {
        if ((this.DeleteUserCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.DeleteUserCompleted(this, new DeleteUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Update a user in the iFolder system (FullName, FirstName, LastName, Email).
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/SetUser", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public iFolderUser SetUser(string userID, iFolderUser user) {
        object[] results = this.Invoke("SetUser", new object[] {
                    userID,
                    user});
        return ((iFolderUser)(results[0]));
    }
    
    public System.IAsyncResult BeginSetUser(string userID, iFolderUser user, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetUser", new object[] {
                    userID,
                    user}, callback, asyncState);
    }
    
    public iFolderUser EndSetUser(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((iFolderUser)(results[0]));
    }
    
    public void SetUserAsync(string userID, iFolderUser user) {
        this.SetUserAsync(userID, user, null);
    }
    
    public void SetUserAsync(string userID, iFolderUser user, object userState) {
        if ((this.SetUserOperationCompleted == null)) {
            this.SetUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetUserCompleted);
        }
        this.InvokeAsync("SetUser", new object[] {
                    userID,
                    user}, this.SetUserOperationCompleted, userState);
    }
    
    private void OnSetUserCompleted(object arg) {
        if ((this.SetUserCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SetUserCompleted(this, new SetUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Set a user's password.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/SetPassword", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public bool SetPassword(string userID, string password) {
        object[] results = this.Invoke("SetPassword", new object[] {
                    userID,
                    password});
        return ((bool)(results[0]));
    }
    
    public System.IAsyncResult BeginSetPassword(string userID, string password, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetPassword", new object[] {
                    userID,
                    password}, callback, asyncState);
    }
    
    public bool EndSetPassword(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    public void SetPasswordAsync(string userID, string password) {
        this.SetPasswordAsync(userID, password, null);
    }
    
    public void SetPasswordAsync(string userID, string password, object userState) {
        if ((this.SetPasswordOperationCompleted == null)) {
            this.SetPasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetPasswordCompleted);
        }
        this.InvokeAsync("SetPassword", new object[] {
                    userID,
                    password}, this.SetPasswordOperationCompleted, userState);
    }
    
    private void OnSetPasswordCompleted(object arg) {
        if ((this.SetPasswordCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SetPasswordCompleted(this, new SetPasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Update the editable information for the iFolder system (Name, Description).
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/SetSystem", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void SetSystem(iFolderSystem system) {
        this.Invoke("SetSystem", new object[] {
                    system});
    }
    
    public System.IAsyncResult BeginSetSystem(iFolderSystem system, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetSystem", new object[] {
                    system}, callback, asyncState);
    }
    
    public void EndSetSystem(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    public void SetSystemAsync(iFolderSystem system) {
        this.SetSystemAsync(system, null);
    }
    
    public void SetSystemAsync(iFolderSystem system, object userState) {
        if ((this.SetSystemOperationCompleted == null)) {
            this.SetSystemOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetSystemCompleted);
        }
        this.InvokeAsync("SetSystem", new object[] {
                    system}, this.SetSystemOperationCompleted, userState);
    }
    
    private void OnSetSystemCompleted(object arg) {
        if ((this.SetSystemCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SetSystemCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Update the ssl information for the iFolder system .
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/SetSimiasSSLStatus", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public bool SetSimiasSSLStatus(string SimiasSSLStatus) {
        object[] results = this.Invoke("SetSimiasSSLStatus", new object[] {
                    SimiasSSLStatus});
        return ((bool)(results[0]));
    }
    
    public System.IAsyncResult BeginSetSimiasSSLStatus(string SimiasSSLStatus, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetSimiasSSLStatus", new object[] {
                    SimiasSSLStatus}, callback, asyncState);
    }
    
    public bool EndSetSimiasSSLStatus(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    public void SetSimiasSSLStatusAsync(string SimiasSSLStatus) {
        this.SetSimiasSSLStatusAsync(SimiasSSLStatus, null);
    }
    
    public void SetSimiasSSLStatusAsync(string SimiasSSLStatus, object userState) {
        if ((this.SetSimiasSSLStatusOperationCompleted == null)) {
            this.SetSimiasSSLStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetSimiasSSLStatusCompleted);
        }
        this.InvokeAsync("SetSimiasSSLStatus", new object[] {
                    SimiasSSLStatus}, this.SetSimiasSSLStatusOperationCompleted, userState);
    }
    
    private void OnSetSimiasSSLStatusCompleted(object arg) {
        if ((this.SetSimiasSSLStatusCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SetSimiasSSLStatusCompleted(this, new SetSimiasSSLStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Grant a user system administration rights.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/AddAdministrator", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void AddAdministrator(string userID) {
        this.Invoke("AddAdministrator", new object[] {
                    userID});
    }
    
    public System.IAsyncResult BeginAddAdministrator(string userID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("AddAdministrator", new object[] {
                    userID}, callback, asyncState);
    }
    
    public void EndAddAdministrator(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    public void AddAdministratorAsync(string userID) {
        this.AddAdministratorAsync(userID, null);
    }
    
    public void AddAdministratorAsync(string userID, object userState) {
        if ((this.AddAdministratorOperationCompleted == null)) {
            this.AddAdministratorOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddAdministratorCompleted);
        }
        this.InvokeAsync("AddAdministrator", new object[] {
                    userID}, this.AddAdministratorOperationCompleted, userState);
    }
    
    private void OnAddAdministratorCompleted(object arg) {
        if ((this.AddAdministratorCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.AddAdministratorCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Grant a user system administration rights.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/AddGroupAdministrator", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void AddGroupAdministrator(string groupid, string userID, int preference) {
        this.Invoke("AddGroupAdministrator", new object[] {
                    groupid,
                    userID,
                    preference});
    }
    
    public System.IAsyncResult BeginAddGroupAdministrator(string groupid, string userID, int preference, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("AddGroupAdministrator", new object[] {
                    groupid,
                    userID,
                    preference}, callback, asyncState);
    }
    
    public void EndAddGroupAdministrator(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    public void AddGroupAdministratorAsync(string groupid, string userID, int preference) {
        this.AddGroupAdministratorAsync(groupid, userID, preference, null);
    }
    
    public void AddGroupAdministratorAsync(string groupid, string userID, int preference, object userState) {
        if ((this.AddGroupAdministratorOperationCompleted == null)) {
            this.AddGroupAdministratorOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddGroupAdministratorCompleted);
        }
        this.InvokeAsync("AddGroupAdministrator", new object[] {
                    groupid,
                    userID,
                    preference}, this.AddGroupAdministratorOperationCompleted, userState);
    }
    
    private void OnAddGroupAdministratorCompleted(object arg) {
        if ((this.AddGroupAdministratorCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.AddGroupAdministratorCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Grant a user system administration rights.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/RemoveGroupAdministrator", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void RemoveGroupAdministrator(string groupid, string userID) {
        this.Invoke("RemoveGroupAdministrator", new object[] {
                    groupid,
                    userID});
    }
    
    public System.IAsyncResult BeginRemoveGroupAdministrator(string groupid, string userID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("RemoveGroupAdministrator", new object[] {
                    groupid,
                    userID}, callback, asyncState);
    }
    
    public void EndRemoveGroupAdministrator(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    public void RemoveGroupAdministratorAsync(string groupid, string userID) {
        this.RemoveGroupAdministratorAsync(groupid, userID, null);
    }
    
    public void RemoveGroupAdministratorAsync(string groupid, string userID, object userState) {
        if ((this.RemoveGroupAdministratorOperationCompleted == null)) {
            this.RemoveGroupAdministratorOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveGroupAdministratorCompleted);
        }
        this.InvokeAsync("RemoveGroupAdministrator", new object[] {
                    groupid,
                    userID}, this.RemoveGroupAdministratorOperationCompleted, userState);
    }
    
    private void OnRemoveGroupAdministratorCompleted(object arg) {
        if ((this.RemoveGroupAdministratorCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.RemoveGroupAdministratorCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Grant a user system administration rights.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/DiskQuotaPolicyChangeAllowed", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public bool DiskQuotaPolicyChangeAllowed(string userID, long limit) {
        object[] results = this.Invoke("DiskQuotaPolicyChangeAllowed", new object[] {
                    userID,
                    limit});
        return ((bool)(results[0]));
    }
    
    public System.IAsyncResult BeginDiskQuotaPolicyChangeAllowed(string userID, long limit, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("DiskQuotaPolicyChangeAllowed", new object[] {
                    userID,
                    limit}, callback, asyncState);
    }
    
    public bool EndDiskQuotaPolicyChangeAllowed(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    public void DiskQuotaPolicyChangeAllowedAsync(string userID, long limit) {
        this.DiskQuotaPolicyChangeAllowedAsync(userID, limit, null);
    }
    
    public void DiskQuotaPolicyChangeAllowedAsync(string userID, long limit, object userState) {
        if ((this.DiskQuotaPolicyChangeAllowedOperationCompleted == null)) {
            this.DiskQuotaPolicyChangeAllowedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDiskQuotaPolicyChangeAllowedCompleted);
        }
        this.InvokeAsync("DiskQuotaPolicyChangeAllowed", new object[] {
                    userID,
                    limit}, this.DiskQuotaPolicyChangeAllowedOperationCompleted, userState);
    }
    
    private void OnDiskQuotaPolicyChangeAllowedCompleted(object arg) {
        if ((this.DiskQuotaPolicyChangeAllowedCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.DiskQuotaPolicyChangeAllowedCompleted(this, new DiskQuotaPolicyChangeAllowedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Revoke system administration rights from a user.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetUserSystemRights", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public int GetUserSystemRights(string userid, string groupid) {
        object[] results = this.Invoke("GetUserSystemRights", new object[] {
                    userid,
                    groupid});
        return ((int)(results[0]));
    }
    
    public System.IAsyncResult BeginGetUserSystemRights(string userid, string groupid, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetUserSystemRights", new object[] {
                    userid,
                    groupid}, callback, asyncState);
    }
    
    public int EndGetUserSystemRights(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((int)(results[0]));
    }
    
    public void GetUserSystemRightsAsync(string userid, string groupid) {
        this.GetUserSystemRightsAsync(userid, groupid, null);
    }
    
    public void GetUserSystemRightsAsync(string userid, string groupid, object userState) {
        if ((this.GetUserSystemRightsOperationCompleted == null)) {
            this.GetUserSystemRightsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserSystemRightsCompleted);
        }
        this.InvokeAsync("GetUserSystemRights", new object[] {
                    userid,
                    groupid}, this.GetUserSystemRightsOperationCompleted, userState);
    }
    
    private void OnGetUserSystemRightsCompleted(object arg) {
        if ((this.GetUserSystemRightsCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetUserSystemRightsCompleted(this, new GetUserSystemRightsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Revoke system administration rights from a user.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetUserGroupRights", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public int GetUserGroupRights(string userid, string groupid) {
        object[] results = this.Invoke("GetUserGroupRights", new object[] {
                    userid,
                    groupid});
        return ((int)(results[0]));
    }
    
    public System.IAsyncResult BeginGetUserGroupRights(string userid, string groupid, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetUserGroupRights", new object[] {
                    userid,
                    groupid}, callback, asyncState);
    }
    
    public int EndGetUserGroupRights(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((int)(results[0]));
    }
    
    public void GetUserGroupRightsAsync(string userid, string groupid) {
        this.GetUserGroupRightsAsync(userid, groupid, null);
    }
    
    public void GetUserGroupRightsAsync(string userid, string groupid, object userState) {
        if ((this.GetUserGroupRightsOperationCompleted == null)) {
            this.GetUserGroupRightsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserGroupRightsCompleted);
        }
        this.InvokeAsync("GetUserGroupRights", new object[] {
                    userid,
                    groupid}, this.GetUserGroupRightsOperationCompleted, userState);
    }
    
    private void OnGetUserGroupRightsCompleted(object arg) {
        if ((this.GetUserGroupRightsCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetUserGroupRightsCompleted(this, new GetUserGroupRightsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Revoke system administration rights from a user.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetMonitoredGroups", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public string[] GetMonitoredGroups(string userid) {
        object[] results = this.Invoke("GetMonitoredGroups", new object[] {
                    userid});
        return ((string[])(results[0]));
    }
    
    public System.IAsyncResult BeginGetMonitoredGroups(string userid, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetMonitoredGroups", new object[] {
                    userid}, callback, asyncState);
    }
    
    public string[] EndGetMonitoredGroups(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string[])(results[0]));
    }
    
    public void GetMonitoredGroupsAsync(string userid) {
        this.GetMonitoredGroupsAsync(userid, null);
    }
    
    public void GetMonitoredGroupsAsync(string userid, object userState) {
        if ((this.GetMonitoredGroupsOperationCompleted == null)) {
            this.GetMonitoredGroupsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMonitoredGroupsCompleted);
        }
        this.InvokeAsync("GetMonitoredGroups", new object[] {
                    userid}, this.GetMonitoredGroupsOperationCompleted, userState);
    }
    
    private void OnGetMonitoredGroupsCompleted(object arg) {
        if ((this.GetMonitoredGroupsCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetMonitoredGroupsCompleted(this, new GetMonitoredGroupsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///GetMonitoredgroup names in an array
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetMonitoredGroupNames", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public string[] GetMonitoredGroupNames(string userid) {
        object[] results = this.Invoke("GetMonitoredGroupNames", new object[] {
                    userid});
        return ((string[])(results[0]));
    }
    
    public System.IAsyncResult BeginGetMonitoredGroupNames(string userid, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetMonitoredGroupNames", new object[] {
                    userid}, callback, asyncState);
    }
    
    public string[] EndGetMonitoredGroupNames(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string[])(results[0]));
    }
    
    public void GetMonitoredGroupNamesAsync(string userid) {
        this.GetMonitoredGroupNamesAsync(userid, null);
    }
    
    public void GetMonitoredGroupNamesAsync(string userid, object userState) {
        if ((this.GetMonitoredGroupNamesOperationCompleted == null)) {
            this.GetMonitoredGroupNamesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMonitoredGroupNamesCompleted);
        }
        this.InvokeAsync("GetMonitoredGroupNames", new object[] {
                    userid}, this.GetMonitoredGroupNamesOperationCompleted, userState);
    }
    
    private void OnGetMonitoredGroupNamesCompleted(object arg) {
        if ((this.GetMonitoredGroupNamesCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetMonitoredGroupNamesCompleted(this, new GetMonitoredGroupNamesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Grant a user system administration rights.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetAggregateDiskQuota", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public long GetAggregateDiskQuota(string groupid) {
        object[] results = this.Invoke("GetAggregateDiskQuota", new object[] {
                    groupid});
        return ((long)(results[0]));
    }
    
    public System.IAsyncResult BeginGetAggregateDiskQuota(string groupid, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetAggregateDiskQuota", new object[] {
                    groupid}, callback, asyncState);
    }
    
    public long EndGetAggregateDiskQuota(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((long)(results[0]));
    }
    
    public void GetAggregateDiskQuotaAsync(string groupid) {
        this.GetAggregateDiskQuotaAsync(groupid, null);
    }
    
    public void GetAggregateDiskQuotaAsync(string groupid, object userState) {
        if ((this.GetAggregateDiskQuotaOperationCompleted == null)) {
            this.GetAggregateDiskQuotaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAggregateDiskQuotaCompleted);
        }
        this.InvokeAsync("GetAggregateDiskQuota", new object[] {
                    groupid}, this.GetAggregateDiskQuotaOperationCompleted, userState);
    }
    
    private void OnGetAggregateDiskQuotaCompleted(object arg) {
        if ((this.GetAggregateDiskQuotaCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetAggregateDiskQuotaCompleted(this, new GetAggregateDiskQuotaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Grant a user system administration rights.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/SpaceUsedByGroup", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public long SpaceUsedByGroup(string groupid) {
        object[] results = this.Invoke("SpaceUsedByGroup", new object[] {
                    groupid});
        return ((long)(results[0]));
    }
    
    public System.IAsyncResult BeginSpaceUsedByGroup(string groupid, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SpaceUsedByGroup", new object[] {
                    groupid}, callback, asyncState);
    }
    
    public long EndSpaceUsedByGroup(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((long)(results[0]));
    }
    
    public void SpaceUsedByGroupAsync(string groupid) {
        this.SpaceUsedByGroupAsync(groupid, null);
    }
    
    public void SpaceUsedByGroupAsync(string groupid, object userState) {
        if ((this.SpaceUsedByGroupOperationCompleted == null)) {
            this.SpaceUsedByGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSpaceUsedByGroupCompleted);
        }
        this.InvokeAsync("SpaceUsedByGroup", new object[] {
                    groupid}, this.SpaceUsedByGroupOperationCompleted, userState);
    }
    
    private void OnSpaceUsedByGroupCompleted(object arg) {
        if ((this.SpaceUsedByGroupCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SpaceUsedByGroupCompleted(this, new SpaceUsedByGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Grant a user system administration rights.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/SetAggregateDiskQuota", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public bool SetAggregateDiskQuota(string groupid, long value) {
        object[] results = this.Invoke("SetAggregateDiskQuota", new object[] {
                    groupid,
                    value});
        return ((bool)(results[0]));
    }
    
    public System.IAsyncResult BeginSetAggregateDiskQuota(string groupid, long value, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetAggregateDiskQuota", new object[] {
                    groupid,
                    value}, callback, asyncState);
    }
    
    public bool EndSetAggregateDiskQuota(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    public void SetAggregateDiskQuotaAsync(string groupid, long value) {
        this.SetAggregateDiskQuotaAsync(groupid, value, null);
    }
    
    public void SetAggregateDiskQuotaAsync(string groupid, long value, object userState) {
        if ((this.SetAggregateDiskQuotaOperationCompleted == null)) {
            this.SetAggregateDiskQuotaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetAggregateDiskQuotaCompleted);
        }
        this.InvokeAsync("SetAggregateDiskQuota", new object[] {
                    groupid,
                    value}, this.SetAggregateDiskQuotaOperationCompleted, userState);
    }
    
    private void OnSetAggregateDiskQuotaCompleted(object arg) {
        if ((this.SetAggregateDiskQuotaCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SetAggregateDiskQuotaCompleted(this, new SetAggregateDiskQuotaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Revoke system administration rights from a user.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/RemoveAdministrator", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void RemoveAdministrator(string userID) {
        this.Invoke("RemoveAdministrator", new object[] {
                    userID});
    }
    
    public System.IAsyncResult BeginRemoveAdministrator(string userID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("RemoveAdministrator", new object[] {
                    userID}, callback, asyncState);
    }
    
    public void EndRemoveAdministrator(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    public void RemoveAdministratorAsync(string userID) {
        this.RemoveAdministratorAsync(userID, null);
    }
    
    public void RemoveAdministratorAsync(string userID, object userState) {
        if ((this.RemoveAdministratorOperationCompleted == null)) {
            this.RemoveAdministratorOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveAdministratorCompleted);
        }
        this.InvokeAsync("RemoveAdministrator", new object[] {
                    userID}, this.RemoveAdministratorOperationCompleted, userState);
    }
    
    private void OnRemoveAdministratorCompleted(object arg) {
        if ((this.RemoveAdministratorCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.RemoveAdministratorCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Get information about all the administrators.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetAdministrators", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public iFolderUserSet GetAdministrators(int index, int max, int admintype) {
        object[] results = this.Invoke("GetAdministrators", new object[] {
                    index,
                    max,
                    admintype});
        return ((iFolderUserSet)(results[0]));
    }
    
    public System.IAsyncResult BeginGetAdministrators(int index, int max, int admintype, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetAdministrators", new object[] {
                    index,
                    max,
                    admintype}, callback, asyncState);
    }
    
    public iFolderUserSet EndGetAdministrators(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((iFolderUserSet)(results[0]));
    }
    
    public void GetAdministratorsAsync(int index, int max, int admintype) {
        this.GetAdministratorsAsync(index, max, admintype, null);
    }
    
    public void GetAdministratorsAsync(int index, int max, int admintype, object userState) {
        if ((this.GetAdministratorsOperationCompleted == null)) {
            this.GetAdministratorsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAdministratorsCompleted);
        }
        this.InvokeAsync("GetAdministrators", new object[] {
                    index,
                    max,
                    admintype}, this.GetAdministratorsOperationCompleted, userState);
    }
    
    private void OnGetAdministratorsCompleted(object arg) {
        if ((this.GetAdministratorsCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetAdministratorsCompleted(this, new GetAdministratorsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Get policy information for the system.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetSystemPolicy", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public SystemPolicy GetSystemPolicy() {
        object[] results = this.Invoke("GetSystemPolicy", new object[0]);
        return ((SystemPolicy)(results[0]));
    }
    
    public System.IAsyncResult BeginGetSystemPolicy(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetSystemPolicy", new object[0], callback, asyncState);
    }
    
    public SystemPolicy EndGetSystemPolicy(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((SystemPolicy)(results[0]));
    }
    
    public void GetSystemPolicyAsync() {
        this.GetSystemPolicyAsync(null);
    }
    
    public void GetSystemPolicyAsync(object userState) {
        if ((this.GetSystemPolicyOperationCompleted == null)) {
            this.GetSystemPolicyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSystemPolicyCompleted);
        }
        this.InvokeAsync("GetSystemPolicy", new object[0], this.GetSystemPolicyOperationCompleted, userState);
    }
    
    private void OnGetSystemPolicyCompleted(object arg) {
        if ((this.GetSystemPolicyCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetSystemPolicyCompleted(this, new GetSystemPolicyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Get policy information for User groups sharing policy value.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetGroupSharingPolicy", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public int GetGroupSharingPolicy(string userID) {
        object[] results = this.Invoke("GetGroupSharingPolicy", new object[] {
                    userID});
        return ((int)(results[0]));
    }
    
    public System.IAsyncResult BeginGetGroupSharingPolicy(string userID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetGroupSharingPolicy", new object[] {
                    userID}, callback, asyncState);
    }
    
    public int EndGetGroupSharingPolicy(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((int)(results[0]));
    }
    
    public void GetGroupSharingPolicyAsync(string userID) {
        this.GetGroupSharingPolicyAsync(userID, null);
    }
    
    public void GetGroupSharingPolicyAsync(string userID, object userState) {
        if ((this.GetGroupSharingPolicyOperationCompleted == null)) {
            this.GetGroupSharingPolicyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetGroupSharingPolicyCompleted);
        }
        this.InvokeAsync("GetGroupSharingPolicy", new object[] {
                    userID}, this.GetGroupSharingPolicyOperationCompleted, userState);
    }
    
    private void OnGetGroupSharingPolicyCompleted(object arg) {
        if ((this.GetGroupSharingPolicyCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetGroupSharingPolicyCompleted(this, new GetGroupSharingPolicyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Get policy information for User groups Encryption policy value.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetGroupEncryptionPolicy", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public int GetGroupEncryptionPolicy(string userID) {
        object[] results = this.Invoke("GetGroupEncryptionPolicy", new object[] {
                    userID});
        return ((int)(results[0]));
    }
    
    public System.IAsyncResult BeginGetGroupEncryptionPolicy(string userID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetGroupEncryptionPolicy", new object[] {
                    userID}, callback, asyncState);
    }
    
    public int EndGetGroupEncryptionPolicy(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((int)(results[0]));
    }
    
    public void GetGroupEncryptionPolicyAsync(string userID) {
        this.GetGroupEncryptionPolicyAsync(userID, null);
    }
    
    public void GetGroupEncryptionPolicyAsync(string userID, object userState) {
        if ((this.GetGroupEncryptionPolicyOperationCompleted == null)) {
            this.GetGroupEncryptionPolicyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetGroupEncryptionPolicyCompleted);
        }
        this.InvokeAsync("GetGroupEncryptionPolicy", new object[] {
                    userID}, this.GetGroupEncryptionPolicyOperationCompleted, userState);
    }
    
    private void OnGetGroupEncryptionPolicyCompleted(object arg) {
        if ((this.GetGroupEncryptionPolicyCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetGroupEncryptionPolicyCompleted(this, new GetGroupEncryptionPolicyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Set policy for the iFolder system.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/SetSystemPolicy", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void SetSystemPolicy(SystemPolicy policy) {
        this.Invoke("SetSystemPolicy", new object[] {
                    policy});
    }
    
    public System.IAsyncResult BeginSetSystemPolicy(SystemPolicy policy, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetSystemPolicy", new object[] {
                    policy}, callback, asyncState);
    }
    
    public void EndSetSystemPolicy(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    public void SetSystemPolicyAsync(SystemPolicy policy) {
        this.SetSystemPolicyAsync(policy, null);
    }
    
    public void SetSystemPolicyAsync(SystemPolicy policy, object userState) {
        if ((this.SetSystemPolicyOperationCompleted == null)) {
            this.SetSystemPolicyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetSystemPolicyCompleted);
        }
        this.InvokeAsync("SetSystemPolicy", new object[] {
                    policy}, this.SetSystemPolicyOperationCompleted, userState);
    }
    
    private void OnSetSystemPolicyCompleted(object arg) {
        if ((this.SetSystemPolicyCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SetSystemPolicyCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Get policy information for a user.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetUserPolicy", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public UserPolicy GetUserPolicy(string userID, string AdminId) {
        object[] results = this.Invoke("GetUserPolicy", new object[] {
                    userID,
                    AdminId});
        return ((UserPolicy)(results[0]));
    }
    
    public System.IAsyncResult BeginGetUserPolicy(string userID, string AdminId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetUserPolicy", new object[] {
                    userID,
                    AdminId}, callback, asyncState);
    }
    
    public UserPolicy EndGetUserPolicy(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((UserPolicy)(results[0]));
    }
    
    public void GetUserPolicyAsync(string userID, string AdminId) {
        this.GetUserPolicyAsync(userID, AdminId, null);
    }
    
    public void GetUserPolicyAsync(string userID, string AdminId, object userState) {
        if ((this.GetUserPolicyOperationCompleted == null)) {
            this.GetUserPolicyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserPolicyCompleted);
        }
        this.InvokeAsync("GetUserPolicy", new object[] {
                    userID,
                    AdminId}, this.GetUserPolicyOperationCompleted, userState);
    }
    
    private void OnGetUserPolicyCompleted(object arg) {
        if ((this.GetUserPolicyCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetUserPolicyCompleted(this, new GetUserPolicyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Set the policy for a user.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/SetUserPolicy", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void SetUserPolicy(UserPolicy policy) {
        this.Invoke("SetUserPolicy", new object[] {
                    policy});
    }
    
    public System.IAsyncResult BeginSetUserPolicy(UserPolicy policy, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetUserPolicy", new object[] {
                    policy}, callback, asyncState);
    }
    
    public void EndSetUserPolicy(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    public void SetUserPolicyAsync(UserPolicy policy) {
        this.SetUserPolicyAsync(policy, null);
    }
    
    public void SetUserPolicyAsync(UserPolicy policy, object userState) {
        if ((this.SetUserPolicyOperationCompleted == null)) {
            this.SetUserPolicyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetUserPolicyCompleted);
        }
        this.InvokeAsync("SetUserPolicy", new object[] {
                    policy}, this.SetUserPolicyOperationCompleted, userState);
    }
    
    private void OnSetUserPolicyCompleted(object arg) {
        if ((this.SetUserPolicyCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SetUserPolicyCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Get policy information for an iFolder.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetiFolderPolicy", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public iFolderPolicy GetiFolderPolicy(string ifolderID, string adminID) {
        object[] results = this.Invoke("GetiFolderPolicy", new object[] {
                    ifolderID,
                    adminID});
        return ((iFolderPolicy)(results[0]));
    }
    
    public System.IAsyncResult BeginGetiFolderPolicy(string ifolderID, string adminID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetiFolderPolicy", new object[] {
                    ifolderID,
                    adminID}, callback, asyncState);
    }
    
    public iFolderPolicy EndGetiFolderPolicy(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((iFolderPolicy)(results[0]));
    }
    
    public void GetiFolderPolicyAsync(string ifolderID, string adminID) {
        this.GetiFolderPolicyAsync(ifolderID, adminID, null);
    }
    
    public void GetiFolderPolicyAsync(string ifolderID, string adminID, object userState) {
        if ((this.GetiFolderPolicyOperationCompleted == null)) {
            this.GetiFolderPolicyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetiFolderPolicyCompleted);
        }
        this.InvokeAsync("GetiFolderPolicy", new object[] {
                    ifolderID,
                    adminID}, this.GetiFolderPolicyOperationCompleted, userState);
    }
    
    private void OnGetiFolderPolicyCompleted(object arg) {
        if ((this.GetiFolderPolicyCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetiFolderPolicyCompleted(this, new GetiFolderPolicyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Set the policy for an iFolder.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/SetiFolderPolicy", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void SetiFolderPolicy(iFolderPolicy policy) {
        this.Invoke("SetiFolderPolicy", new object[] {
                    policy});
    }
    
    public System.IAsyncResult BeginSetiFolderPolicy(iFolderPolicy policy, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetiFolderPolicy", new object[] {
                    policy}, callback, asyncState);
    }
    
    public void EndSetiFolderPolicy(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    public void SetiFolderPolicyAsync(iFolderPolicy policy) {
        this.SetiFolderPolicyAsync(policy, null);
    }
    
    public void SetiFolderPolicyAsync(iFolderPolicy policy, object userState) {
        if ((this.SetiFolderPolicyOperationCompleted == null)) {
            this.SetiFolderPolicyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetiFolderPolicyCompleted);
        }
        this.InvokeAsync("SetiFolderPolicy", new object[] {
                    policy}, this.SetiFolderPolicyOperationCompleted, userState);
    }
    
    private void OnSetiFolderPolicyCompleted(object arg) {
        if ((this.SetiFolderPolicyCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SetiFolderPolicyCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Get policy information for the registered identity provider.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetIdentityPolicy", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public IdentityPolicy GetIdentityPolicy() {
        object[] results = this.Invoke("GetIdentityPolicy", new object[0]);
        return ((IdentityPolicy)(results[0]));
    }
    
    public System.IAsyncResult BeginGetIdentityPolicy(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetIdentityPolicy", new object[0], callback, asyncState);
    }
    
    public IdentityPolicy EndGetIdentityPolicy(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((IdentityPolicy)(results[0]));
    }
    
    public void GetIdentityPolicyAsync() {
        this.GetIdentityPolicyAsync(null);
    }
    
    public void GetIdentityPolicyAsync(object userState) {
        if ((this.GetIdentityPolicyOperationCompleted == null)) {
            this.GetIdentityPolicyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetIdentityPolicyCompleted);
        }
        this.InvokeAsync("GetIdentityPolicy", new object[0], this.GetIdentityPolicyOperationCompleted, userState);
    }
    
    private void OnGetIdentityPolicyCompleted(object arg) {
        if ((this.GetIdentityPolicyCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetIdentityPolicyCompleted(this, new GetIdentityPolicyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Disables/enables the identity synchronization service.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/IdentitySyncDisableService", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void IdentitySyncDisableService(bool disable) {
        this.Invoke("IdentitySyncDisableService", new object[] {
                    disable});
    }
    
    public System.IAsyncResult BeginIdentitySyncDisableService(bool disable, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("IdentitySyncDisableService", new object[] {
                    disable}, callback, asyncState);
    }
    
    public void EndIdentitySyncDisableService(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    public void IdentitySyncDisableServiceAsync(bool disable) {
        this.IdentitySyncDisableServiceAsync(disable, null);
    }
    
    public void IdentitySyncDisableServiceAsync(bool disable, object userState) {
        if ((this.IdentitySyncDisableServiceOperationCompleted == null)) {
            this.IdentitySyncDisableServiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIdentitySyncDisableServiceCompleted);
        }
        this.InvokeAsync("IdentitySyncDisableService", new object[] {
                    disable}, this.IdentitySyncDisableServiceOperationCompleted, userState);
    }
    
    private void OnIdentitySyncDisableServiceCompleted(object arg) {
        if ((this.IdentitySyncDisableServiceCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.IdentitySyncDisableServiceCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Get detailed information about the last synchronization cycle.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/IdentitySyncGetLastInfo", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public LastSyncInfo IdentitySyncGetLastInfo() {
        object[] results = this.Invoke("IdentitySyncGetLastInfo", new object[0]);
        return ((LastSyncInfo)(results[0]));
    }
    
    public System.IAsyncResult BeginIdentitySyncGetLastInfo(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("IdentitySyncGetLastInfo", new object[0], callback, asyncState);
    }
    
    public LastSyncInfo EndIdentitySyncGetLastInfo(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((LastSyncInfo)(results[0]));
    }
    
    public void IdentitySyncGetLastInfoAsync() {
        this.IdentitySyncGetLastInfoAsync(null);
    }
    
    public void IdentitySyncGetLastInfoAsync(object userState) {
        if ((this.IdentitySyncGetLastInfoOperationCompleted == null)) {
            this.IdentitySyncGetLastInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIdentitySyncGetLastInfoCompleted);
        }
        this.InvokeAsync("IdentitySyncGetLastInfo", new object[0], this.IdentitySyncGetLastInfoOperationCompleted, userState);
    }
    
    private void OnIdentitySyncGetLastInfoCompleted(object arg) {
        if ((this.IdentitySyncGetLastInfoCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.IdentitySyncGetLastInfoCompleted(this, new IdentitySyncGetLastInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Get the current status of the identity sync service thread.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/IdentitySyncGetServiceInfo", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public SyncServiceInfo IdentitySyncGetServiceInfo() {
        object[] results = this.Invoke("IdentitySyncGetServiceInfo", new object[0]);
        return ((SyncServiceInfo)(results[0]));
    }
    
    public System.IAsyncResult BeginIdentitySyncGetServiceInfo(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("IdentitySyncGetServiceInfo", new object[0], callback, asyncState);
    }
    
    public SyncServiceInfo EndIdentitySyncGetServiceInfo(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((SyncServiceInfo)(results[0]));
    }
    
    public void IdentitySyncGetServiceInfoAsync() {
        this.IdentitySyncGetServiceInfoAsync(null);
    }
    
    public void IdentitySyncGetServiceInfoAsync(object userState) {
        if ((this.IdentitySyncGetServiceInfoOperationCompleted == null)) {
            this.IdentitySyncGetServiceInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIdentitySyncGetServiceInfoCompleted);
        }
        this.InvokeAsync("IdentitySyncGetServiceInfo", new object[0], this.IdentitySyncGetServiceInfoOperationCompleted, userState);
    }
    
    private void OnIdentitySyncGetServiceInfoCompleted(object arg) {
        if ((this.IdentitySyncGetServiceInfoCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.IdentitySyncGetServiceInfoCompleted(this, new IdentitySyncGetServiceInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Set the grace period for a member.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/IdentitySyncSetDeleteMemberGracePeriod", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void IdentitySyncSetDeleteMemberGracePeriod(int seconds) {
        this.Invoke("IdentitySyncSetDeleteMemberGracePeriod", new object[] {
                    seconds});
    }
    
    public System.IAsyncResult BeginIdentitySyncSetDeleteMemberGracePeriod(int seconds, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("IdentitySyncSetDeleteMemberGracePeriod", new object[] {
                    seconds}, callback, asyncState);
    }
    
    public void EndIdentitySyncSetDeleteMemberGracePeriod(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    public void IdentitySyncSetDeleteMemberGracePeriodAsync(int seconds) {
        this.IdentitySyncSetDeleteMemberGracePeriodAsync(seconds, null);
    }
    
    public void IdentitySyncSetDeleteMemberGracePeriodAsync(int seconds, object userState) {
        if ((this.IdentitySyncSetDeleteMemberGracePeriodOperationCompleted == null)) {
            this.IdentitySyncSetDeleteMemberGracePeriodOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIdentitySyncSetDeleteMemberGracePeriodCompleted);
        }
        this.InvokeAsync("IdentitySyncSetDeleteMemberGracePeriod", new object[] {
                    seconds}, this.IdentitySyncSetDeleteMemberGracePeriodOperationCompleted, userState);
    }
    
    private void OnIdentitySyncSetDeleteMemberGracePeriodCompleted(object arg) {
        if ((this.IdentitySyncSetDeleteMemberGracePeriodCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.IdentitySyncSetDeleteMemberGracePeriodCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Set the synchronization interval for the identity sync service.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/IdentitySyncSetInterval", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void IdentitySyncSetInterval(int seconds) {
        this.Invoke("IdentitySyncSetInterval", new object[] {
                    seconds});
    }
    
    public System.IAsyncResult BeginIdentitySyncSetInterval(int seconds, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("IdentitySyncSetInterval", new object[] {
                    seconds}, callback, asyncState);
    }
    
    public void EndIdentitySyncSetInterval(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    public void IdentitySyncSetIntervalAsync(int seconds) {
        this.IdentitySyncSetIntervalAsync(seconds, null);
    }
    
    public void IdentitySyncSetIntervalAsync(int seconds, object userState) {
        if ((this.IdentitySyncSetIntervalOperationCompleted == null)) {
            this.IdentitySyncSetIntervalOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIdentitySyncSetIntervalCompleted);
        }
        this.InvokeAsync("IdentitySyncSetInterval", new object[] {
                    seconds}, this.IdentitySyncSetIntervalOperationCompleted, userState);
    }
    
    private void OnIdentitySyncSetIntervalCompleted(object arg) {
        if ((this.IdentitySyncSetIntervalCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.IdentitySyncSetIntervalCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Cause the Identity Sync Service to synchronize immediately.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/IdentitySyncNow", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void IdentitySyncNow() {
        this.Invoke("IdentitySyncNow", new object[0]);
    }
    
    public System.IAsyncResult BeginIdentitySyncNow(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("IdentitySyncNow", new object[0], callback, asyncState);
    }
    
    public void EndIdentitySyncNow(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    public void IdentitySyncNowAsync() {
        this.IdentitySyncNowAsync(null);
    }
    
    public void IdentitySyncNowAsync(object userState) {
        if ((this.IdentitySyncNowOperationCompleted == null)) {
            this.IdentitySyncNowOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIdentitySyncNowCompleted);
        }
        this.InvokeAsync("IdentitySyncNow", new object[0], this.IdentitySyncNowOperationCompleted, userState);
    }
    
    private void OnIdentitySyncNowCompleted(object arg) {
        if ((this.IdentitySyncNowCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.IdentitySyncNowCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Cause the Identity Sync Service to synchronize immediately.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetLogLevels", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public string[] GetLogLevels() {
        object[] results = this.Invoke("GetLogLevels", new object[0]);
        return ((string[])(results[0]));
    }
    
    public System.IAsyncResult BeginGetLogLevels(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetLogLevels", new object[0], callback, asyncState);
    }
    
    public string[] EndGetLogLevels(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string[])(results[0]));
    }
    
    public void GetLogLevelsAsync() {
        this.GetLogLevelsAsync(null);
    }
    
    public void GetLogLevelsAsync(object userState) {
        if ((this.GetLogLevelsOperationCompleted == null)) {
            this.GetLogLevelsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLogLevelsCompleted);
        }
        this.InvokeAsync("GetLogLevels", new object[0], this.GetLogLevelsOperationCompleted, userState);
    }
    
    private void OnGetLogLevelsCompleted(object arg) {
        if ((this.GetLogLevelsCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetLogLevelsCompleted(this, new GetLogLevelsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Cause the Identity Sync Service to synchronize immediately.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/SetLogLevel", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void SetLogLevel(LoggerType type, string logLevel) {
        this.Invoke("SetLogLevel", new object[] {
                    type,
                    logLevel});
    }
    
    public System.IAsyncResult BeginSetLogLevel(LoggerType type, string logLevel, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetLogLevel", new object[] {
                    type,
                    logLevel}, callback, asyncState);
    }
    
    public void EndSetLogLevel(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    public void SetLogLevelAsync(LoggerType type, string logLevel) {
        this.SetLogLevelAsync(type, logLevel, null);
    }
    
    public void SetLogLevelAsync(LoggerType type, string logLevel, object userState) {
        if ((this.SetLogLevelOperationCompleted == null)) {
            this.SetLogLevelOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetLogLevelCompleted);
        }
        this.InvokeAsync("SetLogLevel", new object[] {
                    type,
                    logLevel}, this.SetLogLevelOperationCompleted, userState);
    }
    
    private void OnSetLogLevelCompleted(object arg) {
        if ((this.SetLogLevelCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SetLogLevelCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Get information about a user using an id or username.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetLdapDetails", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public LdapInfo GetLdapDetails() {
        object[] results = this.Invoke("GetLdapDetails", new object[0]);
        return ((LdapInfo)(results[0]));
    }
    
    public System.IAsyncResult BeginGetLdapDetails(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetLdapDetails", new object[0], callback, asyncState);
    }
    
    public LdapInfo EndGetLdapDetails(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((LdapInfo)(results[0]));
    }
    
    public void GetLdapDetailsAsync() {
        this.GetLdapDetailsAsync(null);
    }
    
    public void GetLdapDetailsAsync(object userState) {
        if ((this.GetLdapDetailsOperationCompleted == null)) {
            this.GetLdapDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLdapDetailsCompleted);
        }
        this.InvokeAsync("GetLdapDetails", new object[0], this.GetLdapDetailsOperationCompleted, userState);
    }
    
    private void OnGetLdapDetailsCompleted(object arg) {
        if ((this.GetLdapDetailsCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetLdapDetailsCompleted(this, new GetLdapDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Get information about a user using an id or username.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/SetLdapDetails", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void SetLdapDetails(LdapInfo ldapInfo, string LdapAdminDN, string LdapAdminPwd, string ServerID) {
        this.Invoke("SetLdapDetails", new object[] {
                    ldapInfo,
                    LdapAdminDN,
                    LdapAdminPwd,
                    ServerID});
    }
    
    public System.IAsyncResult BeginSetLdapDetails(LdapInfo ldapInfo, string LdapAdminDN, string LdapAdminPwd, string ServerID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetLdapDetails", new object[] {
                    ldapInfo,
                    LdapAdminDN,
                    LdapAdminPwd,
                    ServerID}, callback, asyncState);
    }
    
    public void EndSetLdapDetails(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    public void SetLdapDetailsAsync(LdapInfo ldapInfo, string LdapAdminDN, string LdapAdminPwd, string ServerID) {
        this.SetLdapDetailsAsync(ldapInfo, LdapAdminDN, LdapAdminPwd, ServerID, null);
    }
    
    public void SetLdapDetailsAsync(LdapInfo ldapInfo, string LdapAdminDN, string LdapAdminPwd, string ServerID, object userState) {
        if ((this.SetLdapDetailsOperationCompleted == null)) {
            this.SetLdapDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetLdapDetailsCompleted);
        }
        this.InvokeAsync("SetLdapDetails", new object[] {
                    ldapInfo,
                    LdapAdminDN,
                    LdapAdminPwd,
                    ServerID}, this.SetLdapDetailsOperationCompleted, userState);
    }
    
    private void OnSetLdapDetailsCompleted(object arg) {
        if ((this.SetLdapDetailsCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SetLdapDetailsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///evaluate the disable sharing policy
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetSharingPolicy", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public bool GetSharingPolicy(string iFolderID) {
        object[] results = this.Invoke("GetSharingPolicy", new object[] {
                    iFolderID});
        return ((bool)(results[0]));
    }
    
    public System.IAsyncResult BeginGetSharingPolicy(string iFolderID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetSharingPolicy", new object[] {
                    iFolderID}, callback, asyncState);
    }
    
    public bool EndGetSharingPolicy(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    public void GetSharingPolicyAsync(string iFolderID) {
        this.GetSharingPolicyAsync(iFolderID, null);
    }
    
    public void GetSharingPolicyAsync(string iFolderID, object userState) {
        if ((this.GetSharingPolicyOperationCompleted == null)) {
            this.GetSharingPolicyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSharingPolicyCompleted);
        }
        this.InvokeAsync("GetSharingPolicy", new object[] {
                    iFolderID}, this.GetSharingPolicyOperationCompleted, userState);
    }
    
    private void OnGetSharingPolicyCompleted(object arg) {
        if ((this.GetSharingPolicyCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetSharingPolicyCompleted(this, new GetSharingPolicyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Get policy information for a user.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetUserGroupSharingPolicy", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public int GetUserGroupSharingPolicy(string ownerID) {
        object[] results = this.Invoke("GetUserGroupSharingPolicy", new object[] {
                    ownerID});
        return ((int)(results[0]));
    }
    
    public System.IAsyncResult BeginGetUserGroupSharingPolicy(string ownerID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetUserGroupSharingPolicy", new object[] {
                    ownerID}, callback, asyncState);
    }
    
    public int EndGetUserGroupSharingPolicy(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((int)(results[0]));
    }
    
    public void GetUserGroupSharingPolicyAsync(string ownerID) {
        this.GetUserGroupSharingPolicyAsync(ownerID, null);
    }
    
    public void GetUserGroupSharingPolicyAsync(string ownerID, object userState) {
        if ((this.GetUserGroupSharingPolicyOperationCompleted == null)) {
            this.GetUserGroupSharingPolicyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserGroupSharingPolicyCompleted);
        }
        this.InvokeAsync("GetUserGroupSharingPolicy", new object[] {
                    ownerID}, this.GetUserGroupSharingPolicyOperationCompleted, userState);
    }
    
    private void OnGetUserGroupSharingPolicyCompleted(object arg) {
        if ((this.GetUserGroupSharingPolicyCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetUserGroupSharingPolicyCompleted(this, new GetUserGroupSharingPolicyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Modify a data store for an iFolder Server.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/ModifyStore", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public bool ModifyStore(string datapathname, bool enabled) {
        object[] results = this.Invoke("ModifyStore", new object[] {
                    datapathname,
                    enabled});
        return ((bool)(results[0]));
    }
    
    public System.IAsyncResult BeginModifyStore(string datapathname, bool enabled, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ModifyStore", new object[] {
                    datapathname,
                    enabled}, callback, asyncState);
    }
    
    public bool EndModifyStore(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    public void ModifyStoreAsync(string datapathname, bool enabled) {
        this.ModifyStoreAsync(datapathname, enabled, null);
    }
    
    public void ModifyStoreAsync(string datapathname, bool enabled, object userState) {
        if ((this.ModifyStoreOperationCompleted == null)) {
            this.ModifyStoreOperationCompleted = new System.Threading.SendOrPostCallback(this.OnModifyStoreCompleted);
        }
        this.InvokeAsync("ModifyStore", new object[] {
                    datapathname,
                    enabled}, this.ModifyStoreOperationCompleted, userState);
    }
    
    private void OnModifyStoreCompleted(object arg) {
        if ((this.ModifyStoreCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.ModifyStoreCompleted(this, new ModifyStoreCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Delete a data store for an iFolder Server.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/DeleteDataPath", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public bool DeleteDataPath(string datapathname) {
        object[] results = this.Invoke("DeleteDataPath", new object[] {
                    datapathname});
        return ((bool)(results[0]));
    }
    
    public System.IAsyncResult BeginDeleteDataPath(string datapathname, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("DeleteDataPath", new object[] {
                    datapathname}, callback, asyncState);
    }
    
    public bool EndDeleteDataPath(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    public void DeleteDataPathAsync(string datapathname) {
        this.DeleteDataPathAsync(datapathname, null);
    }
    
    public void DeleteDataPathAsync(string datapathname, object userState) {
        if ((this.DeleteDataPathOperationCompleted == null)) {
            this.DeleteDataPathOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteDataPathCompleted);
        }
        this.InvokeAsync("DeleteDataPath", new object[] {
                    datapathname}, this.DeleteDataPathOperationCompleted, userState);
    }
    
    private void OnDeleteDataPathCompleted(object arg) {
        if ((this.DeleteDataPathCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.DeleteDataPathCompleted(this, new DeleteDataPathCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Get the list of recovery agents
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetRAList", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public string[] GetRAList() {
        object[] results = this.Invoke("GetRAList", new object[0]);
        return ((string[])(results[0]));
    }
    
    public System.IAsyncResult BeginGetRAList(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetRAList", new object[0], callback, asyncState);
    }
    
    public string[] EndGetRAList(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string[])(results[0]));
    }
    
    public void GetRAListAsync() {
        this.GetRAListAsync(null);
    }
    
    public void GetRAListAsync(object userState) {
        if ((this.GetRAListOperationCompleted == null)) {
            //this.GetRAListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRAListCompleted);
        }
        this.InvokeAsync("GetRAList", new object[0], this.GetRAListOperationCompleted, userState);
    }
   /* 
    private void OnGetRAListCompleted(object arg) {
        if ((this.GetRAListCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetRAListCompleted(this, new GetRAListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }*/
    
    /// <remarks>
///Get the RA Certificate
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetRACertificate", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public byte[] GetRACertificate(string rAgent) {
        object[] results = this.Invoke("GetRACertificate", new object[] {
                    rAgent});
        return ((byte[])(results[0]));
    }
    
    public System.IAsyncResult BeginGetRACertificate(string rAgent, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetRACertificate", new object[] {
                    rAgent}, callback, asyncState);
    }
    
    public byte[] EndGetRACertificate(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((byte[])(results[0]));
    }
    
    public void GetRACertificateAsync(string rAgent) {
        this.GetRACertificateAsync(rAgent, null);
    }
    
    public void GetRACertificateAsync(string rAgent, object userState) {
        if ((this.GetRACertificateOperationCompleted == null)) {
            //this.GetRACertificateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRACertificateCompleted);
        }
        this.InvokeAsync("GetRACertificate", new object[] {
                    rAgent}, this.GetRACertificateOperationCompleted, userState);
    }
   /* 
    private void OnGetRACertificateCompleted(object arg) {
        if ((this.GetRACertificateCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetRACertificateCompleted(this, new GetRACertificateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }*/
    
    /// <remarks>
///Get the pass-phrase status
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/IsPassPhraseSet", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public bool IsPassPhraseSet() {
        object[] results = this.Invoke("IsPassPhraseSet", new object[0]);
        return ((bool)(results[0]));
    }
    
    public System.IAsyncResult BeginIsPassPhraseSet(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("IsPassPhraseSet", new object[0], callback, asyncState);
    }
    
    public bool EndIsPassPhraseSet(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    public void IsPassPhraseSetAsync() {
        this.IsPassPhraseSetAsync(null);
    }
    
    public void IsPassPhraseSetAsync(object userState) {
        if ((this.IsPassPhraseSetOperationCompleted == null)) {
            //this.IsPassPhraseSetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsPassPhraseSetCompleted);
        }
        this.InvokeAsync("IsPassPhraseSet", new object[0], this.IsPassPhraseSetOperationCompleted, userState);
    }
   /* 
    private void OnIsPassPhraseSetCompleted(object arg) {
        if ((this.IsPassPhraseSetCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.IsPassPhraseSetCompleted(this, new IsPassPhraseSetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }*/
    
    /// <remarks>
///Validate the passphrase for the correctness.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/ValidatePassPhrase", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public Status ValidatePassPhrase(string passPhrase) {
        object[] results = this.Invoke("ValidatePassPhrase", new object[] {
                    passPhrase});
        return ((Status)(results[0]));
    }
    
    public System.IAsyncResult BeginValidatePassPhrase(string passPhrase, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ValidatePassPhrase", new object[] {
                    passPhrase}, callback, asyncState);
    }
    
    public Status EndValidatePassPhrase(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((Status)(results[0]));
    }
    
    public void ValidatePassPhraseAsync(string passPhrase) {
        this.ValidatePassPhraseAsync(passPhrase, null);
    }
    
    public void ValidatePassPhraseAsync(string passPhrase, object userState) {
        if ((this.ValidatePassPhraseOperationCompleted == null)) {
            //this.ValidatePassPhraseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidatePassPhraseCompleted);
        }
        this.InvokeAsync("ValidatePassPhrase", new object[] {
                    passPhrase}, this.ValidatePassPhraseOperationCompleted, userState);
    }
   /* 
    private void OnValidatePassPhraseCompleted(object arg) {
        if ((this.ValidatePassPhraseCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.ValidatePassPhraseCompleted(this, new ValidatePassPhraseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }*/
    
    /// <remarks>
///Set the passphrase and recovery agent.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/SetPassPhrase", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void SetPassPhrase(string passPhrase, string recoveryAgentName, string publicKey) {
        this.Invoke("SetPassPhrase", new object[] {
                    passPhrase,
                    recoveryAgentName,
                    publicKey});
    }
    
    public System.IAsyncResult BeginSetPassPhrase(string passPhrase, string recoveryAgentName, string publicKey, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetPassPhrase", new object[] {
                    passPhrase,
                    recoveryAgentName,
                    publicKey}, callback, asyncState);
    }
    
    public void EndSetPassPhrase(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
   /* 
    public void SetPassPhraseAsync(string passPhrase, string recoveryAgentName, string publicKey) {
        this.SetPassPhraseAsync(passPhrase, recoveryAgentName, publicKey, null);
    }
    
    public void SetPassPhraseAsync(string passPhrase, string recoveryAgentName, string publicKey, object userState) {
        if ((this.SetPassPhraseOperationCompleted == null)) {
            this.SetPassPhraseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetPassPhraseCompleted);
        }
        this.InvokeAsync("SetPassPhrase", new object[] {
                    passPhrase,
                    recoveryAgentName,
                    publicKey}, this.SetPassPhraseOperationCompleted, userState);
    }
    
    private void OnSetPassPhraseCompleted(object arg) {
        if ((this.SetPassPhraseCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SetPassPhraseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
   	*/ 
    /// <remarks>
///Change the password for currently logged in user
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/ChangePassword", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public int ChangePassword(string OldPassword, string NewPassword) {
        object[] results = this.Invoke("ChangePassword", new object[] {
                    OldPassword,
                    NewPassword});
        return ((int)(results[0]));
    }
    
    public System.IAsyncResult BeginChangePassword(string OldPassword, string NewPassword, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ChangePassword", new object[] {
                    OldPassword,
                    NewPassword}, callback, asyncState);
    }
    
    public int EndChangePassword(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((int)(results[0]));
    }
    
    public void ChangePasswordAsync(string OldPassword, string NewPassword) {
        this.ChangePasswordAsync(OldPassword, NewPassword, null);
    }
    
    public void ChangePasswordAsync(string OldPassword, string NewPassword, object userState) {
        if ((this.ChangePasswordOperationCompleted == null)) {
            this.ChangePasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangePasswordCompleted);
        }
        this.InvokeAsync("ChangePassword", new object[] {
                    OldPassword,
                    NewPassword}, this.ChangePasswordOperationCompleted, userState);
    }
    
    private void OnChangePasswordCompleted(object arg) {
        if ((this.ChangePasswordCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.ChangePasswordCompleted(this, new ChangePasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Disables the past sharing by removing members list from all the iFolders of the system 
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/DisableGroupPastSharing", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void DisableGroupPastSharing() {
        this.Invoke("DisableGroupPastSharing", new object[0]);
    }
    
    public System.IAsyncResult BeginDisableGroupPastSharing(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("DisableGroupPastSharing", new object[0], callback, asyncState);
    }
    
    public void EndDisableGroupPastSharing(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    public void DisableGroupPastSharingAsync() {
        this.DisableGroupPastSharingAsync(null);
    }
    
    public void DisableGroupPastSharingAsync(object userState) {
        if ((this.DisableGroupPastSharingOperationCompleted == null)) {
            this.DisableGroupPastSharingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDisableGroupPastSharingCompleted);
        }
        this.InvokeAsync("DisableGroupPastSharing", new object[0], this.DisableGroupPastSharingOperationCompleted, userState);
    }
    
    private void OnDisableGroupPastSharingCompleted(object arg) {
        if ((this.DisableGroupPastSharingCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.DisableGroupPastSharingCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Get group ids this member belongs to 
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetGroupIDs", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public string[] GetGroupIDs(string userID) {
        object[] results = this.Invoke("GetGroupIDs", new object[] {
                    userID});
        return ((string[])(results[0]));
    }
    
    public System.IAsyncResult BeginGetGroupIDs(string userID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetGroupIDs", new object[] {
                    userID}, callback, asyncState);
    }
    
    public string[] EndGetGroupIDs(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string[])(results[0]));
    }
    
    public void GetGroupIDsAsync(string userID) {
        this.GetGroupIDsAsync(userID, null);
    }
    
    public void GetGroupIDsAsync(string userID, object userState) {
        if ((this.GetGroupIDsOperationCompleted == null)) {
            this.GetGroupIDsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetGroupIDsCompleted);
        }
        this.InvokeAsync("GetGroupIDs", new object[] {
                    userID}, this.GetGroupIDsOperationCompleted, userState);
    }
    
    private void OnGetGroupIDsCompleted(object arg) {
        if ((this.GetGroupIDsCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetGroupIDsCompleted(this, new GetGroupIDsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///ReProvision users to one server
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/ReProvisionUsersToServer", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void ReProvisionUsersToServer(string ServerName, string UserID) {
        this.Invoke("ReProvisionUsersToServer", new object[] {
                    ServerName,
                    UserID});
    }
    
    public System.IAsyncResult BeginReProvisionUsersToServer(string ServerName, string UserID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ReProvisionUsersToServer", new object[] {
                    ServerName,
                    UserID}, callback, asyncState);
    }
    
    public void EndReProvisionUsersToServer(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    public void ReProvisionUsersToServerAsync(string ServerName, string UserID) {
        this.ReProvisionUsersToServerAsync(ServerName, UserID, null);
    }
    
    public void ReProvisionUsersToServerAsync(string ServerName, string UserID, object userState) {
        if ((this.ReProvisionUsersToServerOperationCompleted == null)) {
            this.ReProvisionUsersToServerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReProvisionUsersToServerCompleted);
        }
        this.InvokeAsync("ReProvisionUsersToServer", new object[] {
                    ServerName,
                    UserID}, this.ReProvisionUsersToServerOperationCompleted, userState);
    }
    
    private void OnReProvisionUsersToServerCompleted(object arg) {
        if ((this.ReProvisionUsersToServerCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.ReProvisionUsersToServerCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
}

/*
/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/ifolder/webservice/")]
public partial class iFolderSystem {
    
    private string iDField;
    
    private string nameField;
    
    private string versionField;
    
    private string descriptionField;
    
    private string usersFullNameDisplayField;
    
    private int groupQuotaRestrictionMethodField;
    
    private string groupSegregatedField;
    
    private string reportiFolderIDField;
    
    private string reportiFolderNameField;
    
    private string reportPathField;
    
    /// <remarks/>
    public string ID {
        get {
            return this.iDField;
        }
        set {
            this.iDField = value;
        }
    }
    
    /// <remarks/>
    public string Name {
        get {
            return this.nameField;
        }
        set {
            this.nameField = value;
        }
    }
    
    /// <remarks/>
    public string Version {
        get {
            return this.versionField;
        }
        set {
            this.versionField = value;
        }
    }
    
    /// <remarks/>
    public string Description {
        get {
            return this.descriptionField;
        }
        set {
            this.descriptionField = value;
        }
    }
    
    /// <remarks/>
    public string UsersFullNameDisplay {
        get {
            return this.usersFullNameDisplayField;
        }
        set {
            this.usersFullNameDisplayField = value;
        }
    }
    
    /// <remarks/>
    public int GroupQuotaRestrictionMethod {
        get {
            return this.groupQuotaRestrictionMethodField;
        }
        set {
            this.groupQuotaRestrictionMethodField = value;
        }
    }
    
    /// <remarks/>
    public string GroupSegregated {
        get {
            return this.groupSegregatedField;
        }
        set {
            this.groupSegregatedField = value;
        }
    }
    
    /// <remarks/>
    public string ReportiFolderID {
        get {
            return this.reportiFolderIDField;
        }
        set {
            this.reportiFolderIDField = value;
        }
    }
    
    /// <remarks/>
    public string ReportiFolderName {
        get {
            return this.reportiFolderNameField;
        }
        set {
            this.reportiFolderNameField = value;
        }
    }
    
    /// <remarks/>
    public string ReportPath {
        get {
            return this.reportPathField;
        }
        set {
            this.reportPathField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/ifolder/webservice/")]
public partial class iFolderServer {
    
    private string iDField1;
    
    private string nameField1;
    
    private string versionField1;
    
    private string hostNameField;
    
    private string machineNameField;
    
    private string oSVersionField;
    
    private string userNameField;
    
    private string clrVersionField;
    
    private string publicUrlField;
    
    private string privateUrlField;
    
    private bool isMasterField;
    
    private bool isLocalField;
    
    private int userCountField;
    
    /// <remarks/>
    public string ID {
        get {
            return this.iDField1;
        }
        set {
            this.iDField1 = value;
        }
    }
    
    /// <remarks/>
    public string Name {
        get {
            return this.nameField1;
        }
        set {
            this.nameField1 = value;
        }
    }
    
    /// <remarks/>
    public string Version {
        get {
            return this.versionField1;
        }
        set {
            this.versionField1 = value;
        }
    }
    
    /// <remarks/>
    public string HostName {
        get {
            return this.hostNameField;
        }
        set {
            this.hostNameField = value;
        }
    }
    
    /// <remarks/>
    public string MachineName {
        get {
            return this.machineNameField;
        }
        set {
            this.machineNameField = value;
        }
    }
    
    /// <remarks/>
    public string OSVersion {
        get {
            return this.oSVersionField;
        }
        set {
            this.oSVersionField = value;
        }
    }
    
    /// <remarks/>
    public string UserName {
        get {
            return this.userNameField;
        }
        set {
            this.userNameField = value;
        }
    }
    
    /// <remarks/>
    public string ClrVersion {
        get {
            return this.clrVersionField;
        }
        set {
            this.clrVersionField = value;
        }
    }
    
    /// <remarks/>
    public string PublicUrl {
        get {
            return this.publicUrlField;
        }
        set {
            this.publicUrlField = value;
        }
    }
    
    /// <remarks/>
    public string PrivateUrl {
        get {
            return this.privateUrlField;
        }
        set {
            this.privateUrlField = value;
        }
    }
    
    /// <remarks/>
    public bool IsMaster {
        get {
            return this.isMasterField;
        }
        set {
            this.isMasterField = value;
        }
    }
    
    /// <remarks/>
    public bool IsLocal {
        get {
            return this.isLocalField;
        }
        set {
            this.isLocalField = value;
        }
    }
    
    /// <remarks/>
    public int UserCount {
        get {
            return this.userCountField;
        }
        set {
            this.userCountField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/ifolder/webservice/")]
public enum SearchOperation {
    
    /// <remarks/>
    BeginsWith,
    
    /// <remarks/>
    EndsWith,
    
    /// <remarks/>
    Contains,
    
    /// <remarks/>
    Equals,
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/ifolder/webservice/")]
public partial class iFolderSet {
    
    private iFolder[] itemsField;
    
    private int totalField;
    
    /// <remarks/>
    public iFolder[] Items {
        get {
            return this.itemsField;
        }
        set {
            this.itemsField = value;
        }
    }
    
    /// <remarks/>
    public int Total {
        get {
            return this.totalField;
        }
        set {
            this.totalField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/ifolder/webservice/")]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(iFolderDetails))]
public partial class iFolder {
    
    private string iDField2;
    
    private string nameField2;
    
    private string descriptionField1;
    
    private string ownerIDField;
    
    private string ownerUserNameField;
    
    private string ownerFullNameField;
    
    private string domainIDField;
    
    private long sizeField;
    
    private bool isOwnerField;
    
    private Rights memberRightsField;
    
    private System.DateTime createdField;
    
    private System.DateTime lastModifiedField;
    
    private bool publishedField;
    
    private bool enabledField;
    
    private int memberCountField;
    
    private string hostIDField;
    
    private uint ifolderSecurityField;
    
    private string encryptionAlgorithmField;
    
    private string encryptionKeyField;
    
    private int folderMoveStatusField;
    
    private int preferenceField;
    
    /// <remarks/>
    public string ID {
        get {
            return this.iDField2;
        }
        set {
            this.iDField2 = value;
        }
    }
    
    /// <remarks/>
    public string Name {
        get {
            return this.nameField2;
        }
        set {
            this.nameField2 = value;
        }
    }
    
    /// <remarks/>
    public string Description {
        get {
            return this.descriptionField1;
        }
        set {
            this.descriptionField1 = value;
        }
    }
    
    /// <remarks/>
    public string OwnerID {
        get {
            return this.ownerIDField;
        }
        set {
            this.ownerIDField = value;
        }
    }
    
    /// <remarks/>
    public string OwnerUserName {
        get {
            return this.ownerUserNameField;
        }
        set {
            this.ownerUserNameField = value;
        }
    }
    
    /// <remarks/>
    public string OwnerFullName {
        get {
            return this.ownerFullNameField;
        }
        set {
            this.ownerFullNameField = value;
        }
    }
    
    /// <remarks/>
    public string DomainID {
        get {
            return this.domainIDField;
        }
        set {
            this.domainIDField = value;
        }
    }
    
    /// <remarks/>
    public long Size {
        get {
            return this.sizeField;
        }
        set {
            this.sizeField = value;
        }
    }
    
    /// <remarks/>
    public bool IsOwner {
        get {
            return this.isOwnerField;
        }
        set {
            this.isOwnerField = value;
        }
    }
    
    /// <remarks/>
    public Rights MemberRights {
        get {
            return this.memberRightsField;
        }
        set {
            this.memberRightsField = value;
        }
    }
    
    /// <remarks/>
    public System.DateTime Created {
        get {
            return this.createdField;
        }
        set {
            this.createdField = value;
        }
    }
    
    /// <remarks/>
    public System.DateTime LastModified {
        get {
            return this.lastModifiedField;
        }
        set {
            this.lastModifiedField = value;
        }
    }
    
    /// <remarks/>
    public bool Published {
        get {
            return this.publishedField;
        }
        set {
            this.publishedField = value;
        }
    }
    
    /// <remarks/>
    public bool Enabled {
        get {
            return this.enabledField;
        }
        set {
            this.enabledField = value;
        }
    }
    
    /// <remarks/>
    public int MemberCount {
        get {
            return this.memberCountField;
        }
        set {
            this.memberCountField = value;
        }
    }
    
    /// <remarks/>
    public string HostID {
        get {
            return this.hostIDField;
        }
        set {
            this.hostIDField = value;
        }
    }
    
    /// <remarks/>
    public uint IfolderSecurity {
        get {
            return this.ifolderSecurityField;
        }
        set {
            this.ifolderSecurityField = value;
        }
    }
    
    /// <remarks/>
    public string EncryptionAlgorithm {
        get {
            return this.encryptionAlgorithmField;
        }
        set {
            this.encryptionAlgorithmField = value;
        }
    }
    
    /// <remarks/>
    public string EncryptionKey {
        get {
            return this.encryptionKeyField;
        }
        set {
            this.encryptionKeyField = value;
        }
    }
    
    /// <remarks/>
    public int FolderMoveStatus {
        get {
            return this.folderMoveStatusField;
        }
        set {
            this.folderMoveStatusField = value;
        }
    }
    
    /// <remarks/>
    public int Preference {
        get {
            return this.preferenceField;
        }
        set {
            this.preferenceField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/ifolder/webservice/")]
public enum Rights {
    
    /// <remarks/>
    Admin,
    
    /// <remarks/>
    Secondary,
    
    /// <remarks/>
    ReadWrite,
    
    /// <remarks/>
    ReadOnly,
    
    /// <remarks/>
    Deny,
    
    /// <remarks/>
    Unknown,
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/ifolder/webservice/")]
public partial class iFolderDetails : iFolder {
    
    private int fileCountField;
    
    private int directoryCountField;
    
    private string managedPathField;
    
    private string unManagedPathField;
    
    /// <remarks/>
    public int FileCount {
        get {
            return this.fileCountField;
        }
        set {
            this.fileCountField = value;
        }
    }
    
    /// <remarks/>
    public int DirectoryCount {
        get {
            return this.directoryCountField;
        }
        set {
            this.directoryCountField = value;
        }
    }
    
    /// <remarks/>
    public string ManagedPath {
        get {
            return this.managedPathField;
        }
        set {
            this.managedPathField = value;
        }
    }
    
    /// <remarks/>
    public string UnManagedPath {
        get {
            return this.unManagedPathField;
        }
        set {
            this.unManagedPathField = value;
        }
    }
}

*/
/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/ifolder/webservice/")]
public partial class VolumesList {
    
    private Volumes[] itemsArrayField;
    
    private int numberOfVolumesField;
    
    /// <remarks/>
    public Volumes[] ItemsArray {
        get {
            return this.itemsArrayField;
        }
        set {
            this.itemsArrayField = value;
        }
    }
    
    /// <remarks/>
    public int NumberOfVolumes {
        get {
            return this.numberOfVolumesField;
        }
        set {
            this.numberOfVolumesField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/ifolder/webservice/")]
public partial class Volumes {
    
    private string dataPathField;
    
    private string fullPathField;
    
    private long availableFreeSpaceField;
    
    private bool enabledField2;
    
    /// <remarks/>
    public string DataPath {
        get {
            return this.dataPathField;
        }
        set {
            this.dataPathField = value;
        }
    }
    
    /// <remarks/>
    public string FullPath {
        get {
            return this.fullPathField;
        }
        set {
            this.fullPathField = value;
        }
    }
    
    /// <remarks/>
    public long AvailableFreeSpace {
        get {
            return this.availableFreeSpaceField;
        }
        set {
            this.availableFreeSpaceField = value;
        }
    }
    
    /// <remarks/>
    public bool Enabled {
        get {
            return this.enabledField2;
        }
        set {
            this.enabledField2 = value;
        }
    }
}

/*
/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/ifolder/webservice/")]
public partial class iFolderServerSet {
    
    private iFolderServer[] itemsField1;
    
    private int totalField1;
    
    /// <remarks/>
    public iFolderServer[] Items {
        get {
            return this.itemsField1;
        }
        set {
            this.itemsField1 = value;
        }
    }
    
    /// <remarks/>
    public int Total {
        get {
            return this.totalField1;
        }
        set {
            this.totalField1 = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/ifolder/webservice/")]
public partial class ChangeEntrySet {
    
    private ChangeEntry[] itemsField2;
    
    private int totalField2;
    
    /// <remarks/>
    public ChangeEntry[] Items {
        get {
            return this.itemsField2;
        }
        set {
            this.itemsField2 = value;
        }
    }
    
    /// <remarks/>
    public int Total {
        get {
            return this.totalField2;
        }
        set {
            this.totalField2 = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/ifolder/webservice/")]
public partial class ChangeEntry {
    
    private System.DateTime timeField;
    
    private ChangeEntryType typeField;
    
    private ChangeEntryAction actionField;
    
    private string iDField3;
    
    private string nameField4;
    
    private string userIDField2;
    
    private string userFullNameField;
    
    private Rights memberNewRightsField;
    
    private Rights memberOldRightsField;
    
    /// <remarks/>
    public System.DateTime Time {
        get {
            return this.timeField;
        }
        set {
            this.timeField = value;
        }
    }
    
    /// <remarks/>
    public ChangeEntryType Type {
        get {
            return this.typeField;
        }
        set {
            this.typeField = value;
        }
    }
    
    /// <remarks/>
    public ChangeEntryAction Action {
        get {
            return this.actionField;
        }
        set {
            this.actionField = value;
        }
    }
    
    /// <remarks/>
    public string ID {
        get {
            return this.iDField3;
        }
        set {
            this.iDField3 = value;
        }
    }
    
    /// <remarks/>
    public string Name {
        get {
            return this.nameField4;
        }
        set {
            this.nameField4 = value;
        }
    }
    
    /// <remarks/>
    public string UserID {
        get {
            return this.userIDField2;
        }
        set {
            this.userIDField2 = value;
        }
    }
    
    /// <remarks/>
    public string UserFullName {
        get {
            return this.userFullNameField;
        }
        set {
            this.userFullNameField = value;
        }
    }
    
    /// <remarks/>
    public Rights MemberNewRights {
        get {
            return this.memberNewRightsField;
        }
        set {
            this.memberNewRightsField = value;
        }
    }
    
    /// <remarks/>
    public Rights MemberOldRights {
        get {
            return this.memberOldRightsField;
        }
        set {
            this.memberOldRightsField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/ifolder/webservice/")]
public enum ChangeEntryType {
    
    /// <remarks/>
    iFolder,
    
    /// <remarks/>
    File,
    
    /// <remarks/>
    Directory,
    
    /// <remarks/>
    Member,
    
    /// <remarks/>
    Unknown,
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/ifolder/webservice/")]
public enum ChangeEntryAction {
    
    /// <remarks/>
    Add,
    
    /// <remarks/>
    Modify,
    
    /// <remarks/>
    Delete,
    
    /// <remarks/>
    Unknown,
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/ifolder/webservice/")]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(iFolderUserDetails))]
public partial class iFolderUser {
    
    private string iDField4;
    
    private string userNameField1;
    
    private string fullNameField;
    
    private string firstNameField;
    
    private string lastNameField;
    
    private Rights memberRightsField1;
    
    private bool enabledField3;
    
    private bool isOwnerField1;
    
    private string emailField;
    
    private string homeServerField;
    
    private string newHomeServerField;
    
    private int dataMovePercentageField;
    
    private string dataMoveStatusField;
    
    private bool isGroupField;
    
    private int preferenceField1;
    
    /// <remarks/>
    public string ID {
        get {
            return this.iDField4;
        }
        set {
            this.iDField4 = value;
        }
    }
    
    /// <remarks/>
    public string UserName {
        get {
            return this.userNameField1;
        }
        set {
            this.userNameField1 = value;
        }
    }
    
    /// <remarks/>
    public string FullName {
        get {
            return this.fullNameField;
        }
        set {
            this.fullNameField = value;
        }
    }
    
    /// <remarks/>
    public string FirstName {
        get {
            return this.firstNameField;
        }
        set {
            this.firstNameField = value;
        }
    }
    
    /// <remarks/>
    public string LastName {
        get {
            return this.lastNameField;
        }
        set {
            this.lastNameField = value;
        }
    }
    
    /// <remarks/>
    public Rights MemberRights {
        get {
            return this.memberRightsField1;
        }
        set {
            this.memberRightsField1 = value;
        }
    }
    
    /// <remarks/>
    public bool Enabled {
        get {
            return this.enabledField3;
        }
        set {
            this.enabledField3 = value;
        }
    }
    
    /// <remarks/>
    public bool IsOwner {
        get {
            return this.isOwnerField1;
        }
        set {
            this.isOwnerField1 = value;
        }
    }
    
    /// <remarks/>
    public string Email {
        get {
            return this.emailField;
        }
        set {
            this.emailField = value;
        }
    }
    
    /// <remarks/>
    public string HomeServer {
        get {
            return this.homeServerField;
        }
        set {
            this.homeServerField = value;
        }
    }
    
    /// <remarks/>
    public string NewHomeServer {
        get {
            return this.newHomeServerField;
        }
        set {
            this.newHomeServerField = value;
        }
    }
    
    /// <remarks/>
    public int DataMovePercentage {
        get {
            return this.dataMovePercentageField;
        }
        set {
            this.dataMovePercentageField = value;
        }
    }
    
    /// <remarks/>
    public string DataMoveStatus {
        get {
            return this.dataMoveStatusField;
        }
        set {
            this.dataMoveStatusField = value;
        }
    }
    
    /// <remarks/>
    public bool IsGroup {
        get {
            return this.isGroupField;
        }
        set {
            this.isGroupField = value;
        }
    }
    
    /// <remarks/>
    public int Preference {
        get {
            return this.preferenceField1;
        }
        set {
            this.preferenceField1 = value;
        }
    }
}

*/
/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/ifolder/webservice/")]
public partial class iFolderUserDetails : iFolderUser {
    
    private int syncIntervalEffectiveField;
    
    private System.DateTime lastLoginField;
    
    private string ldapContextField;
    
    private string groupOrMemberListField;
    
    private int memberTypeField;
    
    private int ownediFolderCountField;
    
    private int sharediFolderCountField;
    
    private string detailHomeServerField;
    
    private string detailNewHomeServerField;
    
    private int detailDataMovePercentageField;
    
    private string detailDataMoveStatusField;
    
    private long groupDiskQuotaField;
    
    private long spaceUsedByGroupField;
    
    /// <remarks/>
    public int SyncIntervalEffective {
        get {
            return this.syncIntervalEffectiveField;
        }
        set {
            this.syncIntervalEffectiveField = value;
        }
    }
    
    /// <remarks/>
    public System.DateTime LastLogin {
        get {
            return this.lastLoginField;
        }
        set {
            this.lastLoginField = value;
        }
    }
    
    /// <remarks/>
    public string LdapContext {
        get {
            return this.ldapContextField;
        }
        set {
            this.ldapContextField = value;
        }
    }
    
    /// <remarks/>
    public string GroupOrMemberList {
        get {
            return this.groupOrMemberListField;
        }
        set {
            this.groupOrMemberListField = value;
        }
    }
    
    /// <remarks/>
    public int MemberType {
        get {
            return this.memberTypeField;
        }
        set {
            this.memberTypeField = value;
        }
    }
    
    /// <remarks/>
    public int OwnediFolderCount {
        get {
            return this.ownediFolderCountField;
        }
        set {
            this.ownediFolderCountField = value;
        }
    }
    
    /// <remarks/>
    public int SharediFolderCount {
        get {
            return this.sharediFolderCountField;
        }
        set {
            this.sharediFolderCountField = value;
        }
    }
    
    /// <remarks/>
    public string DetailHomeServer {
        get {
            return this.detailHomeServerField;
        }
        set {
            this.detailHomeServerField = value;
        }
    }
    
    /// <remarks/>
    public string DetailNewHomeServer {
        get {
            return this.detailNewHomeServerField;
        }
        set {
            this.detailNewHomeServerField = value;
        }
    }
    
    /// <remarks/>
    public int DetailDataMovePercentage {
        get {
            return this.detailDataMovePercentageField;
        }
        set {
            this.detailDataMovePercentageField = value;
        }
    }
    
    /// <remarks/>
    public string DetailDataMoveStatus {
        get {
            return this.detailDataMoveStatusField;
        }
        set {
            this.detailDataMoveStatusField = value;
        }
    }
    
    /// <remarks/>
    public long GroupDiskQuota {
        get {
            return this.groupDiskQuotaField;
        }
        set {
            this.groupDiskQuotaField = value;
        }
    }
    
    /// <remarks/>
    public long SpaceUsedByGroup {
        get {
            return this.spaceUsedByGroupField;
        }
        set {
            this.spaceUsedByGroupField = value;
        }
    }
}

/*
/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/ifolder/webservice/")]
public partial class iFolderUserSet {
    
    private iFolderUser[] itemsField3;
    
    private int totalField3;
    
    /// <remarks/>
    public iFolderUser[] Items {
        get {
            return this.itemsField3;
        }
        set {
            this.itemsField3 = value;
        }
    }
    
    /// <remarks/>
    public int Total {
        get {
            return this.totalField3;
        }
        set {
            this.totalField3 = value;
        }
    }
}

*/
/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/ifolder/webservice/")]
public enum SearchProperty {
    
    /// <remarks/>
    UserName,
    
    /// <remarks/>
    FullName,
    
    /// <remarks/>
    LastName,
    
    /// <remarks/>
    FirstName,
    
    /// <remarks/>
    GroupOnly,
    
    /// <remarks/>
    HomeServerName,
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/ifolder/webservice/")]
public enum iFolderType {
    
    /// <remarks/>
    All,
    
    /// <remarks/>
    Orphaned,
}

/*
/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/ifolder/webservice/")]
public enum MemberRole {
    
    /// <remarks/>
    Any,
    
    /// <remarks/>
    Owner,
    
    /// <remarks/>
    Encrypted,
    
    /// <remarks/>
    Shared,
}

*/
/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/ifolder/webservice/")]
public partial class SystemPolicy {
    
    private long spaceLimitUserField;
    
    private long noiFoldersLimitField;
    
    private int syncIntervalField;
    
    private int encryptionStatusField;
    
    private int sharingStatusField;
    
    private long fileSizeLimitField;
    
    private string[] fileTypesIncludesField;
    
    private string[] fileTypesExcludesField;
    
    /// <remarks/>
    public long SpaceLimitUser {
        get {
            return this.spaceLimitUserField;
        }
        set {
            this.spaceLimitUserField = value;
        }
    }
    
    /// <remarks/>
    public long NoiFoldersLimit {
        get {
            return this.noiFoldersLimitField;
        }
        set {
            this.noiFoldersLimitField = value;
        }
    }
    
    /// <remarks/>
    public int SyncInterval {
        get {
            return this.syncIntervalField;
        }
        set {
            this.syncIntervalField = value;
        }
    }
    
    /// <remarks/>
    public int EncryptionStatus {
        get {
            return this.encryptionStatusField;
        }
        set {
            this.encryptionStatusField = value;
        }
    }
    
    /// <remarks/>
    public int SharingStatus {
        get {
            return this.sharingStatusField;
        }
        set {
            this.sharingStatusField = value;
        }
    }
    
    /// <remarks/>
    public long FileSizeLimit {
        get {
            return this.fileSizeLimitField;
        }
        set {
            this.fileSizeLimitField = value;
        }
    }
    
    /// <remarks/>
    public string[] FileTypesIncludes {
        get {
            return this.fileTypesIncludesField;
        }
        set {
            this.fileTypesIncludesField = value;
        }
    }
    
    /// <remarks/>
    public string[] FileTypesExcludes {
        get {
            return this.fileTypesExcludesField;
        }
        set {
            this.fileTypesExcludesField = value;
        }
    }
}

/*
/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/ifolder/webservice/")]
public partial class UserPolicy {
    
    private string userIDField26;
    
    private bool loginEnabledField;
    
    private int adminGroupRightsField;
    
    private long spaceLimitField;
    
    private int encryptionStatusField1;
    
    private int sharingStatusField1;
    
    private long spaceLimitEffectiveField;
    
    private long fileSizeLimitField1;
    
    private long noiFoldersLimitField1;
    
    private long fileSizeLimitEffectiveField;
    
    private long spaceUsedField;
    
    private long spaceAvailableField;
    
    private int syncIntervalField1;
    
    private int syncIntervalEffectiveField1;
    
    private string[] fileTypesIncludesField1;
    
    private string[] fileTypesIncludesEffectiveField;
    
    private string[] fileTypesExcludesField1;
    
    private string[] fileTypesExcludesEffectiveField;
    
    private bool isAdminField;
    
    /// <remarks/>
    public string UserID {
        get {
            return this.userIDField26;
        }
        set {
            this.userIDField26 = value;
        }
    }
    
    /// <remarks/>
    public bool LoginEnabled {
        get {
            return this.loginEnabledField;
        }
        set {
            this.loginEnabledField = value;
        }
    }
    
    /// <remarks/>
    public int AdminGroupRights {
        get {
            return this.adminGroupRightsField;
        }
        set {
            this.adminGroupRightsField = value;
        }
    }
    
    /// <remarks/>
    public long SpaceLimit {
        get {
            return this.spaceLimitField;
        }
        set {
            this.spaceLimitField = value;
        }
    }
    
    /// <remarks/>
    public int EncryptionStatus {
        get {
            return this.encryptionStatusField1;
        }
        set {
            this.encryptionStatusField1 = value;
        }
    }
    
    /// <remarks/>
    public int SharingStatus {
        get {
            return this.sharingStatusField1;
        }
        set {
            this.sharingStatusField1 = value;
        }
    }
    
    /// <remarks/>
    public long SpaceLimitEffective {
        get {
            return this.spaceLimitEffectiveField;
        }
        set {
            this.spaceLimitEffectiveField = value;
        }
    }
    
    /// <remarks/>
    public long FileSizeLimit {
        get {
            return this.fileSizeLimitField1;
        }
        set {
            this.fileSizeLimitField1 = value;
        }
    }
    
    /// <remarks/>
    public long NoiFoldersLimit {
        get {
            return this.noiFoldersLimitField1;
        }
        set {
            this.noiFoldersLimitField1 = value;
        }
    }
    
    /// <remarks/>
    public long FileSizeLimitEffective {
        get {
            return this.fileSizeLimitEffectiveField;
        }
        set {
            this.fileSizeLimitEffectiveField = value;
        }
    }
    
    /// <remarks/>
    public long SpaceUsed {
        get {
            return this.spaceUsedField;
        }
        set {
            this.spaceUsedField = value;
        }
    }
    
    /// <remarks/>
    public long SpaceAvailable {
        get {
            return this.spaceAvailableField;
        }
        set {
            this.spaceAvailableField = value;
        }
    }
    
    /// <remarks/>
    public int SyncInterval {
        get {
            return this.syncIntervalField1;
        }
        set {
            this.syncIntervalField1 = value;
        }
    }
    
    /// <remarks/>
    public int SyncIntervalEffective {
        get {
            return this.syncIntervalEffectiveField1;
        }
        set {
            this.syncIntervalEffectiveField1 = value;
        }
    }
    
    /// <remarks/>
    public string[] FileTypesIncludes {
        get {
            return this.fileTypesIncludesField1;
        }
        set {
            this.fileTypesIncludesField1 = value;
        }
    }
    
    /// <remarks/>
    public string[] FileTypesIncludesEffective {
        get {
            return this.fileTypesIncludesEffectiveField;
        }
        set {
            this.fileTypesIncludesEffectiveField = value;
        }
    }
    
    /// <remarks/>
    public string[] FileTypesExcludes {
        get {
            return this.fileTypesExcludesField1;
        }
        set {
            this.fileTypesExcludesField1 = value;
        }
    }
    
    /// <remarks/>
    public string[] FileTypesExcludesEffective {
        get {
            return this.fileTypesExcludesEffectiveField;
        }
        set {
            this.fileTypesExcludesEffectiveField = value;
        }
    }
    
    /// <remarks/>
    public bool isAdmin {
        get {
            return this.isAdminField;
        }
        set {
            this.isAdminField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/ifolder/webservice/")]
public partial class iFolderPolicy {
    
    private string iFolderIDField5;
    
    private bool lockedField;
    
    private long spaceLimitField1;
    
    private long spaceLimitEffectiveField1;
    
    private long spaceUsedField1;
    
    private long spaceAvailableField1;
    
    private int syncIntervalField2;
    
    private int syncIntervalEffectiveField2;
    
    private int sharingStatusField2;
    
    private string[] fileTypesIncludesField2;
    
    private string[] fileTypesIncludesEffectiveField1;
    
    private string[] fileTypesExcludesField2;
    
    private string[] fileTypesExcludesEffectiveField1;
    
    private long fileSizeLimitField2;
    
    private long fileSizeLimitEffectiveField1;
    
    private int adminGroupRightsField1;
    
    /// <remarks/>
    public string iFolderID {
        get {
            return this.iFolderIDField5;
        }
        set {
            this.iFolderIDField5 = value;
        }
    }
    
    /// <remarks/>
    public bool Locked {
        get {
            return this.lockedField;
        }
        set {
            this.lockedField = value;
        }
    }
    
    /// <remarks/>
    public long SpaceLimit {
        get {
            return this.spaceLimitField1;
        }
        set {
            this.spaceLimitField1 = value;
        }
    }
    
    /// <remarks/>
    public long SpaceLimitEffective {
        get {
            return this.spaceLimitEffectiveField1;
        }
        set {
            this.spaceLimitEffectiveField1 = value;
        }
    }
    
    /// <remarks/>
    public long SpaceUsed {
        get {
            return this.spaceUsedField1;
        }
        set {
            this.spaceUsedField1 = value;
        }
    }
    
    /// <remarks/>
    public long SpaceAvailable {
        get {
            return this.spaceAvailableField1;
        }
        set {
            this.spaceAvailableField1 = value;
        }
    }
    
    /// <remarks/>
    public int SyncInterval {
        get {
            return this.syncIntervalField2;
        }
        set {
            this.syncIntervalField2 = value;
        }
    }
    
    /// <remarks/>
    public int SyncIntervalEffective {
        get {
            return this.syncIntervalEffectiveField2;
        }
        set {
            this.syncIntervalEffectiveField2 = value;
        }
    }
    
    /// <remarks/>
    public int SharingStatus {
        get {
            return this.sharingStatusField2;
        }
        set {
            this.sharingStatusField2 = value;
        }
    }
    
    /// <remarks/>
    public string[] FileTypesIncludes {
        get {
            return this.fileTypesIncludesField2;
        }
        set {
            this.fileTypesIncludesField2 = value;
        }
    }
    
    /// <remarks/>
    public string[] FileTypesIncludesEffective {
        get {
            return this.fileTypesIncludesEffectiveField1;
        }
        set {
            this.fileTypesIncludesEffectiveField1 = value;
        }
    }
    
    /// <remarks/>
    public string[] FileTypesExcludes {
        get {
            return this.fileTypesExcludesField2;
        }
        set {
            this.fileTypesExcludesField2 = value;
        }
    }
    
    /// <remarks/>
    public string[] FileTypesExcludesEffective {
        get {
            return this.fileTypesExcludesEffectiveField1;
        }
        set {
            this.fileTypesExcludesEffectiveField1 = value;
        }
    }
    
    /// <remarks/>
    public long FileSizeLimit {
        get {
            return this.fileSizeLimitField2;
        }
        set {
            this.fileSizeLimitField2 = value;
        }
    }
    
    /// <remarks/>
    public long FileSizeLimitEffective {
        get {
            return this.fileSizeLimitEffectiveField1;
        }
        set {
            this.fileSizeLimitEffectiveField1 = value;
        }
    }
    
    /// <remarks/>
    public int AdminGroupRights {
        get {
            return this.adminGroupRightsField1;
        }
        set {
            this.adminGroupRightsField1 = value;
        }
    }
}

*/
/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/ifolder/webservice/")]
public partial class IdentityPolicy {
    
    private bool externalIdentitiesField;
    
    private bool canCreateField;
    
    private bool canDeleteField;
    
    private bool canModifyField;
    
    private string nameField14;
    
    private string descriptionField6;
    
    /// <remarks/>
    public bool ExternalIdentities {
        get {
            return this.externalIdentitiesField;
        }
        set {
            this.externalIdentitiesField = value;
        }
    }
    
    /// <remarks/>
    public bool CanCreate {
        get {
            return this.canCreateField;
        }
        set {
            this.canCreateField = value;
        }
    }
    
    /// <remarks/>
    public bool CanDelete {
        get {
            return this.canDeleteField;
        }
        set {
            this.canDeleteField = value;
        }
    }
    
    /// <remarks/>
    public bool CanModify {
        get {
            return this.canModifyField;
        }
        set {
            this.canModifyField = value;
        }
    }
    
    /// <remarks/>
    public string Name {
        get {
            return this.nameField14;
        }
        set {
            this.nameField14 = value;
        }
    }
    
    /// <remarks/>
    public string Description {
        get {
            return this.descriptionField6;
        }
        set {
            this.descriptionField6 = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/ifolder/webservice/")]
public partial class LastSyncInfo {
    
    private string startTimeField;
    
    private string endTimeField;
    
    private int membersProcessedField;
    
    private int membersAddedField;
    
    private int membersUpdatedField;
    
    private int membersDeletedField;
    
    private int membersDisabledField;
    
    private int reportedErrorsField;
    
    private string[] messagesField;
    
    /// <remarks/>
    public string StartTime {
        get {
            return this.startTimeField;
        }
        set {
            this.startTimeField = value;
        }
    }
    
    /// <remarks/>
    public string EndTime {
        get {
            return this.endTimeField;
        }
        set {
            this.endTimeField = value;
        }
    }
    
    /// <remarks/>
    public int MembersProcessed {
        get {
            return this.membersProcessedField;
        }
        set {
            this.membersProcessedField = value;
        }
    }
    
    /// <remarks/>
    public int MembersAdded {
        get {
            return this.membersAddedField;
        }
        set {
            this.membersAddedField = value;
        }
    }
    
    /// <remarks/>
    public int MembersUpdated {
        get {
            return this.membersUpdatedField;
        }
        set {
            this.membersUpdatedField = value;
        }
    }
    
    /// <remarks/>
    public int MembersDeleted {
        get {
            return this.membersDeletedField;
        }
        set {
            this.membersDeletedField = value;
        }
    }
    
    /// <remarks/>
    public int MembersDisabled {
        get {
            return this.membersDisabledField;
        }
        set {
            this.membersDisabledField = value;
        }
    }
    
    /// <remarks/>
    public int ReportedErrors {
        get {
            return this.reportedErrorsField;
        }
        set {
            this.reportedErrorsField = value;
        }
    }
    
    /// <remarks/>
    public string[] Messages {
        get {
            return this.messagesField;
        }
        set {
            this.messagesField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/ifolder/webservice/")]
public partial class SyncServiceInfo {
    
    private string upSinceField;
    
    private int cyclesField;
    
    private string providerField;
    
    private int synchronizationIntervalField;
    
    private int deleteMemberGracePeriodField;
    
    private string statusField;
    
    /// <remarks/>
    public string UpSince {
        get {
            return this.upSinceField;
        }
        set {
            this.upSinceField = value;
        }
    }
    
    /// <remarks/>
    public int Cycles {
        get {
            return this.cyclesField;
        }
        set {
            this.cyclesField = value;
        }
    }
    
    /// <remarks/>
    public string Provider {
        get {
            return this.providerField;
        }
        set {
            this.providerField = value;
        }
    }
    
    /// <remarks/>
    public int SynchronizationInterval {
        get {
            return this.synchronizationIntervalField;
        }
        set {
            this.synchronizationIntervalField = value;
        }
    }
    
    /// <remarks/>
    public int DeleteMemberGracePeriod {
        get {
            return this.deleteMemberGracePeriodField;
        }
        set {
            this.deleteMemberGracePeriodField = value;
        }
    }
    
    /// <remarks/>
    public string Status {
        get {
            return this.statusField;
        }
        set {
            this.statusField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/ifolder/webservice/")]
public enum LoggerType {
    
    /// <remarks/>
    RootLogger,
    
    /// <remarks/>
    AccessLogger,
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/ifolder/webservice/")]
public partial class LdapInfo {
    
    private string hostField;
    
    private string searchContextsField;
    
    private string proxyDNField;
    
    private string masterURLField;
    
    private string proxyPasswordField;
    
    private bool sSLField;
    
    /// <remarks/>
    public string Host {
        get {
            return this.hostField;
        }
        set {
            this.hostField = value;
        }
    }
    
    /// <remarks/>
    public string SearchContexts {
        get {
            return this.searchContextsField;
        }
        set {
            this.searchContextsField = value;
        }
    }
    
    /// <remarks/>
    public string ProxyDN {
        get {
            return this.proxyDNField;
        }
        set {
            this.proxyDNField = value;
        }
    }
    
    /// <remarks/>
    public string MasterURL {
        get {
            return this.masterURLField;
        }
        set {
            this.masterURLField = value;
        }
    }
    
    /// <remarks/>
    public string ProxyPassword {
        get {
            return this.proxyPasswordField;
        }
        set {
            this.proxyPasswordField = value;
        }
    }
    
    /// <remarks/>
    public bool SSL {
        get {
            return this.sSLField;
        }
        set {
            this.sSLField = value;
        }
    }
}

/*
/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/ifolder/webservice/")]
public partial class Status {
    
    private StatusCodes statusCodeField;
    
    private string domainIDField1;
    
    private string userIDField28;
    
    private string userNameField2;
    
    private string distinguishedUserNameField;
    
    private string exceptionMessageField;
    
    private int totalGraceLoginsField;
    
    private int remainingGraceLoginsField;
    
    private int daysUntilPasswordExpiresField;
    
    /// <remarks/>
    public StatusCodes statusCode {
        get {
            return this.statusCodeField;
        }
        set {
            this.statusCodeField = value;
        }
    }
    
    /// <remarks/>
    public string DomainID {
        get {
            return this.domainIDField1;
        }
        set {
            this.domainIDField1 = value;
        }
    }
    
    /// <remarks/>
    public string UserID {
        get {
            return this.userIDField28;
        }
        set {
            this.userIDField28 = value;
        }
    }
    
    /// <remarks/>
    public string UserName {
        get {
            return this.userNameField2;
        }
        set {
            this.userNameField2 = value;
        }
    }
    
    /// <remarks/>
    public string DistinguishedUserName {
        get {
            return this.distinguishedUserNameField;
        }
        set {
            this.distinguishedUserNameField = value;
        }
    }
    
    /// <remarks/>
    public string ExceptionMessage {
        get {
            return this.exceptionMessageField;
        }
        set {
            this.exceptionMessageField = value;
        }
    }
    
    /// <remarks/>
    public int TotalGraceLogins {
        get {
            return this.totalGraceLoginsField;
        }
        set {
            this.totalGraceLoginsField = value;
        }
    }
    
    /// <remarks/>
    public int RemainingGraceLogins {
        get {
            return this.remainingGraceLoginsField;
        }
        set {
            this.remainingGraceLoginsField = value;
        }
    }
    
    /// <remarks/>
    public int DaysUntilPasswordExpires {
        get {
            return this.daysUntilPasswordExpiresField;
        }
        set {
            this.daysUntilPasswordExpiresField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/ifolder/webservice/")]
public enum StatusCodes {
    
    /// <remarks/>
    Success,
    
    /// <remarks/>
    SuccessInGrace,
    
    /// <remarks/>
    InvalidCertificate,
    
    /// <remarks/>
    UnknownUser,
    
    /// <remarks/>
    AmbiguousUser,
    
    /// <remarks/>
    InvalidCredentials,
    
    /// <remarks/>
    InvalidPassword,
    
    /// <remarks/>
    AccountDisabled,
    
    /// <remarks/>
    AccountLockout,
    
    /// <remarks/>
    SimiasLoginDisabled,
    
    /// <remarks/>
    UnknownDomain,
    
    /// <remarks/>
    InternalException,
    
    /// <remarks/>
    MethodNotSupported,
    
    /// <remarks/>
    Timeout,
    
    /// <remarks/>
    OlderVersion,
    
    /// <remarks/>
    ServerOld,
    
    /// <remarks/>
    UpgradeNeeded,
    
    /// <remarks/>
    PassPhraseNotSet,
    
    /// <remarks/>
    PassPhraseInvalid,
    
    /// <remarks/>
    UserAlreadyMoved,
    
    /// <remarks/>
    ServerUnAvailable,
    
    /// <remarks/>
    Unknown,
}

*/
public partial class GetSystemCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetSystemCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public iFolderSystem Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((iFolderSystem)(this.results[0]));
        }
    }
}

public delegate void GetSystemCompletedEventHandler(object sender, GetSystemCompletedEventArgs args);

public partial class GetHomeServerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetHomeServerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public iFolderServer Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((iFolderServer)(this.results[0]));
        }
    }
}

public delegate void GetHomeServerCompletedEventHandler(object sender, GetHomeServerCompletedEventArgs args);

public partial class GetHomeServerForUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetHomeServerForUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

public delegate void GetHomeServerForUserCompletedEventHandler(object sender, GetHomeServerForUserCompletedEventArgs args);

public partial class GetHomeServerURLForUserIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetHomeServerURLForUserIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

public delegate void GetHomeServerURLForUserIDCompletedEventHandler(object sender, GetHomeServerURLForUserIDCompletedEventArgs args);

public partial class IsUserOrSystemEncryptionEnforcedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal IsUserOrSystemEncryptionEnforcedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

public delegate void IsUserOrSystemEncryptionEnforcedCompletedEventHandler(object sender, IsUserOrSystemEncryptionEnforcedCompletedEventArgs args);

public partial class GetiFolderLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetiFolderLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

public delegate void GetiFolderLocationCompletedEventHandler(object sender, GetiFolderLocationCompletedEventArgs args);

public partial class GetOrphanediFoldersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetOrphanediFoldersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public iFolderSet Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((iFolderSet)(this.results[0]));
        }
    }
}

public delegate void GetOrphanediFoldersCompletedEventHandler(object sender, GetOrphanediFoldersCompletedEventArgs args);

public partial class GetiFolderLimitPolicyStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetiFolderLimitPolicyStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public int Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((int)(this.results[0]));
        }
    }
}

public delegate void GetiFolderLimitPolicyStatusCompletedEventHandler(object sender, GetiFolderLimitPolicyStatusCompletedEventArgs args);

public partial class IsOrphanediFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal IsOrphanediFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

public delegate void IsOrphanediFolderCompletedEventHandler(object sender, IsOrphanediFolderCompletedEventArgs args);

public partial class GetShortenedNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetShortenedNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

public delegate void GetShortenedNameCompletedEventHandler(object sender, GetShortenedNameCompletedEventArgs args);

public partial class IsGroupIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal IsGroupIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

public delegate void IsGroupIdCompletedEventHandler(object sender, IsGroupIdCompletedEventArgs args);

public partial class GetSharingStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetSharingStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public int Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((int)(this.results[0]));
        }
    }
}

public delegate void GetSharingStatusCompletedEventHandler(object sender, GetSharingStatusCompletedEventArgs args);

public delegate void DisableSystemPastSharingCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs args);

public delegate void DisableUserPastSharingCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs args);

public delegate void DisableiFolderPastSharingCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs args);

public partial class AddDataStoreCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal AddDataStoreCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public int Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((int)(this.results[0]));
        }
    }
}

public delegate void AddDataStoreCompletedEventHandler(object sender, AddDataStoreCompletedEventArgs args);

public partial class ModifyDataStoreCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal ModifyDataStoreCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

public delegate void ModifyDataStoreCompletedEventHandler(object sender, ModifyDataStoreCompletedEventArgs args);

public partial class DeleteDataStoreCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal DeleteDataStoreCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

public delegate void DeleteDataStoreCompletedEventHandler(object sender, DeleteDataStoreCompletedEventArgs args);

public partial class GetVolumesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetVolumesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public VolumesList Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((VolumesList)(this.results[0]));
        }
    }
}

public delegate void GetVolumesCompletedEventHandler(object sender, GetVolumesCompletedEventArgs args);

public partial class GetReportsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetReportsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public string[] Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string[])(this.results[0]));
        }
    }
}

public delegate void GetReportsCompletedEventHandler(object sender, GetReportsCompletedEventArgs args);

public partial class GetServerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetServerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public iFolderServer Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((iFolderServer)(this.results[0]));
        }
    }
}

public delegate void GetServerCompletedEventHandler(object sender, GetServerCompletedEventArgs args);

public partial class GetServersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetServersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public iFolderServer[] Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((iFolderServer[])(this.results[0]));
        }
    }
}

public delegate void GetServersCompletedEventHandler(object sender, GetServersCompletedEventArgs args);

public partial class GetServersByNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetServersByNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public iFolderServerSet Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((iFolderServerSet)(this.results[0]));
        }
    }
}

public delegate void GetServersByNameCompletedEventHandler(object sender, GetServersByNameCompletedEventArgs args);

public delegate void DeleteiFolderCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs args);

public partial class RestoreiFolderDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal RestoreiFolderDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public int Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((int)(this.results[0]));
        }
    }
}

public delegate void RestoreiFolderDataCompletedEventHandler(object sender, RestoreiFolderDataCompletedEventArgs args);

public partial class GetRestoreStatusForCollectionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetRestoreStatusForCollectionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public int Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((int)(this.results[0]));
        }
    }
    
    public int totalcount {
        get {
            this.RaiseExceptionIfNecessary();
            return ((int)(this.results[1]));
        }
    }
    
    public int finishedcount {
        get {
            this.RaiseExceptionIfNecessary();
            return ((int)(this.results[2]));
        }
    }
}

public delegate void GetRestoreStatusForCollectionCompletedEventHandler(object sender, GetRestoreStatusForCollectionCompletedEventArgs args);

public partial class GetiFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetiFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public iFolder Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((iFolder)(this.results[0]));
        }
    }
}

public delegate void GetiFolderCompletedEventHandler(object sender, GetiFolderCompletedEventArgs args);

public partial class GetiFolderDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetiFolderDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public iFolderDetails Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((iFolderDetails)(this.results[0]));
        }
    }
}

public delegate void GetiFolderDetailsCompletedEventHandler(object sender, GetiFolderDetailsCompletedEventArgs args);

public delegate void SetiFolderDescriptionCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs args);

public delegate void PublishiFolderCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs args);

public partial class GetChangesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetChangesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public ChangeEntrySet Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((ChangeEntrySet)(this.results[0]));
        }
    }
}

public delegate void GetChangesCompletedEventHandler(object sender, GetChangesCompletedEventArgs args);

public partial class TrimUrlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal TrimUrlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

public delegate void TrimUrlCompletedEventHandler(object sender, TrimUrlCompletedEventArgs args);

public partial class GetAuthenticatedUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetAuthenticatedUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public iFolderUser Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((iFolderUser)(this.results[0]));
        }
    }
}

public delegate void GetAuthenticatedUserCompletedEventHandler(object sender, GetAuthenticatedUserCompletedEventArgs args);

public delegate void SetMemberRightsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs args);

public delegate void AddMemberCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs args);

public delegate void RemoveMemberCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs args);

public delegate void SetiFolderOwnerCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs args);

public partial class GetMembersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetMembersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public iFolderUserSet Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((iFolderUserSet)(this.results[0]));
        }
    }
}

public delegate void GetMembersCompletedEventHandler(object sender, GetMembersCompletedEventArgs args);

public partial class IsPassPhraseSetForUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal IsPassPhraseSetForUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

public delegate void IsPassPhraseSetForUserCompletedEventHandler(object sender, IsPassPhraseSetForUserCompletedEventArgs args);

public partial class GetUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public iFolderUserSet Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((iFolderUserSet)(this.results[0]));
        }
    }
}

public delegate void GetUsersCompletedEventHandler(object sender, GetUsersCompletedEventArgs args);

public delegate void ProvisionUsersToServersCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs args);

public delegate void ProvisionUsersToServerCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs args);

public partial class GetServerProvisioningListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetServerProvisioningListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public string[] Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string[])(this.results[0]));
        }
    }
}

public delegate void GetServerProvisioningListCompletedEventHandler(object sender, GetServerProvisioningListCompletedEventArgs args);

public partial class GetSimiasRequiresSSLStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetSimiasRequiresSSLStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

public delegate void GetSimiasRequiresSSLStatusCompletedEventHandler(object sender, GetSimiasRequiresSSLStatusCompletedEventArgs args);

public partial class SetIPDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal SetIPDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

public delegate void SetIPDetailsCompletedEventHandler(object sender, SetIPDetailsCompletedEventArgs args);

public partial class GetUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public iFolderUser Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((iFolderUser)(this.results[0]));
        }
    }
}

public delegate void GetUserCompletedEventHandler(object sender, GetUserCompletedEventArgs args);

public partial class GetUserDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetUserDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public iFolderUserDetails Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((iFolderUserDetails)(this.results[0]));
        }
    }
}

public delegate void GetUserDetailsCompletedEventHandler(object sender, GetUserDetailsCompletedEventArgs args);

public partial class GetUsersBySearchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetUsersBySearchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public iFolderUserSet Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((iFolderUserSet)(this.results[0]));
        }
    }
}

public delegate void GetUsersBySearchCompletedEventHandler(object sender, GetUsersBySearchCompletedEventArgs args);

public partial class GetMonitoredGroupsBySearchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetMonitoredGroupsBySearchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public iFolderUserSet Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((iFolderUserSet)(this.results[0]));
        }
    }
}

public delegate void GetMonitoredGroupsBySearchCompletedEventHandler(object sender, GetMonitoredGroupsBySearchCompletedEventArgs args);

public partial class GetReprovisionUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetReprovisionUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public iFolderUserSet Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((iFolderUserSet)(this.results[0]));
        }
    }
}

public delegate void GetReprovisionUsersCompletedEventHandler(object sender, GetReprovisionUsersCompletedEventArgs args);

public partial class CreateiFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal CreateiFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public iFolder Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((iFolder)(this.results[0]));
        }
    }
}

public delegate void CreateiFolderCompletedEventHandler(object sender, CreateiFolderCompletedEventArgs args);

public partial class CreateiFolderWithIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal CreateiFolderWithIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public iFolder Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((iFolder)(this.results[0]));
        }
    }
}

public delegate void CreateiFolderWithIDCompletedEventHandler(object sender, CreateiFolderWithIDCompletedEventArgs args);

public partial class CreateEncryptediFolderWithIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal CreateEncryptediFolderWithIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public iFolder Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((iFolder)(this.results[0]));
        }
    }
}

public delegate void CreateEncryptediFolderWithIDCompletedEventHandler(object sender, CreateEncryptediFolderWithIDCompletedEventArgs args);

public partial class GetiFoldersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetiFoldersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public iFolderSet Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((iFolderSet)(this.results[0]));
        }
    }
}

public delegate void GetiFoldersCompletedEventHandler(object sender, GetiFoldersCompletedEventArgs args);

public partial class GetiFoldersByMemberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetiFoldersByMemberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public iFolderSet Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((iFolderSet)(this.results[0]));
        }
    }
}

public delegate void GetiFoldersByMemberCompletedEventHandler(object sender, GetiFoldersByMemberCompletedEventArgs args);

public partial class GetiFoldersByNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetiFoldersByNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public iFolderSet Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((iFolderSet)(this.results[0]));
        }
    }
}

public delegate void GetiFoldersByNameCompletedEventHandler(object sender, GetiFoldersByNameCompletedEventArgs args);

public partial class GetSystemSettingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetSystemSettingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

public delegate void GetSystemSettingCompletedEventHandler(object sender, GetSystemSettingCompletedEventArgs args);

public delegate void SetSystemSettingCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs args);

public partial class GetUserSettingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetUserSettingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

public delegate void GetUserSettingCompletedEventHandler(object sender, GetUserSettingCompletedEventArgs args);

public delegate void SetUserSettingCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs args);

public partial class GetiFolderSettingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetiFolderSettingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

public delegate void GetiFolderSettingCompletedEventHandler(object sender, GetiFolderSettingCompletedEventArgs args);

public delegate void SetiFolderSettingCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs args);

public partial class CreateUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal CreateUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public iFolderUser Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((iFolderUser)(this.results[0]));
        }
    }
}

public delegate void CreateUserCompletedEventHandler(object sender, CreateUserCompletedEventArgs args);

public partial class DeleteUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal DeleteUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

public delegate void DeleteUserCompletedEventHandler(object sender, DeleteUserCompletedEventArgs args);

public partial class SetUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal SetUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public iFolderUser Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((iFolderUser)(this.results[0]));
        }
    }
}

public delegate void SetUserCompletedEventHandler(object sender, SetUserCompletedEventArgs args);

public partial class SetPasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal SetPasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

public delegate void SetPasswordCompletedEventHandler(object sender, SetPasswordCompletedEventArgs args);

public delegate void SetSystemCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs args);

public partial class SetSimiasSSLStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal SetSimiasSSLStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

public delegate void SetSimiasSSLStatusCompletedEventHandler(object sender, SetSimiasSSLStatusCompletedEventArgs args);

public delegate void AddAdministratorCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs args);

public delegate void AddGroupAdministratorCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs args);

public delegate void RemoveGroupAdministratorCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs args);

public partial class DiskQuotaPolicyChangeAllowedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal DiskQuotaPolicyChangeAllowedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

public delegate void DiskQuotaPolicyChangeAllowedCompletedEventHandler(object sender, DiskQuotaPolicyChangeAllowedCompletedEventArgs args);

public partial class GetUserSystemRightsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetUserSystemRightsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public int Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((int)(this.results[0]));
        }
    }
}

public delegate void GetUserSystemRightsCompletedEventHandler(object sender, GetUserSystemRightsCompletedEventArgs args);

public partial class GetUserGroupRightsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetUserGroupRightsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public int Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((int)(this.results[0]));
        }
    }
}

public delegate void GetUserGroupRightsCompletedEventHandler(object sender, GetUserGroupRightsCompletedEventArgs args);

public partial class GetMonitoredGroupsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetMonitoredGroupsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public string[] Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string[])(this.results[0]));
        }
    }
}

public delegate void GetMonitoredGroupsCompletedEventHandler(object sender, GetMonitoredGroupsCompletedEventArgs args);

public partial class GetMonitoredGroupNamesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetMonitoredGroupNamesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public string[] Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string[])(this.results[0]));
        }
    }
}

public delegate void GetMonitoredGroupNamesCompletedEventHandler(object sender, GetMonitoredGroupNamesCompletedEventArgs args);

public partial class GetAggregateDiskQuotaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetAggregateDiskQuotaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public long Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((long)(this.results[0]));
        }
    }
}

public delegate void GetAggregateDiskQuotaCompletedEventHandler(object sender, GetAggregateDiskQuotaCompletedEventArgs args);

public partial class SpaceUsedByGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal SpaceUsedByGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public long Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((long)(this.results[0]));
        }
    }
}

public delegate void SpaceUsedByGroupCompletedEventHandler(object sender, SpaceUsedByGroupCompletedEventArgs args);

public partial class SetAggregateDiskQuotaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal SetAggregateDiskQuotaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

public delegate void SetAggregateDiskQuotaCompletedEventHandler(object sender, SetAggregateDiskQuotaCompletedEventArgs args);

public delegate void RemoveAdministratorCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs args);

public partial class GetAdministratorsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetAdministratorsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public iFolderUserSet Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((iFolderUserSet)(this.results[0]));
        }
    }
}

public delegate void GetAdministratorsCompletedEventHandler(object sender, GetAdministratorsCompletedEventArgs args);

public partial class GetSystemPolicyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetSystemPolicyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public SystemPolicy Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((SystemPolicy)(this.results[0]));
        }
    }
}

public delegate void GetSystemPolicyCompletedEventHandler(object sender, GetSystemPolicyCompletedEventArgs args);

public partial class GetGroupSharingPolicyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetGroupSharingPolicyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public int Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((int)(this.results[0]));
        }
    }
}

public delegate void GetGroupSharingPolicyCompletedEventHandler(object sender, GetGroupSharingPolicyCompletedEventArgs args);

public partial class GetGroupEncryptionPolicyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetGroupEncryptionPolicyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public int Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((int)(this.results[0]));
        }
    }
}

public delegate void GetGroupEncryptionPolicyCompletedEventHandler(object sender, GetGroupEncryptionPolicyCompletedEventArgs args);

public delegate void SetSystemPolicyCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs args);

public partial class GetUserPolicyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetUserPolicyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public UserPolicy Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((UserPolicy)(this.results[0]));
        }
    }
}

public delegate void GetUserPolicyCompletedEventHandler(object sender, GetUserPolicyCompletedEventArgs args);

public delegate void SetUserPolicyCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs args);

public partial class GetiFolderPolicyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetiFolderPolicyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public iFolderPolicy Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((iFolderPolicy)(this.results[0]));
        }
    }
}

public delegate void GetiFolderPolicyCompletedEventHandler(object sender, GetiFolderPolicyCompletedEventArgs args);

public delegate void SetiFolderPolicyCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs args);

public partial class GetIdentityPolicyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetIdentityPolicyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public IdentityPolicy Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((IdentityPolicy)(this.results[0]));
        }
    }
}

public delegate void GetIdentityPolicyCompletedEventHandler(object sender, GetIdentityPolicyCompletedEventArgs args);

public delegate void IdentitySyncDisableServiceCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs args);

public partial class IdentitySyncGetLastInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal IdentitySyncGetLastInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public LastSyncInfo Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((LastSyncInfo)(this.results[0]));
        }
    }
}

public delegate void IdentitySyncGetLastInfoCompletedEventHandler(object sender, IdentitySyncGetLastInfoCompletedEventArgs args);

public partial class IdentitySyncGetServiceInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal IdentitySyncGetServiceInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public SyncServiceInfo Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((SyncServiceInfo)(this.results[0]));
        }
    }
}

public delegate void IdentitySyncGetServiceInfoCompletedEventHandler(object sender, IdentitySyncGetServiceInfoCompletedEventArgs args);

public delegate void IdentitySyncSetDeleteMemberGracePeriodCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs args);

public delegate void IdentitySyncSetIntervalCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs args);

public delegate void IdentitySyncNowCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs args);

public partial class GetLogLevelsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetLogLevelsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public string[] Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string[])(this.results[0]));
        }
    }
}

public delegate void GetLogLevelsCompletedEventHandler(object sender, GetLogLevelsCompletedEventArgs args);

public delegate void SetLogLevelCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs args);

public partial class GetLdapDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetLdapDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public LdapInfo Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((LdapInfo)(this.results[0]));
        }
    }
}

public delegate void GetLdapDetailsCompletedEventHandler(object sender, GetLdapDetailsCompletedEventArgs args);

public delegate void SetLdapDetailsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs args);

public partial class GetSharingPolicyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetSharingPolicyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

public delegate void GetSharingPolicyCompletedEventHandler(object sender, GetSharingPolicyCompletedEventArgs args);

public partial class GetUserGroupSharingPolicyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetUserGroupSharingPolicyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public int Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((int)(this.results[0]));
        }
    }
}

public delegate void GetUserGroupSharingPolicyCompletedEventHandler(object sender, GetUserGroupSharingPolicyCompletedEventArgs args);

public partial class ModifyStoreCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal ModifyStoreCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

public delegate void ModifyStoreCompletedEventHandler(object sender, ModifyStoreCompletedEventArgs args);

public partial class DeleteDataPathCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal DeleteDataPathCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

public delegate void DeleteDataPathCompletedEventHandler(object sender, DeleteDataPathCompletedEventArgs args);

/*
public partial class GetRAListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetRAListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public string[] Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string[])(this.results[0]));
        }
    }
}

public delegate void GetRAListCompletedEventHandler(object sender, GetRAListCompletedEventArgs args);

public partial class GetRACertificateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetRACertificateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public byte[] Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((byte[])(this.results[0]));
        }
    }
}

public delegate void GetRACertificateCompletedEventHandler(object sender, GetRACertificateCompletedEventArgs args);

public partial class IsPassPhraseSetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal IsPassPhraseSetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

public delegate void IsPassPhraseSetCompletedEventHandler(object sender, IsPassPhraseSetCompletedEventArgs args);

public partial class ValidatePassPhraseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal ValidatePassPhraseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public Status Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((Status)(this.results[0]));
        }
    }
}

public delegate void ValidatePassPhraseCompletedEventHandler(object sender, ValidatePassPhraseCompletedEventArgs args);

public delegate void SetPassPhraseCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs args);

*/
public partial class ChangePasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal ChangePasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public int Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((int)(this.results[0]));
        }
    }
}

public delegate void ChangePasswordCompletedEventHandler(object sender, ChangePasswordCompletedEventArgs args);

public delegate void DisableGroupPastSharingCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs args);

public partial class GetGroupIDsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetGroupIDsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public string[] Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string[])(this.results[0]));
        }
    }
}

public delegate void GetGroupIDsCompletedEventHandler(object sender, GetGroupIDsCompletedEventArgs args);

public delegate void ReProvisionUsersToServerCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs args);
