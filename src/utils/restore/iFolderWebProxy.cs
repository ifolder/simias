// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 1.1.4322.2032
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

// 
// This source code was auto-generated by Mono Web Services Description Language Utility
//


/// <remarks/>
/// <remarks>
///iFolder Web Service
///</remarks>
[System.Web.Services.WebServiceBinding(Name="iFolderWebSoap", Namespace="http://novell.com/ifolder/webservice/")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public class iFolderWeb : System.Web.Services.Protocols.SoapHttpClientProtocol {
    
    public iFolderWeb() {
        this.Url = "http://164.99.102.189/simias10/iFolderWeb.asmx";
    }
    
    /// <remarks>
///Get information about the iFolder system.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetSystem", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public iFolderSystem GetSystem() {
        object[] results = this.Invoke("GetSystem", new object[0]);
        return ((iFolderSystem)(results[0]));
    }
    
    public System.IAsyncResult BeginGetSystem(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetSystem", new object[0], callback, asyncState);
    }
    
    public iFolderSystem EndGetSystem(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((iFolderSystem)(results[0]));
    }
    
    /// <remarks>
///Get information about the authenticated user's home iFolder server.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetHomeServer", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public iFolderServer GetHomeServer() {
        object[] results = this.Invoke("GetHomeServer", new object[0]);
        return ((iFolderServer)(results[0]));
    }
    
    public System.IAsyncResult BeginGetHomeServer(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetHomeServer", new object[0], callback, asyncState);
    }
    
    public iFolderServer EndGetHomeServer(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((iFolderServer)(results[0]));
    }
    
    /// <remarks>
///Get information about all the iFolder servers.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetServers", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public iFolderServer[] GetServers() {
        object[] results = this.Invoke("GetServers", new object[0]);
        return ((iFolderServer[])(results[0]));
    }
    
    public System.IAsyncResult BeginGetServers(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetServers", new object[0], callback, asyncState);
    }
    
    public iFolderServer[] EndGetServers(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((iFolderServer[])(results[0]));
    }
    
    /// <remarks>
///Get information about iFolder Servers identified by a search on name.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetServersByName", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public iFolderServerSet GetServersByName(SearchOperation operation, string pattern, int index, int count) {
        object[] results = this.Invoke("GetServersByName", new object[] {
            operation,
            pattern,
            index,
            count});
        return ((iFolderServerSet)(results[0]));
    }
    
    public System.IAsyncResult BeginGetServersByName(SearchOperation operation, string pattern, int index, int count, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetServersByName", new object[] {
            operation,
            pattern,
            index,
            count}, callback, asyncState);
    }
    
    public iFolderServerSet EndGetServersByName(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((iFolderServerSet)(results[0]));
    }
    
    /// <remarks>
///Delete an iFolder
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/DeleteiFolder", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void DeleteiFolder(string ifolderID) {
        this.Invoke("DeleteiFolder", new object[] {
            ifolderID});
    }
    
    public System.IAsyncResult BeginDeleteiFolder(string ifolderID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("DeleteiFolder", new object[] {
            ifolderID}, callback, asyncState);
    }
    
    public void EndDeleteiFolder(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks>
///Get information about an iFolder.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetiFolder", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public iFolder GetiFolder(string ifolderID) {
        object[] results = this.Invoke("GetiFolder", new object[] {
            ifolderID});
        return ((iFolder)(results[0]));
    }
    
    public System.IAsyncResult BeginGetiFolder(string ifolderID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetiFolder", new object[] {
            ifolderID}, callback, asyncState);
    }
    
    public iFolder EndGetiFolder(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((iFolder)(results[0]));
    }
    
    /// <remarks>
///Get the private url of ifolder's homeserver
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetiFolderLocation", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public string GetiFolderLocation(string ifolderID) {
        object[] results = this.Invoke("GetiFolderLocation", new object[] {
            ifolderID});
        return ((string)(results[0]));
    }
    
    public System.IAsyncResult BeginGetiFolderLocation(string ifolderID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetiFolderLocation", new object[] {
            ifolderID}, callback, asyncState);
    }
    
    public string EndGetiFolderLocation(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks>
///Get the list of recovery agents
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetRAList", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public string[] GetRAList() {
        object[] results = this.Invoke("GetRAList", new object[0]);
        return ((string[])(results[0]));
    }
    
    public System.IAsyncResult BeginGetRAList(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetRAList", new object[0], callback, asyncState);
    }
    
    public string[] EndGetRAList(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string[])(results[0]));
    }
    
    /// <remarks>
///Get the RA Certificate
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetRACertificate", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public System.Byte[] GetRACertificate(string rAgent) {
        object[] results = this.Invoke("GetRACertificate", new object[] {
            rAgent});
        return ((System.Byte[])(results[0]));
    }
    
    public System.IAsyncResult BeginGetRACertificate(string rAgent, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetRACertificate", new object[] {
            rAgent}, callback, asyncState);
    }
    
    public System.Byte[] EndGetRACertificate(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Byte[])(results[0]));
    }
    
    /// <remarks>
///Get the PassPhrase status
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/IsPassPhraseSet", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public bool IsPassPhraseSet() {
        object[] results = this.Invoke("IsPassPhraseSet", new object[0]);
        return ((bool)(results[0]));
    }
    
    public System.IAsyncResult BeginIsPassPhraseSet(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("IsPassPhraseSet", new object[0], callback, asyncState);
    }
    
    public bool EndIsPassPhraseSet(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks>
///checks if this user has some user specific encryption enforced on it or not
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/IsUserOrSystemEncryptionEnforced", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public bool IsUserOrSystemEncryptionEnforced(string UserID) {
        object[] results = this.Invoke("IsUserOrSystemEncryptionEnforced", new object[] {
            UserID});
        return ((bool)(results[0]));
    }
    
    public System.IAsyncResult BeginIsUserOrSystemEncryptionEnforced(string UserID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("IsUserOrSystemEncryptionEnforced", new object[] {
            UserID}, callback, asyncState);
    }
    
    public bool EndIsUserOrSystemEncryptionEnforced(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks>
///checks for showing Tabs for encrypted ifolder
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/ShowTabDetails", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public bool ShowTabDetails(string PassPhrase, string EncryptionAlgorithm) {
        object[] results = this.Invoke("ShowTabDetails", new object[] {
            PassPhrase,
            EncryptionAlgorithm});
        return ((bool)(results[0]));
    }
    
    public System.IAsyncResult BeginShowTabDetails(string PassPhrase, string EncryptionAlgorithm, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ShowTabDetails", new object[] {
            PassPhrase,
            EncryptionAlgorithm}, callback, asyncState);
    }
    
    public bool EndShowTabDetails(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks>
///Validate the passphrase for the correctness.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/ValidatePassPhrase", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public Status ValidatePassPhrase(string passPhrase) {
        object[] results = this.Invoke("ValidatePassPhrase", new object[] {
            passPhrase});
        return ((Status)(results[0]));
    }
    
    public System.IAsyncResult BeginValidatePassPhrase(string passPhrase, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ValidatePassPhrase", new object[] {
            passPhrase}, callback, asyncState);
    }
    
    public Status EndValidatePassPhrase(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((Status)(results[0]));
    }
    
    /// <remarks>
///Set the passphrase and recovery agent.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/SetPassPhrase", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void SetPassPhrase(string passPhrase, string recoveryAgentName, string publicKey) {
        this.Invoke("SetPassPhrase", new object[] {
            passPhrase,
            recoveryAgentName,
            publicKey});
    }
    
    public System.IAsyncResult BeginSetPassPhrase(string passPhrase, string recoveryAgentName, string publicKey, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetPassPhrase", new object[] {
            passPhrase,
            recoveryAgentName,
            publicKey}, callback, asyncState);
    }
    
    public void EndSetPassPhrase(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks>
///Get detailed information about an iFolder.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetiFolderDetails", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public iFolderDetails GetiFolderDetails(string ifolderID) {
        object[] results = this.Invoke("GetiFolderDetails", new object[] {
            ifolderID});
        return ((iFolderDetails)(results[0]));
    }
    
    public System.IAsyncResult BeginGetiFolderDetails(string ifolderID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetiFolderDetails", new object[] {
            ifolderID}, callback, asyncState);
    }
    
    public iFolderDetails EndGetiFolderDetails(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((iFolderDetails)(results[0]));
    }
    
    /// <remarks>
///Set the description of an iFolder.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/SetiFolderDescription", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void SetiFolderDescription(string ifolderID, string description) {
        this.Invoke("SetiFolderDescription", new object[] {
            ifolderID,
            description});
    }
    
    public System.IAsyncResult BeginSetiFolderDescription(string ifolderID, string description, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetiFolderDescription", new object[] {
            ifolderID,
            description}, callback, asyncState);
    }
    
    public void EndSetiFolderDescription(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks>
///Publish an iFolder.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/PublishiFolder", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void PublishiFolder(string ifolderID, bool publish) {
        this.Invoke("PublishiFolder", new object[] {
            ifolderID,
            publish});
    }
    
    public System.IAsyncResult BeginPublishiFolder(string ifolderID, bool publish, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("PublishiFolder", new object[] {
            ifolderID,
            publish}, callback, asyncState);
    }
    
    public void EndPublishiFolder(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks>
///Get a history of changes to an iFolder.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetChanges", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public ChangeEntrySet GetChanges(string ifolderID, string itemID, int index, int max) {
        object[] results = this.Invoke("GetChanges", new object[] {
            ifolderID,
            itemID,
            index,
            max});
        return ((ChangeEntrySet)(results[0]));
    }
    
    public System.IAsyncResult BeginGetChanges(string ifolderID, string itemID, int index, int max, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetChanges", new object[] {
            ifolderID,
            itemID,
            index,
            max}, callback, asyncState);
    }
    
    public ChangeEntrySet EndGetChanges(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((ChangeEntrySet)(results[0]));
    }
    
    /// <remarks>
///Get a trimmed url from full url
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/TrimUrl", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public string TrimUrl(string FullUrl) {
        object[] results = this.Invoke("TrimUrl", new object[] {
            FullUrl});
        return ((string)(results[0]));
    }
    
    public System.IAsyncResult BeginTrimUrl(string FullUrl, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("TrimUrl", new object[] {
            FullUrl}, callback, asyncState);
    }
    
    public string EndTrimUrl(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks>
///Get information about the authenticated user.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetAuthenticatedUser", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public iFolderUser GetAuthenticatedUser() {
        object[] results = this.Invoke("GetAuthenticatedUser", new object[0]);
        return ((iFolderUser)(results[0]));
    }
    
    public System.IAsyncResult BeginGetAuthenticatedUser(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetAuthenticatedUser", new object[0], callback, asyncState);
    }
    
    public iFolderUser EndGetAuthenticatedUser(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((iFolderUser)(results[0]));
    }
    
    /// <remarks>
///Set the rights of a member on an iFolder.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/SetMemberRights", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void SetMemberRights(string ifolderID, string userID, Rights rights) {
        this.Invoke("SetMemberRights", new object[] {
            ifolderID,
            userID,
            rights});
    }
    
    public System.IAsyncResult BeginSetMemberRights(string ifolderID, string userID, Rights rights, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetMemberRights", new object[] {
            ifolderID,
            userID,
            rights}, callback, asyncState);
    }
    
    public void EndSetMemberRights(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks>
///Add a member to an iFolder.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/AddMember", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void AddMember(string ifolderID, string userID, Rights rights) {
        this.Invoke("AddMember", new object[] {
            ifolderID,
            userID,
            rights});
    }
    
    public System.IAsyncResult BeginAddMember(string ifolderID, string userID, Rights rights, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("AddMember", new object[] {
            ifolderID,
            userID,
            rights}, callback, asyncState);
    }
    
    public void EndAddMember(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks>
///Remove a member from an iFolder.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/RemoveMember", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void RemoveMember(string ifolderID, string userID) {
        this.Invoke("RemoveMember", new object[] {
            ifolderID,
            userID});
    }
    
    public System.IAsyncResult BeginRemoveMember(string ifolderID, string userID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("RemoveMember", new object[] {
            ifolderID,
            userID}, callback, asyncState);
    }
    
    public void EndRemoveMember(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks>
///Set the owner of an iFolder.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/SetiFolderOwner", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void SetiFolderOwner(string ifolderID, string userID, bool OrphanAdopt) {
        this.Invoke("SetiFolderOwner", new object[] {
            ifolderID,
            userID,
            OrphanAdopt});
    }
    
    public System.IAsyncResult BeginSetiFolderOwner(string ifolderID, string userID, bool OrphanAdopt, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetiFolderOwner", new object[] {
            ifolderID,
            userID,
            OrphanAdopt}, callback, asyncState);
    }
    
    public void EndSetiFolderOwner(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks>
///Get information about the members of an iFolder.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetMembers", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public iFolderUserSet GetMembers(string ifolderID, int index, int max) {
        object[] results = this.Invoke("GetMembers", new object[] {
            ifolderID,
            index,
            max});
        return ((iFolderUserSet)(results[0]));
    }
    
    public System.IAsyncResult BeginGetMembers(string ifolderID, int index, int max, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetMembers", new object[] {
            ifolderID,
            index,
            max}, callback, asyncState);
    }
    
    public iFolderUserSet EndGetMembers(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((iFolderUserSet)(results[0]));
    }
    
    /// <remarks>
///Get information about all of the iFolder users.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetUsers", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public iFolderUserSet GetUsers(int index, int max) {
        object[] results = this.Invoke("GetUsers", new object[] {
            index,
            max});
        return ((iFolderUserSet)(results[0]));
    }
    
    public System.IAsyncResult BeginGetUsers(int index, int max, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetUsers", new object[] {
            index,
            max}, callback, asyncState);
    }
    
    public iFolderUserSet EndGetUsers(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((iFolderUserSet)(results[0]));
    }
    
    /// <remarks>
///Get information about a user using an id or username.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetUser", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public iFolderUser GetUser(string userID) {
        object[] results = this.Invoke("GetUser", new object[] {
            userID});
        return ((iFolderUser)(results[0]));
    }
    
    public System.IAsyncResult BeginGetUser(string userID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetUser", new object[] {
            userID}, callback, asyncState);
    }
    
    public iFolderUser EndGetUser(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((iFolderUser)(results[0]));
    }
    
    /// <remarks>
///Get User Details
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetUserDetails", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public iFolderUserDetails GetUserDetails(string userID) {
        object[] results = this.Invoke("GetUserDetails", new object[] {
            userID});
        return ((iFolderUserDetails)(results[0]));
    }
    
    public System.IAsyncResult BeginGetUserDetails(string userID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetUserDetails", new object[] {
            userID}, callback, asyncState);
    }
    
    public iFolderUserDetails EndGetUserDetails(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((iFolderUserDetails)(results[0]));
    }
    
    /// <remarks>
///Get information about all of the iFolder users identified by the search property, operation, and pattern.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetUsersBySearch", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public iFolderUserSet GetUsersBySearch(SearchProperty property, SearchOperation operation, string pattern, int index, int max) {
        object[] results = this.Invoke("GetUsersBySearch", new object[] {
            property,
            operation,
            pattern,
            index,
            max});
        return ((iFolderUserSet)(results[0]));
    }
    
    public System.IAsyncResult BeginGetUsersBySearch(SearchProperty property, SearchOperation operation, string pattern, int index, int max, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetUsersBySearch", new object[] {
            property,
            operation,
            pattern,
            index,
            max}, callback, asyncState);
    }
    
    public iFolderUserSet EndGetUsersBySearch(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((iFolderUserSet)(results[0]));
    }
    
    /// <remarks>
///return a string which is short.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetShortenedName", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public string GetShortenedName(string name, int length) {
        object[] results = this.Invoke("GetShortenedName", new object[] {
            name,
            length});
        return ((string)(results[0]));
    }
    
    public System.IAsyncResult BeginGetShortenedName(string name, int length, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetShortenedName", new object[] {
            name,
            length}, callback, asyncState);
    }
    
    public string EndGetShortenedName(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks>
///Create a new iFolder with the authenticated user as the owner.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/CreateiFolder", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public iFolder CreateiFolder(string name, string description, bool ssl, string EncryptionAlgorithm, string PassPhrase) {
        object[] results = this.Invoke("CreateiFolder", new object[] {
            name,
            description,
            ssl,
            EncryptionAlgorithm,
            PassPhrase});
        return ((iFolder)(results[0]));
    }
    
    public System.IAsyncResult BeginCreateiFolder(string name, string description, bool ssl, string EncryptionAlgorithm, string PassPhrase, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CreateiFolder", new object[] {
            name,
            description,
            ssl,
            EncryptionAlgorithm,
            PassPhrase}, callback, asyncState);
    }
    
    public iFolder EndCreateiFolder(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((iFolder)(results[0]));
    }
    
    /// <remarks>
///Get information about all the iFolders to which the authenticate user has rights.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetiFolders", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public iFolderSet GetiFolders(int index, int max) {
        object[] results = this.Invoke("GetiFolders", new object[] {
            index,
            max});
        return ((iFolderSet)(results[0]));
    }
    
    public System.IAsyncResult BeginGetiFolders(int index, int max, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetiFolders", new object[] {
            index,
            max}, callback, asyncState);
    }
    
    public iFolderSet EndGetiFolders(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((iFolderSet)(results[0]));
    }
    
    /// <remarks>
///Get information about iFolders identified by the search operation and pattern.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetiFoldersByName", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public iFolderSet GetiFoldersByName(SearchOperation operation, string pattern, int index, int max) {
        object[] results = this.Invoke("GetiFoldersByName", new object[] {
            operation,
            pattern,
            index,
            max});
        return ((iFolderSet)(results[0]));
    }
    
    public System.IAsyncResult BeginGetiFoldersByName(SearchOperation operation, string pattern, int index, int max, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetiFoldersByName", new object[] {
            operation,
            pattern,
            index,
            max}, callback, asyncState);
    }
    
    public iFolderSet EndGetiFoldersByName(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((iFolderSet)(results[0]));
    }
    
    /// <remarks>
///Get ifolder limit policy information for an iFolder.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetiFolderLimitPolicyStatus", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public int GetiFolderLimitPolicyStatus(string userID) {
        object[] results = this.Invoke("GetiFolderLimitPolicyStatus", new object[] {
            userID});
        return ((int)(results[0]));
    }
    
    public System.IAsyncResult BeginGetiFolderLimitPolicyStatus(string userID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetiFolderLimitPolicyStatus", new object[] {
            userID}, callback, asyncState);
    }
    
    public int EndGetiFolderLimitPolicyStatus(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((int)(results[0]));
    }
    
    /// <remarks>
///Get information about iFolder identified by role, creation time, and search operation and pattern.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetiFoldersBySearch", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public iFolderSet GetiFoldersBySearch(MemberRole role, System.DateTime after, SearchOperation operation, string pattern, int index, int max) {
        object[] results = this.Invoke("GetiFoldersBySearch", new object[] {
            role,
            after,
            operation,
            pattern,
            index,
            max});
        return ((iFolderSet)(results[0]));
    }
    
    public System.IAsyncResult BeginGetiFoldersBySearch(MemberRole role, System.DateTime after, SearchOperation operation, string pattern, int index, int max, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetiFoldersBySearch", new object[] {
            role,
            after,
            operation,
            pattern,
            index,
            max}, callback, asyncState);
    }
    
    public iFolderSet EndGetiFoldersBySearch(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((iFolderSet)(results[0]));
    }
    
    /// <remarks>
///Remove the authenticated user's membership to an iFolder.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/RemoveMembership", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void RemoveMembership(string ifolderID) {
        this.Invoke("RemoveMembership", new object[] {
            ifolderID});
    }
    
    public System.IAsyncResult BeginRemoveMembership(string ifolderID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("RemoveMembership", new object[] {
            ifolderID}, callback, asyncState);
    }
    
    public void EndRemoveMembership(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks>
///Get policy information for the authenticated user.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetAuthenticatedUserPolicy", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public UserPolicy GetAuthenticatedUserPolicy() {
        object[] results = this.Invoke("GetAuthenticatedUserPolicy", new object[0]);
        return ((UserPolicy)(results[0]));
    }
    
    public System.IAsyncResult BeginGetAuthenticatedUserPolicy(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetAuthenticatedUserPolicy", new object[0], callback, asyncState);
    }
    
    public UserPolicy EndGetAuthenticatedUserPolicy(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((UserPolicy)(results[0]));
    }
    
    /// <remarks>
///Get policy information for an iFolder.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetiFolderPolicy", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public iFolderPolicy GetiFolderPolicy(string ifolderID) {
        object[] results = this.Invoke("GetiFolderPolicy", new object[] {
            ifolderID});
        return ((iFolderPolicy)(results[0]));
    }
    
    public System.IAsyncResult BeginGetiFolderPolicy(string ifolderID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetiFolderPolicy", new object[] {
            ifolderID}, callback, asyncState);
    }
    
    public iFolderPolicy EndGetiFolderPolicy(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((iFolderPolicy)(results[0]));
    }
    
    /// <remarks>
///Get policy information for an iFolder.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetEncryptionPolicy", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public int GetEncryptionPolicy() {
        object[] results = this.Invoke("GetEncryptionPolicy", new object[0]);
        return ((int)(results[0]));
    }
    
    public System.IAsyncResult BeginGetEncryptionPolicy(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetEncryptionPolicy", new object[0], callback, asyncState);
    }
    
    public int EndGetEncryptionPolicy(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((int)(results[0]));
    }
    
    /// <remarks>
///Set the policy for an iFolder.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/SetiFolderPolicy", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void SetiFolderPolicy(iFolderPolicy policy) {
        this.Invoke("SetiFolderPolicy", new object[] {
            policy});
    }
    
    public System.IAsyncResult BeginSetiFolderPolicy(iFolderPolicy policy, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetiFolderPolicy", new object[] {
            policy}, callback, asyncState);
    }
    
    public void EndSetiFolderPolicy(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks>
///Create an iFolder entry (file or directory).
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/CreateEntry", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public iFolderEntry CreateEntry(string ifolderID, string parentID, iFolderEntryType type, string entryName) {
        object[] results = this.Invoke("CreateEntry", new object[] {
            ifolderID,
            parentID,
            type,
            entryName});
        return ((iFolderEntry)(results[0]));
    }
    
    public System.IAsyncResult BeginCreateEntry(string ifolderID, string parentID, iFolderEntryType type, string entryName, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CreateEntry", new object[] {
            ifolderID,
            parentID,
            type,
            entryName}, callback, asyncState);
    }
    
    public iFolderEntry EndCreateEntry(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((iFolderEntry)(results[0]));
    }
    
    /// <remarks>
///Create an iFolder entry (file or directory).
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/CreateNodes", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public bool CreateNodes(string ifolderID) {
        object[] results = this.Invoke("CreateNodes", new object[] {
            ifolderID});
        return ((bool)(results[0]));
    }
    
    public System.IAsyncResult BeginCreateNodes(string ifolderID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CreateNodes", new object[] {
            ifolderID}, callback, asyncState);
    }
    
    public bool EndCreateNodes(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks>
///Delete an iFolder entry.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/DeleteEntry", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void DeleteEntry(string ifolderID, string entryID) {
        this.Invoke("DeleteEntry", new object[] {
            ifolderID,
            entryID});
    }
    
    public System.IAsyncResult BeginDeleteEntry(string ifolderID, string entryID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("DeleteEntry", new object[] {
            ifolderID,
            entryID}, callback, asyncState);
    }
    
    public void EndDeleteEntry(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks>
///Get information about an iFolder entry.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetEntry", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public iFolderEntry GetEntry(string ifolderID, string entryID) {
        object[] results = this.Invoke("GetEntry", new object[] {
            ifolderID,
            entryID});
        return ((iFolderEntry)(results[0]));
    }
    
    public System.IAsyncResult BeginGetEntry(string ifolderID, string entryID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetEntry", new object[] {
            ifolderID,
            entryID}, callback, asyncState);
    }
    
    public iFolderEntry EndGetEntry(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((iFolderEntry)(results[0]));
    }
    
    /// <remarks>
///Get information about an entry identified by it's relative path in the iFolder.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetEntryByPath", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public iFolderEntry GetEntryByPath(string ifolderID, string entryPath) {
        object[] results = this.Invoke("GetEntryByPath", new object[] {
            ifolderID,
            entryPath});
        return ((iFolderEntry)(results[0]));
    }
    
    public System.IAsyncResult BeginGetEntryByPath(string ifolderID, string entryPath, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetEntryByPath", new object[] {
            ifolderID,
            entryPath}, callback, asyncState);
    }
    
    public iFolderEntry EndGetEntryByPath(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((iFolderEntry)(results[0]));
    }
    
    /// <remarks>
///Get information about entries identified by their parent entry.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetEntries", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public iFolderEntrySet GetEntries(string ifolderID, string entryID, int index, int max) {
        object[] results = this.Invoke("GetEntries", new object[] {
            ifolderID,
            entryID,
            index,
            max});
        return ((iFolderEntrySet)(results[0]));
    }
    
    public System.IAsyncResult BeginGetEntries(string ifolderID, string entryID, int index, int max, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetEntries", new object[] {
            ifolderID,
            entryID,
            index,
            max}, callback, asyncState);
    }
    
    public iFolderEntrySet EndGetEntries(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((iFolderEntrySet)(results[0]));
    }
    
    /// <remarks>
///Get information about entries in an iFolder identified by a search on the name.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetEntriesByName", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public iFolderEntrySet GetEntriesByName(string ifolderID, string parentID, SearchOperation operation, string pattern, int index, int max) {
        object[] results = this.Invoke("GetEntriesByName", new object[] {
            ifolderID,
            parentID,
            operation,
            pattern,
            index,
            max});
        return ((iFolderEntrySet)(results[0]));
    }
    
    public System.IAsyncResult BeginGetEntriesByName(string ifolderID, string parentID, SearchOperation operation, string pattern, int index, int max, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetEntriesByName", new object[] {
            ifolderID,
            parentID,
            operation,
            pattern,
            index,
            max}, callback, asyncState);
    }
    
    public iFolderEntrySet EndGetEntriesByName(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((iFolderEntrySet)(results[0]));
    }
    
    /// <remarks>
///Get a setting specific to the authenticated user.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetSetting", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public string GetSetting(string name) {
        object[] results = this.Invoke("GetSetting", new object[] {
            name});
        return ((string)(results[0]));
    }
    
    public System.IAsyncResult BeginGetSetting(string name, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetSetting", new object[] {
            name}, callback, asyncState);
    }
    
    public string EndGetSetting(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks>
///Set a setting specific to the authenticated user.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/SetSetting", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void SetSetting(string name, string value) {
        this.Invoke("SetSetting", new object[] {
            name,
            value});
    }
    
    public System.IAsyncResult BeginSetSetting(string name, string value, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetSetting", new object[] {
            name,
            value}, callback, asyncState);
    }
    
    public void EndSetSetting(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks>
///Open an iFolder file entry for reading.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/OpenFileRead", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public string OpenFileRead(string ifolderID, string entryID) {
        object[] results = this.Invoke("OpenFileRead", new object[] {
            ifolderID,
            entryID});
        return ((string)(results[0]));
    }
    
    public System.IAsyncResult BeginOpenFileRead(string ifolderID, string entryID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("OpenFileRead", new object[] {
            ifolderID,
            entryID}, callback, asyncState);
    }
    
    public string EndOpenFileRead(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks>
///Open an iFolder file entry for writing.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/OpenFileWrite", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public string OpenFileWrite(string ifolderID, string entryID, long length) {
        object[] results = this.Invoke("OpenFileWrite", new object[] {
            ifolderID,
            entryID,
            length});
        return ((string)(results[0]));
    }
    
    public System.IAsyncResult BeginOpenFileWrite(string ifolderID, string entryID, long length, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("OpenFileWrite", new object[] {
            ifolderID,
            entryID,
            length}, callback, asyncState);
    }
    
    public string EndOpenFileWrite(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks>
///Read from an openned iFolder file entry.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/ReadFile", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public System.Byte[] ReadFile(string file, int size) {
        object[] results = this.Invoke("ReadFile", new object[] {
            file,
            size});
        return ((System.Byte[])(results[0]));
    }
    
    public System.IAsyncResult BeginReadFile(string file, int size, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ReadFile", new object[] {
            file,
            size}, callback, asyncState);
    }
    
    public System.Byte[] EndReadFile(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Byte[])(results[0]));
    }
    
    /// <remarks>
///Write to an openned iFolder file entry.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/WriteFile", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void WriteFile(string file, System.Byte[] buffer) {
        this.Invoke("WriteFile", new object[] {
            file,
            buffer});
    }
    
    public System.IAsyncResult BeginWriteFile(string file, System.Byte[] buffer, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("WriteFile", new object[] {
            file,
            buffer}, callback, asyncState);
    }
    
    public void EndWriteFile(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks>
///Close an openned iFolder file entry.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/CloseFile", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void CloseFile(string file) {
        this.Invoke("CloseFile", new object[] {
            file});
    }
    
    public System.IAsyncResult BeginCloseFile(string file, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CloseFile", new object[] {
            file}, callback, asyncState);
    }
    
    public void EndCloseFile(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks>
///Close an openned iFolder file entry.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/SetFileLength", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void SetFileLength(string ifolderID, string nodeID, long length) {
        this.Invoke("SetFileLength", new object[] {
            ifolderID,
            nodeID,
            length});
    }
    
    public System.IAsyncResult BeginSetFileLength(string ifolderID, string nodeID, long length, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetFileLength", new object[] {
            ifolderID,
            nodeID,
            length}, callback, asyncState);
    }
    
    public void EndSetFileLength(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks>
///evaluate the disable sharing policy
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetSharingPolicy", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public bool GetSharingPolicy(string iFolderID) {
        object[] results = this.Invoke("GetSharingPolicy", new object[] {
            iFolderID});
        return ((bool)(results[0]));
    }
    
    public System.IAsyncResult BeginGetSharingPolicy(string iFolderID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetSharingPolicy", new object[] {
            iFolderID}, callback, asyncState);
    }
    
    public bool EndGetSharingPolicy(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks>
///Get the list of all the servers available .
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetServerProvisioningList", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public string[] GetServerProvisioningList() {
        object[] results = this.Invoke("GetServerProvisioningList", new object[0]);
        return ((string[])(results[0]));
    }
    
    public System.IAsyncResult BeginGetServerProvisioningList(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetServerProvisioningList", new object[0], callback, asyncState);
    }
    
    public string[] EndGetServerProvisioningList(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string[])(results[0]));
    }
    
    /// <remarks>
///Get Orphaned iFolders
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetOrphanediFolders", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public iFolderSet GetOrphanediFolders(SearchOperation operation, string pattern, int index, int max) {
        object[] results = this.Invoke("GetOrphanediFolders", new object[] {
            operation,
            pattern,
            index,
            max});
        return ((iFolderSet)(results[0]));
    }
    
    public System.IAsyncResult BeginGetOrphanediFolders(SearchOperation operation, string pattern, int index, int max, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetOrphanediFolders", new object[] {
            operation,
            pattern,
            index,
            max}, callback, asyncState);
    }
    
    public iFolderSet EndGetOrphanediFolders(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((iFolderSet)(results[0]));
    }
    
    /// <remarks>
///check orphaned property
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/IsOrphanediFolder", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public string IsOrphanediFolder(string iFolderID) {
        object[] results = this.Invoke("IsOrphanediFolder", new object[] {
            iFolderID});
        return ((string)(results[0]));
    }
    
    public System.IAsyncResult BeginIsOrphanediFolder(string iFolderID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("IsOrphanediFolder", new object[] {
            iFolderID}, callback, asyncState);
    }
    
    public string EndIsOrphanediFolder(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks>
///decides whether this id is group id or not 
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/IsGroupId", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public bool IsGroupId(string UserID) {
        object[] results = this.Invoke("IsGroupId", new object[] {
            UserID});
        return ((bool)(results[0]));
    }
    
    public System.IAsyncResult BeginIsGroupId(string UserID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("IsGroupId", new object[] {
            UserID}, callback, asyncState);
    }
    
    public bool EndIsGroupId(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks>
///returns the higher priority policy which is applicable in the present situation 
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetSharingStatus", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public int GetSharingStatus(string iFolderID) {
        object[] results = this.Invoke("GetSharingStatus", new object[] {
            iFolderID});
        return ((int)(results[0]));
    }
    
    public System.IAsyncResult BeginGetSharingStatus(string iFolderID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetSharingStatus", new object[] {
            iFolderID}, callback, asyncState);
    }
    
    public int EndGetSharingStatus(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((int)(results[0]));
    }
    
    /// <remarks>
///Disables the past sharing by removing members list from all the iFolders of the system 
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/DisableSystemPastSharing", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void DisableSystemPastSharing() {
        this.Invoke("DisableSystemPastSharing", new object[0]);
    }
    
    public System.IAsyncResult BeginDisableSystemPastSharing(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("DisableSystemPastSharing", new object[0], callback, asyncState);
    }
    
    public void EndDisableSystemPastSharing(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks>
///Disables the past sharing by removing members list from all the iFolders of the user 
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/DisableUserPastSharing", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void DisableUserPastSharing(string UserID) {
        this.Invoke("DisableUserPastSharing", new object[] {
            UserID});
    }
    
    public System.IAsyncResult BeginDisableUserPastSharing(string UserID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("DisableUserPastSharing", new object[] {
            UserID}, callback, asyncState);
    }
    
    public void EndDisableUserPastSharing(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks>
///Disables the past sharing by removing members list from the iFolder 
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/DisableiFolderPastSharing", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void DisableiFolderPastSharing(string iFolderID) {
        this.Invoke("DisableiFolderPastSharing", new object[] {
            iFolderID});
    }
    
    public System.IAsyncResult BeginDisableiFolderPastSharing(string iFolderID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("DisableiFolderPastSharing", new object[] {
            iFolderID}, callback, asyncState);
    }
    
    public void EndDisableiFolderPastSharing(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks>
///Get information about an iFolder Server.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetServer", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public iFolderServer GetServer(string serverID) {
        object[] results = this.Invoke("GetServer", new object[] {
            serverID});
        return ((iFolderServer)(results[0]));
    }
    
    public System.IAsyncResult BeginGetServer(string serverID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetServer", new object[] {
            serverID}, callback, asyncState);
    }
    
    public iFolderServer EndGetServer(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((iFolderServer)(results[0]));
    }
    
    /// <remarks>
///Get the home server for the user.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetHomeServerForUser", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public string GetHomeServerForUser(string username, string password) {
        object[] results = this.Invoke("GetHomeServerForUser", new object[] {
            username,
            password});
        return ((string)(results[0]));
    }
    
    public System.IAsyncResult BeginGetHomeServerForUser(string username, string password, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetHomeServerForUser", new object[] {
            username,
            password}, callback, asyncState);
    }
    
    public string EndGetHomeServerForUser(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks>
///Get the home server for the user.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetHomeServerURLForUserID", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public string GetHomeServerURLForUserID(string userid) {
        object[] results = this.Invoke("GetHomeServerURLForUserID", new object[] {
            userid});
        return ((string)(results[0]));
    }
    
    public System.IAsyncResult BeginGetHomeServerURLForUserID(string userid, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetHomeServerURLForUserID", new object[] {
            userid}, callback, asyncState);
    }
    
    public string EndGetHomeServerURLForUserID(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks>
///Get information about the reports.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetReports", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public string[] GetReports() {
        object[] results = this.Invoke("GetReports", new object[0]);
        return ((string[])(results[0]));
    }
    
    public System.IAsyncResult BeginGetReports(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetReports", new object[0], callback, asyncState);
    }
    
    public string[] EndGetReports(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string[])(results[0]));
    }
    
    /// <remarks>
///Provision different users to different servers
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/ProvisionUsersToServers", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void ProvisionUsersToServers(string[] ServerNames, string[] UserIDs) {
        this.Invoke("ProvisionUsersToServers", new object[] {
            ServerNames,
            UserIDs});
    }
    
    public System.IAsyncResult BeginProvisionUsersToServers(string[] ServerNames, string[] UserIDs, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ProvisionUsersToServers", new object[] {
            ServerNames,
            UserIDs}, callback, asyncState);
    }
    
    public void EndProvisionUsersToServers(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks>
///Provision different users to one server
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/ProvisionUsersToServer", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void ProvisionUsersToServer(string ServerName, string[] ListOfUsers) {
        this.Invoke("ProvisionUsersToServer", new object[] {
            ServerName,
            ListOfUsers});
    }
    
    public System.IAsyncResult BeginProvisionUsersToServer(string ServerName, string[] ListOfUsers, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ProvisionUsersToServer", new object[] {
            ServerName,
            ListOfUsers}, callback, asyncState);
    }
    
    public void EndProvisionUsersToServer(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/ifolder/webservice/")]
public class iFolderSystem {
    
    /// <remarks/>
    public string ID;
    
    /// <remarks/>
    public string Name;
    
    /// <remarks/>
    public string Version;
    
    /// <remarks/>
    public string Description;
    
    /// <remarks/>
    public string ReportiFolderID;
    
    /// <remarks/>
    public string ReportiFolderName;
    
    /// <remarks/>
    public string ReportPath;
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/ifolder/webservice/")]
public class iFolderServer {
    
    /// <remarks/>
    public string ID;
    
    /// <remarks/>
    public string Name;
    
    /// <remarks/>
    public string Version;
    
    /// <remarks/>
    public string HostName;
    
    /// <remarks/>
    public string MachineName;
    
    /// <remarks/>
    public string OSVersion;
    
    /// <remarks/>
    public string UserName;
    
    /// <remarks/>
    public string ClrVersion;
    
    /// <remarks/>
    public string PublicUrl;
    
    /// <remarks/>
    public string PrivateUrl;
    
    /// <remarks/>
    public bool IsMaster;
    
    /// <remarks/>
    public bool IsLocal;
    
    /// <remarks/>
    public int UserCount;
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/ifolder/webservice/")]
public enum SearchOperation {
    
    /// <remarks/>
    BeginsWith,
    
    /// <remarks/>
    EndsWith,
    
    /// <remarks/>
    Contains,
    
    /// <remarks/>
    Equals,
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/ifolder/webservice/")]
public class iFolderServerSet {
    
    /// <remarks/>
    public iFolderServer[] Items;
    
    /// <remarks/>
    public int Total;
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/ifolder/webservice/")]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(iFolderDetails))]
public class iFolder {
    
    /// <remarks/>
    public string ID;
    
    /// <remarks/>
    public string Name;
    
    /// <remarks/>
    public string Description;
    
    /// <remarks/>
    public string OwnerID;
    
    /// <remarks/>
    public string OwnerUserName;
    
    /// <remarks/>
    public string OwnerFullName;
    
    /// <remarks/>
    public string DomainID;
    
    /// <remarks/>
    public long Size;
    
    /// <remarks/>
    public bool IsOwner;
    
    /// <remarks/>
    public Rights MemberRights;
    
    /// <remarks/>
    public System.DateTime Created;
    
    /// <remarks/>
    public System.DateTime LastModified;
    
    /// <remarks/>
    public bool Published;
    
    /// <remarks/>
    public bool Enabled;
    
    /// <remarks/>
    public int MemberCount;
    
    /// <remarks/>
    public string HostID;
    
    /// <remarks/>
    public System.UInt32 IfolderSecurity;
    
    /// <remarks/>
    public string EncryptionAlgorithm;
    
    /// <remarks/>
    public string EncryptionKey;
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/ifolder/webservice/")]
public enum Rights {
    
    /// <remarks/>
    Admin,
    
    /// <remarks/>
    ReadWrite,
    
    /// <remarks/>
    ReadOnly,
    
    /// <remarks/>
    Deny,
    
    /// <remarks/>
    Unknown,
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/ifolder/webservice/")]
public class iFolderDetails : iFolder {
    
    /// <remarks/>
    public int FileCount;
    
    /// <remarks/>
    public int DirectoryCount;
    
    /// <remarks/>
    public string ManagedPath;
    
    /// <remarks/>
    public string UnManagedPath;
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/ifolder/webservice/")]
public class Status {
    
    /// <remarks/>
    public StatusCodes statusCode;
    
    /// <remarks/>
    public string DomainID;
    
    /// <remarks/>
    public string UserID;
    
    /// <remarks/>
    public string UserName;
    
    /// <remarks/>
    public string DistinguishedUserName;
    
    /// <remarks/>
    public string ExceptionMessage;
    
    /// <remarks/>
    public int TotalGraceLogins;
    
    /// <remarks/>
    public int RemainingGraceLogins;
    
    /// <remarks/>
    public int DaysUntilPasswordExpires;
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/ifolder/webservice/")]
public enum StatusCodes {
    
    /// <remarks/>
    Success,
    
    /// <remarks/>
    SuccessInGrace,
    
    /// <remarks/>
    InvalidCertificate,
    
    /// <remarks/>
    UnknownUser,
    
    /// <remarks/>
    AmbiguousUser,
    
    /// <remarks/>
    InvalidCredentials,
    
    /// <remarks/>
    InvalidPassword,
    
    /// <remarks/>
    AccountDisabled,
    
    /// <remarks/>
    AccountLockout,
    
    /// <remarks/>
    SimiasLoginDisabled,
    
    /// <remarks/>
    UnknownDomain,
    
    /// <remarks/>
    InternalException,
    
    /// <remarks/>
    MethodNotSupported,
    
    /// <remarks/>
    Timeout,
    
    /// <remarks/>
    OlderVersion,
    
    /// <remarks/>
    ServerOld,
    
    /// <remarks/>
    UpgradeNeeded,
    
    /// <remarks/>
    PassPhraseNotSet,
    
    /// <remarks/>
    PassPhraseInvalid,
    
    /// <remarks/>
    Unknown,
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/ifolder/webservice/")]
public class ChangeEntrySet {
    
    /// <remarks/>
    public ChangeEntry[] Items;
    
    /// <remarks/>
    public int Total;
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/ifolder/webservice/")]
public class ChangeEntry {
    
    /// <remarks/>
    public System.DateTime Time;
    
    /// <remarks/>
    public ChangeEntryType Type;
    
    /// <remarks/>
    public ChangeEntryAction Action;
    
    /// <remarks/>
    public string ID;
    
    /// <remarks/>
    public string Name;
    
    /// <remarks/>
    public string UserID;
    
    /// <remarks/>
    public string UserFullName;
    
    /// <remarks/>
    public Rights MemberNewRights;
    
    /// <remarks/>
    public Rights MemberOldRights;
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/ifolder/webservice/")]
public enum ChangeEntryType {
    
    /// <remarks/>
    iFolder,
    
    /// <remarks/>
    File,
    
    /// <remarks/>
    Directory,
    
    /// <remarks/>
    Member,
    
    /// <remarks/>
    Unknown,
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/ifolder/webservice/")]
public enum ChangeEntryAction {
    
    /// <remarks/>
    Add,
    
    /// <remarks/>
    Modify,
    
    /// <remarks/>
    Delete,
    
    /// <remarks/>
    Unknown,
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/ifolder/webservice/")]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(iFolderUserDetails))]
public class iFolderUser {
    
    /// <remarks/>
    public string ID;
    
    /// <remarks/>
    public string UserName;
    
    /// <remarks/>
    public string FullName;
    
    /// <remarks/>
    public string FirstName;
    
    /// <remarks/>
    public string LastName;
    
    /// <remarks/>
    public Rights MemberRights;
    
    /// <remarks/>
    public bool Enabled;
    
    /// <remarks/>
    public bool IsOwner;
    
    /// <remarks/>
    public string Email;
    
    /// <remarks/>
    public string HomeServer;
}
/*
/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/ifolder/webservice/")]
public class iFolderUserDetails : iFolderUser {
    
    /// <remarks/>
    public int SyncIntervalEffective;
    
    /// <remarks/>
    public System.DateTime LastLogin;
    
    /// <remarks/>
    public string LdapContext;
    
    /// <remarks/>
    public string GroupOrMemberList;
    
    /// <remarks/>
    public int MemberType;
    
    /// <remarks/>
    public int OwnediFolderCount;
    
    /// <remarks/>
    public int SharediFolderCount;
}
*/
/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/ifolder/webservice/")]
public class iFolderUserSet {
    
    /// <remarks/>
    public iFolderUser[] Items;
    
    /// <remarks/>
    public int Total;
}
/*
/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/ifolder/webservice/")]
public enum SearchProperty {
    
    /// <remarks/>
    UserName,
    
    /// <remarks/>
    FullName,
    
    /// <remarks/>
    LastName,
    
    /// <remarks/>
    FirstName,
}
*/
/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/ifolder/webservice/")]
public class iFolderSet {
    
    /// <remarks/>
    public iFolder[] Items;
    
    /// <remarks/>
    public int Total;
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/ifolder/webservice/")]
public enum MemberRole {
    
    /// <remarks/>
    Any,
    
    /// <remarks/>
    Owner,
    
    /// <remarks/>
    Encrypted,
    
    /// <remarks/>
    Shared,
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/ifolder/webservice/")]
public class UserPolicy {
    
    /// <remarks/>
    public string UserID;
    
    /// <remarks/>
    public bool LoginEnabled;
    
    /// <remarks/>
    public long SpaceLimit;
    
    /// <remarks/>
    public int EncryptionStatus;
    
    /// <remarks/>
    public int SharingStatus;
    
    /// <remarks/>
    public long SpaceLimitEffective;
    
    /// <remarks/>
    public long FileSizeLimit;
    
    /// <remarks/>
    public long NoiFoldersLimit;
    
    /// <remarks/>
    public long FileSizeLimitEffective;
    
    /// <remarks/>
    public long SpaceUsed;
    
    /// <remarks/>
    public long SpaceAvailable;
    
    /// <remarks/>
    public int SyncInterval;
    
    /// <remarks/>
    public int SyncIntervalEffective;
    
    /// <remarks/>
    public string[] FileTypesIncludes;
    
    /// <remarks/>
    public string[] FileTypesIncludesEffective;
    
    /// <remarks/>
    public string[] FileTypesExcludes;
    
    /// <remarks/>
    public string[] FileTypesExcludesEffective;
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/ifolder/webservice/")]
public class iFolderPolicy {
    
    /// <remarks/>
    public string iFolderID;
    
    /// <remarks/>
    public bool Locked;
    
    /// <remarks/>
    public long SpaceLimit;
    
    /// <remarks/>
    public long SpaceLimitEffective;
    
    /// <remarks/>
    public long SpaceUsed;
    
    /// <remarks/>
    public long SpaceAvailable;
    
    /// <remarks/>
    public int SyncInterval;
    
    /// <remarks/>
    public int SyncIntervalEffective;
    
    /// <remarks/>
    public int SharingStatus;
    
    /// <remarks/>
    public string[] FileTypesIncludes;
    
    /// <remarks/>
    public string[] FileTypesIncludesEffective;
    
    /// <remarks/>
    public string[] FileTypesExcludes;
    
    /// <remarks/>
    public string[] FileTypesExcludesEffective;
    
    /// <remarks/>
    public long FileSizeLimit;
    
    /// <remarks/>
    public long FileSizeLimitEffective;
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/ifolder/webservice/")]
public enum iFolderEntryType {
    
    /// <remarks/>
    Directory,
    
    /// <remarks/>
    File,
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/ifolder/webservice/")]
public class iFolderEntry {
    
    /// <remarks/>
    public string ID;
    
    /// <remarks/>
    public string Name;
    
    /// <remarks/>
    public string Path;
    
    /// <remarks/>
    public string iFolderID;
    
    /// <remarks/>
    public string ParentID;
    
    /// <remarks/>
    public bool IsDirectory;
    
    /// <remarks/>
    public bool IsRoot;
    
    /// <remarks/>
    public bool HasChildren;
    
    /// <remarks/>
    public System.DateTime LastModified;
    
    /// <remarks/>
    public long Size;
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/ifolder/webservice/")]
public class iFolderEntrySet {
    
    /// <remarks/>
    public iFolderEntry[] Items;
    
    /// <remarks/>
    public int Total;
}
