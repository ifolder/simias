#!/bin/bash
#/*****************************************************************************
#*
#* Copyright (c) [2012] Novell, Inc.
#* All Rights Reserved.
#*
#* This program is free software; you can redistribute it and/or
#* modify it under the terms of version 2 of the GNU General Public License as
#* published by the Free Software Foundation.
#*
#* This program is distributed in the hope that it will be useful,
#* but WITHOUT ANY WARRANTY; without even the implied warranty of
#* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   See the
#* GNU General Public License for more details.
#*
#* You should have received a copy of the GNU General Public License
#* along with this program; if not, contact Novell, Inc.
#*
#* To contact Novell about this file by physical or electronic mail,
#* you may find current contact information at www.novell.com
#*
#*-----------------------------------------------------------------------------
#*
#*                 $Author: Hegde G. G. ( hegdegg@novell.com)
#*                 $Modified by: hegdegg@novell.com
#*                 $Mod Date: May 01, 2012
#*                 $Revision: 0.1
#*-----------------------------------------------------------------------------
#* This module is:
#*      Wrapper script, ifolder-database-check, that is used to test the 
#*		recoverability of simias database.
#*******************************************************************************/
#set -x

InitializeDataPath()
{
	datapath=""
	datapath=`grep SimiasDataDir /etc/apache2/conf.d/simias.conf | gawk 'BEGIN { RS=";|\"" } { if (/^SimiasDataDir/) print gensub(/SimiasDataDir=/, "", 1) }'`
	backupdir=$datapath/MetaDataBackup
	tempdir=$datapath/MetaDataBackupTemp

	if [ -d $tempdir ] ; then
		rm -rf $tempdir/* ;
	else
		mkdir $tempdir;
	fi
	
	debuglog=$tempdir/debug.log
	errlog=$tempdir/err.log
	touch $debuglog $errlog
	
	if [ -n "$datapath" ]; then
		Log "Simias datapath read from config file"
	else
		Log "Unable to read datapath from simias config file"
		exit -1
	fi
}

SetMonoPath()
{
	#rpm -q mono-addon-core > /dev/null 2>&1
	export MONO_PATH=/opt/novell/ifolder3/lib64/simias/web/bin:/opt/novell/ifolder3/bin:/usr/lib/mono/log4net
	rpm -q mono-addon-core > /dev/null 2>&1
	
	if [ $? -gt 0 ]; then
        	cd /opt/novell/ifolder3/bin
	else
	        MONO_RUNTIME_PATH=/opt/novell/mono/bin
        	source $MONO_RUNTIME_PATH/mono-addon-environment.sh
	        cd /opt/novell/ifolder3/bin
	fi
}

CopyFiles()
{
	cp -rpf $datapath/FlaimSimias* $tempdir/
	cp -rpf $datapath/Simias.config $tempdir/
}

BackupFiles()
{
	if [ -d $backupdir ] ; then
		rm -rf $backupdir;
	fi
	mv $tempdir $backupdir
	md5sum $backupdir/FlaimSimias.* > $backupdir/files.md5 2>/dev/null
	md5sum $backupdir/FlaimSimias.rfl/* >> $backupdir/files.md5 2>/dev/null
}

UpdateAdmin()
{
	/bin/mail -s "iFolder backup check failed" hegdegg@novell.com < " Failed database check"
}

PrintUsage()
{
	Log "Usage:";
}

Log()
{
	if [ $DEBUG -eq 1 ]; then
		message="$1  $2"
		echo $message >> $debuglog;
	fi
}
NoStopping()
{
	echo "Termination may cause Simias DB to be corrupt, ignoring the request"
}
##############################################################
# Main execution starts here
usage=$(
cat <<EOF
$0 [OPTION]
-v          	set the verbose flag for detailed log
-p path 		simias database path
-l level    	select 1 for basic tests and 2 for detailed tests
)

	#define default values
	while getopts "vp:l:" OPTION; do
	  case "$OPTION" in
	    v)
	      DEBUG=1
	      ;;
	    p)
	      DBPATH="$OPTARG"
	      ;;
	    l)
	      LEVEL="$OPTARG"
	      ;;
	    *)
	      echo "$usage"
	      ;;
	  esac
	done

	# set default val:
	#  VARIABLE when it is returned
	: ${DEBUG=0}
	: ${DBPATH=''}
	: ${LEVEL=1}

SetMonoPath

trap NoStopping 1 2 5

if [ ! -z "$DBPATH" ]; then
	backupfiles=false
	mono /opt/novell/ifolder3/bin/CheckSimiasDB.exe "$DBPATH" $LEVEL 
	if [ $? -eq 0 ] ; then
		Log "Simias data in backed up location is readable"
	else
		Log "Simias database in backed up location is not readable"
	fi
else
	InitializeDataPath
	CopyFiles
	mono /opt/novell/ifolder3/bin/CheckSimiasDB.exe $tempdir $LEVEL > $tempdir/recoverability.log 2>$errlog
	if [ $? -eq 0 ] ; then
		Log "Simias data in backed up location is readable"
		BackupFiles
	else
		Log "Simias database in backed up location is not readable"
	fi
fi
exit $?;
