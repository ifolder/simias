// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 1.1.4322.2032
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

// 
// This source code was auto-generated by Mono Web Services Description Language Utility
//

/// <remarks/>
/// <remarks>
///iFolder Admin Web Service
///</remarks>
[System.Web.Services.WebServiceBinding(Name="iFolderAdminSoap", Namespace="http://novell.com/ifolder/webservice/")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public class iFolderAdmin : System.Web.Services.Protocols.SoapHttpClientProtocol {
    
    public iFolderAdmin() {
        this.Url = "http://localhost:8086/simias10/iFolderAdmin.asmx";
    }
    
    /// <remarks>
///Get iFolder Server Information
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetServer", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public iFolderServer GetServer() {
        object[] results = this.Invoke("GetServer", new object[0]);
        return ((iFolderServer)(results[0]));
    }
    
    public System.IAsyncResult BeginGetServer(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetServer", new object[0], callback, asyncState);
    }
    
    public iFolderServer EndGetServer(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((iFolderServer)(results[0]));
    }
    
    /// <remarks>
///Get iFolder System Information
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetSystem", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public iFolderSystem GetSystem() {
        object[] results = this.Invoke("GetSystem", new object[0]);
        return ((iFolderSystem)(results[0]));
    }
    
    public System.IAsyncResult BeginGetSystem(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetSystem", new object[0], callback, asyncState);
    }
    
    public iFolderSystem EndGetSystem(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((iFolderSystem)(results[0]));
    }
    
    /// <remarks>
///Create a New iFolder
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/CreateiFolder", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public iFolder CreateiFolder(string name, string userID, string description) {
        object[] results = this.Invoke("CreateiFolder", new object[] {
            name,
            userID,
            description});
        return ((iFolder)(results[0]));
    }
    
    public System.IAsyncResult BeginCreateiFolder(string name, string userID, string description, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CreateiFolder", new object[] {
            name,
            userID,
            description}, callback, asyncState);
    }
    
    public iFolder EndCreateiFolder(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((iFolder)(results[0]));
    }
    
    /// <remarks>
///Delete an iFolder
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/DeleteiFolder", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void DeleteiFolder(string ifolderID) {
        this.Invoke("DeleteiFolder", new object[] {
            ifolderID});
    }
    
    public System.IAsyncResult BeginDeleteiFolder(string ifolderID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("DeleteiFolder", new object[] {
            ifolderID}, callback, asyncState);
    }
    
    public void EndDeleteiFolder(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks>
///Get an iFolder
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetiFolder", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public iFolder GetiFolder(string ifolderID) {
        object[] results = this.Invoke("GetiFolder", new object[] {
            ifolderID});
        return ((iFolder)(results[0]));
    }
    
    public System.IAsyncResult BeginGetiFolder(string ifolderID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetiFolder", new object[] {
            ifolderID}, callback, asyncState);
    }
    
    public iFolder EndGetiFolder(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((iFolder)(results[0]));
    }
    
    /// <remarks>
///Set the Description of an iFolder
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/SetiFolderDescription", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void SetiFolderDescription(string ifolderID, string description) {
        this.Invoke("SetiFolderDescription", new object[] {
            ifolderID,
            description});
    }
    
    public System.IAsyncResult BeginSetiFolderDescription(string ifolderID, string description, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetiFolderDescription", new object[] {
            ifolderID,
            description}, callback, asyncState);
    }
    
    public void EndSetiFolderDescription(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks>
///Get iFolders
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetiFolders", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public iFolder[] GetiFolders(iFolderType type, int index, int count, out int total) {
        object[] results = this.Invoke("GetiFolders", new object[] {
            type,
            index,
            count});
        total = ((int)(results[1]));
        return ((iFolder[])(results[0]));
    }
    
    public System.IAsyncResult BeginGetiFolders(iFolderType type, int index, int count, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetiFolders", new object[] {
            type,
            index,
            count}, callback, asyncState);
    }
    
    public iFolder[] EndGetiFolders(System.IAsyncResult asyncResult, out int total) {
        object[] results = this.EndInvoke(asyncResult);
        total = ((int)(results[1]));
        return ((iFolder[])(results[0]));
    }
    
    /// <remarks>
///Get iFolders by Member
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetiFoldersByMember", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public iFolder[] GetiFoldersByMember(string userID, MemberRole role, int index, int count, out int total) {
        object[] results = this.Invoke("GetiFoldersByMember", new object[] {
            userID,
            role,
            index,
            count});
        total = ((int)(results[1]));
        return ((iFolder[])(results[0]));
    }
    
    public System.IAsyncResult BeginGetiFoldersByMember(string userID, MemberRole role, int index, int count, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetiFoldersByMember", new object[] {
            userID,
            role,
            index,
            count}, callback, asyncState);
    }
    
    public iFolder[] EndGetiFoldersByMember(System.IAsyncResult asyncResult, out int total) {
        object[] results = this.EndInvoke(asyncResult);
        total = ((int)(results[1]));
        return ((iFolder[])(results[0]));
    }
    
    /// <remarks>
///Get iFolders by Name
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetiFoldersByName", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public iFolder[] GetiFoldersByName(SearchOperation operation, string pattern, int index, int count, out int total) {
        object[] results = this.Invoke("GetiFoldersByName", new object[] {
            operation,
            pattern,
            index,
            count});
        total = ((int)(results[1]));
        return ((iFolder[])(results[0]));
    }
    
    public System.IAsyncResult BeginGetiFoldersByName(SearchOperation operation, string pattern, int index, int count, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetiFoldersByName", new object[] {
            operation,
            pattern,
            index,
            count}, callback, asyncState);
    }
    
    public iFolder[] EndGetiFoldersByName(System.IAsyncResult asyncResult, out int total) {
        object[] results = this.EndInvoke(asyncResult);
        total = ((int)(results[1]));
        return ((iFolder[])(results[0]));
    }
    
    /// <remarks>
///Get Changes
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetChanges", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public ChangeEntry[] GetChanges(string ifolderID, string entryID, int index, int count, out int total) {
        object[] results = this.Invoke("GetChanges", new object[] {
            ifolderID,
            entryID,
            index,
            count});
        total = ((int)(results[1]));
        return ((ChangeEntry[])(results[0]));
    }
    
    public System.IAsyncResult BeginGetChanges(string ifolderID, string entryID, int index, int count, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetChanges", new object[] {
            ifolderID,
            entryID,
            index,
            count}, callback, asyncState);
    }
    
    public ChangeEntry[] EndGetChanges(System.IAsyncResult asyncResult, out int total) {
        object[] results = this.EndInvoke(asyncResult);
        total = ((int)(results[1]));
        return ((ChangeEntry[])(results[0]));
    }
    
    /// <remarks>
///Get the Authenticated User
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetAuthenticatedUser", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public iFolderUser GetAuthenticatedUser() {
        object[] results = this.Invoke("GetAuthenticatedUser", new object[0]);
        return ((iFolderUser)(results[0]));
    }
    
    public System.IAsyncResult BeginGetAuthenticatedUser(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetAuthenticatedUser", new object[0], callback, asyncState);
    }
    
    public iFolderUser EndGetAuthenticatedUser(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((iFolderUser)(results[0]));
    }
    
    /// <remarks>
///Set the Rights of an iFolder Member
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/SetMemberRights", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void SetMemberRights(string ifolderID, string userID, Rights rights) {
        this.Invoke("SetMemberRights", new object[] {
            ifolderID,
            userID,
            rights});
    }
    
    public System.IAsyncResult BeginSetMemberRights(string ifolderID, string userID, Rights rights, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetMemberRights", new object[] {
            ifolderID,
            userID,
            rights}, callback, asyncState);
    }
    
    public void EndSetMemberRights(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks>
///Add a Member to an iFolder
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/AddMember", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void AddMember(string ifolderID, string userID, Rights rights) {
        this.Invoke("AddMember", new object[] {
            ifolderID,
            userID,
            rights});
    }
    
    public System.IAsyncResult BeginAddMember(string ifolderID, string userID, Rights rights, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("AddMember", new object[] {
            ifolderID,
            userID,
            rights}, callback, asyncState);
    }
    
    public void EndAddMember(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks>
///Remove a Member from an iFolder
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/RemoveMember", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void RemoveMember(string ifolderID, string userID) {
        this.Invoke("RemoveMember", new object[] {
            ifolderID,
            userID});
    }
    
    public System.IAsyncResult BeginRemoveMember(string ifolderID, string userID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("RemoveMember", new object[] {
            ifolderID,
            userID}, callback, asyncState);
    }
    
    public void EndRemoveMember(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks>
///Set the Owner of an iFolder
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/SetiFolderOwner", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void SetiFolderOwner(string ifolderID, string userID) {
        this.Invoke("SetiFolderOwner", new object[] {
            ifolderID,
            userID});
    }
    
    public System.IAsyncResult BeginSetiFolderOwner(string ifolderID, string userID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetiFolderOwner", new object[] {
            ifolderID,
            userID}, callback, asyncState);
    }
    
    public void EndSetiFolderOwner(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks>
///Get the Members of an iFolder
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetMembers", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public iFolderUser[] GetMembers(string ifolderID, int index, int count, out int total) {
        object[] results = this.Invoke("GetMembers", new object[] {
            ifolderID,
            index,
            count});
        total = ((int)(results[1]));
        return ((iFolderUser[])(results[0]));
    }
    
    public System.IAsyncResult BeginGetMembers(string ifolderID, int index, int count, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetMembers", new object[] {
            ifolderID,
            index,
            count}, callback, asyncState);
    }
    
    public iFolderUser[] EndGetMembers(System.IAsyncResult asyncResult, out int total) {
        object[] results = this.EndInvoke(asyncResult);
        total = ((int)(results[1]));
        return ((iFolderUser[])(results[0]));
    }
    
    /// <remarks>
///Get the iFolder Users
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetUsers", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public iFolderUser[] GetUsers(int index, int count, out int total) {
        object[] results = this.Invoke("GetUsers", new object[] {
            index,
            count});
        total = ((int)(results[1]));
        return ((iFolderUser[])(results[0]));
    }
    
    public System.IAsyncResult BeginGetUsers(int index, int count, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetUsers", new object[] {
            index,
            count}, callback, asyncState);
    }
    
    public iFolderUser[] EndGetUsers(System.IAsyncResult asyncResult, out int total) {
        object[] results = this.EndInvoke(asyncResult);
        total = ((int)(results[1]));
        return ((iFolderUser[])(results[0]));
    }
    
    /// <remarks>
///Get a User
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetUser", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public iFolderUser GetUser(string userID) {
        object[] results = this.Invoke("GetUser", new object[] {
            userID});
        return ((iFolderUser)(results[0]));
    }
    
    public System.IAsyncResult BeginGetUser(string userID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetUser", new object[] {
            userID}, callback, asyncState);
    }
    
    public iFolderUser EndGetUser(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((iFolderUser)(results[0]));
    }
    
    /// <remarks>
///Get User Details
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetUserDetails", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public iFolderUserDetails GetUserDetails(string userID) {
        object[] results = this.Invoke("GetUserDetails", new object[] {
            userID});
        return ((iFolderUserDetails)(results[0]));
    }
    
    public System.IAsyncResult BeginGetUserDetails(string userID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetUserDetails", new object[] {
            userID}, callback, asyncState);
    }
    
    public iFolderUserDetails EndGetUserDetails(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((iFolderUserDetails)(results[0]));
    }
    
    /// <remarks>
///Search the Users of the iFolder System
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetUsersBySearch", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public iFolderUser[] GetUsersBySearch(SearchProperty property, SearchOperation operation, string pattern, int index, int count, out int total) {
        object[] results = this.Invoke("GetUsersBySearch", new object[] {
            property,
            operation,
            pattern,
            index,
            count});
        total = ((int)(results[1]));
        return ((iFolderUser[])(results[0]));
    }
    
    public System.IAsyncResult BeginGetUsersBySearch(SearchProperty property, SearchOperation operation, string pattern, int index, int count, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetUsersBySearch", new object[] {
            property,
            operation,
            pattern,
            index,
            count}, callback, asyncState);
    }
    
    public iFolderUser[] EndGetUsersBySearch(System.IAsyncResult asyncResult, out int total) {
        object[] results = this.EndInvoke(asyncResult);
        total = ((int)(results[1]));
        return ((iFolderUser[])(results[0]));
    }
    
    /// <remarks>
///Give a User Administration Rights
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/AddAdministrator", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void AddAdministrator(string userID) {
        this.Invoke("AddAdministrator", new object[] {
            userID});
    }
    
    public System.IAsyncResult BeginAddAdministrator(string userID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("AddAdministrator", new object[] {
            userID}, callback, asyncState);
    }
    
    public void EndAddAdministrator(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks>
///Remove Administration Rights from a User
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/RemoveAdministrator", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void RemoveAdministrator(string userID) {
        this.Invoke("RemoveAdministrator", new object[] {
            userID});
    }
    
    public System.IAsyncResult BeginRemoveAdministrator(string userID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("RemoveAdministrator", new object[] {
            userID}, callback, asyncState);
    }
    
    public void EndRemoveAdministrator(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks>
///Get all the Administrators
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetAdministrators", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public iFolderUser[] GetAdministrators(int index, int count, out int total) {
        object[] results = this.Invoke("GetAdministrators", new object[] {
            index,
            count});
        total = ((int)(results[1]));
        return ((iFolderUser[])(results[0]));
    }
    
    public System.IAsyncResult BeginGetAdministrators(int index, int count, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetAdministrators", new object[] {
            index,
            count}, callback, asyncState);
    }
    
    public iFolderUser[] EndGetAdministrators(System.IAsyncResult asyncResult, out int total) {
        object[] results = this.EndInvoke(asyncResult);
        total = ((int)(results[1]));
        return ((iFolderUser[])(results[0]));
    }
    
    /// <remarks>
///Get the System Policy
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetSystemPolicy", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public SystemPolicy GetSystemPolicy() {
        object[] results = this.Invoke("GetSystemPolicy", new object[0]);
        return ((SystemPolicy)(results[0]));
    }
    
    public System.IAsyncResult BeginGetSystemPolicy(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetSystemPolicy", new object[0], callback, asyncState);
    }
    
    public SystemPolicy EndGetSystemPolicy(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((SystemPolicy)(results[0]));
    }
    
    /// <remarks>
///Set the System Policy
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/SetSystemPolicy", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void SetSystemPolicy(SystemPolicy props) {
        this.Invoke("SetSystemPolicy", new object[] {
            props});
    }
    
    public System.IAsyncResult BeginSetSystemPolicy(SystemPolicy props, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetSystemPolicy", new object[] {
            props}, callback, asyncState);
    }
    
    public void EndSetSystemPolicy(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks>
///Get User Policy
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetUserPolicy", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public UserPolicy GetUserPolicy(string userID) {
        object[] results = this.Invoke("GetUserPolicy", new object[] {
            userID});
        return ((UserPolicy)(results[0]));
    }
    
    public System.IAsyncResult BeginGetUserPolicy(string userID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetUserPolicy", new object[] {
            userID}, callback, asyncState);
    }
    
    public UserPolicy EndGetUserPolicy(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((UserPolicy)(results[0]));
    }
    
    /// <remarks>
///Set User Policy
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/SetUserPolicy", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void SetUserPolicy(UserPolicy props) {
        this.Invoke("SetUserPolicy", new object[] {
            props});
    }
    
    public System.IAsyncResult BeginSetUserPolicy(UserPolicy props, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetUserPolicy", new object[] {
            props}, callback, asyncState);
    }
    
    public void EndSetUserPolicy(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks>
///Get iFolder Policy
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetiFolderPolicy", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public iFolderPolicy GetiFolderPolicy(string ifolderID) {
        object[] results = this.Invoke("GetiFolderPolicy", new object[] {
            ifolderID});
        return ((iFolderPolicy)(results[0]));
    }
    
    public System.IAsyncResult BeginGetiFolderPolicy(string ifolderID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetiFolderPolicy", new object[] {
            ifolderID}, callback, asyncState);
    }
    
    public iFolderPolicy EndGetiFolderPolicy(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((iFolderPolicy)(results[0]));
    }
    
    /// <remarks>
///Set iFolder Policy
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/SetiFolderPolicy", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void SetiFolderPolicy(iFolderPolicy props) {
        this.Invoke("SetiFolderPolicy", new object[] {
            props});
    }
    
    public System.IAsyncResult BeginSetiFolderPolicy(iFolderPolicy props, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetiFolderPolicy", new object[] {
            props}, callback, asyncState);
    }
    
    public void EndSetiFolderPolicy(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
}

/// <remarks/>
[System.Xml.Serialization.XmlType(Namespace="http://novell.com/ifolder/webservice/")]
public class iFolderServer {
    
    /// <remarks/>
    public string Version;
    
    /// <remarks/>
    public string HostName;
    
    /// <remarks/>
    public string MachineName;
    
    /// <remarks/>
    public string OSVersion;
    
    /// <remarks/>
    public string UserName;
}

/// <remarks/>
[System.Xml.Serialization.XmlType(Namespace="http://novell.com/ifolder/webservice/")]
public class iFolderSystem {
    
    /// <remarks/>
    public string ID;
    
    /// <remarks/>
    public string Name;
    
    /// <remarks/>
    public string Version;
    
    /// <remarks/>
    public string Description;
}

/// <remarks/>
[System.Xml.Serialization.XmlType(Namespace="http://novell.com/ifolder/webservice/")]
public class iFolder {
    
    /// <remarks/>
    public string ID;
    
    /// <remarks/>
    public string Name;
    
    /// <remarks/>
    public string Description;
    
    /// <remarks/>
    public string OwnerID;
    
    /// <remarks/>
    public string OwnerName;
    
    /// <remarks/>
    public string Domain;
    
    /// <remarks/>
    public string ManagedPath;
    
    /// <remarks/>
    public string UnManagedPath;
    
    /// <remarks/>
    public long Size;
    
    /// <remarks/>
    public Rights Rights;
    
    /// <remarks/>
    public System.DateTime LastModified;
    
    /// <remarks/>
    public bool Published;
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/ifolder/webservice/")]
public enum Rights {
    
    /// <remarks/>
    Deny,
    
    /// <remarks/>
    ReadOnly,
    
    /// <remarks/>
    ReadWrite,
    
    /// <remarks/>
    Admin,
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/ifolder/webservice/")]
public enum iFolderType {
    
    /// <remarks/>
    All,
    
    /// <remarks/>
    Orphaned,
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/ifolder/webservice/")]
public enum MemberRole {
    
    /// <remarks/>
    Any,
    
    /// <remarks/>
    Owner,
    
    /// <remarks/>
    Shared,
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/ifolder/webservice/")]
public enum SearchOperation {
    
    /// <remarks/>
    BeginsWith,
    
    /// <remarks/>
    EndsWith,
    
    /// <remarks/>
    Contains,
    
    /// <remarks/>
    Equals,
}

/// <remarks/>
[System.Xml.Serialization.XmlType(Namespace="http://novell.com/ifolder/webservice/")]
public class ChangeEntry {
    
    /// <remarks/>
    public System.DateTime Time;
    
    /// <remarks/>
    public ChangeType Type;
    
    /// <remarks/>
    public string EntryID;
    
    /// <remarks/>
    public string EntryName;
    
    /// <remarks/>
    public string UserID;
    
    /// <remarks/>
    public string UserFullName;
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/ifolder/webservice/")]
public enum ChangeType {
    
    /// <remarks/>
    Add,
    
    /// <remarks/>
    Modify,
    
    /// <remarks/>
    Delete,
    
    /// <remarks/>
    Unknown,
}

/// <remarks/>
[System.Xml.Serialization.XmlType(Namespace="http://novell.com/ifolder/webservice/")]
[System.Xml.Serialization.XmlInclude(typeof(iFolderUserDetails))]
public class iFolderUser {
    
    /// <remarks/>
    public string UserID;
    
    /// <remarks/>
    public string UserName;
    
    /// <remarks/>
    public string FullName;
    
    /// <remarks/>
    public Rights Rights;
    
    /// <remarks/>
    public bool Enabled;
    
    /// <remarks/>
    public bool IsAdmin;
}

/// <remarks/>
[System.Xml.Serialization.XmlType(Namespace="http://novell.com/ifolder/webservice/")]
public class iFolderUserDetails : iFolderUser {
    
    /// <remarks/>
    public int SyncIntervalEffective;
    
    /// <remarks/>
    public System.DateTime LastLogin;
    
    /// <remarks/>
    public string LdapContext;
    
    /// <remarks/>
    public int OwnediFolderCount;
    
    /// <remarks/>
    public int SharediFolderCount;
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/ifolder/webservice/")]
public enum SearchProperty {
    
    /// <remarks/>
    UserName,
    
    /// <remarks/>
    Name,
    
    /// <remarks/>
    LastName,
    
    /// <remarks/>
    FirstName,
}

/// <remarks/>
[System.Xml.Serialization.XmlType(Namespace="http://novell.com/ifolder/webservice/")]
public class SystemPolicy {
    
    /// <remarks/>
    public long SpaceLimitUser;
    
    /// <remarks/>
    public int SyncInterval;
    
    /// <remarks/>
    public long FileSizeLimit;
    
    /// <remarks/>
    public string[] FileTypesIncludes;
    
    /// <remarks/>
    public string[] FileTypesExcludes;
}

/// <remarks/>
[System.Xml.Serialization.XmlType(Namespace="http://novell.com/ifolder/webservice/")]
public class UserPolicy {
    
    /// <remarks/>
    public string UserID;
    
    /// <remarks/>
    public bool LoginEnabled;
    
    /// <remarks/>
    public long SpaceLimit;
    
    /// <remarks/>
    public long SpaceLimitEffective;
    
    /// <remarks/>
    public long FileSizeLimit;
    
    /// <remarks/>
    public long FileSizeLimitEffective;
    
    /// <remarks/>
    public long SpaceUsed;
    
    /// <remarks/>
    public long SpaceAvailable;
    
    /// <remarks/>
    public int SyncInterval;
    
    /// <remarks/>
    public int SyncIntervalEffective;
    
    /// <remarks/>
    public string[] FileTypesIncludes;
    
    /// <remarks/>
    public string[] FileTypesIncludesEffective;
    
    /// <remarks/>
    public string[] FileTypesExcludes;
    
    /// <remarks/>
    public string[] FileTypesExcludesEffective;
}

/// <remarks/>
[System.Xml.Serialization.XmlType(Namespace="http://novell.com/ifolder/webservice/")]
public class iFolderPolicy {
    
    /// <remarks/>
    public string iFolderID;
    
    /// <remarks/>
    public bool Locked;
    
    /// <remarks/>
    public long SpaceLimit;
    
    /// <remarks/>
    public long SpaceLimitEffective;
    
    /// <remarks/>
    public long SpaceUsed;
    
    /// <remarks/>
    public long SpaceAvailable;
    
    /// <remarks/>
    public int SyncInterval;
    
    /// <remarks/>
    public string[] FileTypesIncludes;
    
    /// <remarks/>
    public string[] FileTypesExcludes;
    
    /// <remarks/>
    public long FileSizeLimit;
}

