// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 1.1.4322.573
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------


/// <remarks/>
/// <remarks>
///Web Service providing access to domain server functionality.
///</remarks>
[System.Web.Services.WebServiceBinding(Name="Domain ServiceSoap",Namespace="http://novell.com/ifolder/domain"),
System.Diagnostics.DebuggerStepThroughAttribute(),
System.ComponentModel.DesignerCategoryAttribute("code")]
public class DomainService : System.Web.Services.Protocols.SoapHttpClientProtocol {

    public DomainService () {
        this.Url = "http://137.65.58.216:8086/DomainService.asmx";
    }

    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/domain/GetDomainInfo",RequestNamespace="http://novell.com/ifolder/domain",ResponseNamespace="http://novell.com/ifolder/domain",ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped,Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public virtual DomainInfo GetDomainInfo() {
        System.Object[] results = this.Invoke("GetDomainInfo", new object[0]);
        return ((DomainInfo)(results[0]));
    }

    public virtual System.IAsyncResult BeginGetDomainInfo(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetDomainInfo", new object[0], callback, asyncState);
    }

    public virtual DomainInfo EndGetDomainInfo(System.IAsyncResult asyncResult) {
        System.Object[] results = this.EndInvoke(asyncResult);
        return ((DomainInfo)(results[0]));
    }

    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/domain/ProvisionUser",RequestNamespace="http://novell.com/ifolder/domain",ResponseNamespace="http://novell.com/ifolder/domain",ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped,Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public virtual ProvisionInfo ProvisionUser(string user, string password) {
        System.Object[] results = this.Invoke("ProvisionUser", new object[] {
            user,
            password});
        return ((ProvisionInfo)(results[0]));
    }

    public virtual System.IAsyncResult BeginProvisionUser(string user, string password, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ProvisionUser", new object[] {
            user,
            password}, callback, asyncState);
    }

    public virtual ProvisionInfo EndProvisionUser(System.IAsyncResult asyncResult) {
        System.Object[] results = this.EndInvoke(asyncResult);
        return ((ProvisionInfo)(results[0]));
    }

    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/domain/CreateMaster",RequestNamespace="http://novell.com/ifolder/domain",ResponseNamespace="http://novell.com/ifolder/domain",ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped,Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public virtual string CreateMaster(string id, string name, string rootID, string rootName, string user) {
        System.Object[] results = this.Invoke("CreateMaster", new object[] {
            id,
            name,
            rootID,
            rootName,
            user});
        return ((string)(results[0]));
    }

    public virtual System.IAsyncResult BeginCreateMaster(string id, string name, string rootID, string rootName, string user, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CreateMaster", new object[] {
            id,
            name,
            rootID,
            rootName,
            user}, callback, asyncState);
    }

    public virtual string EndCreateMaster(System.IAsyncResult asyncResult) {
        System.Object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }

    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/domain/DeleteMaster",RequestNamespace="http://novell.com/ifolder/domain",ResponseNamespace="http://novell.com/ifolder/domain",ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped,Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public virtual void DeleteMaster(string id) {
        this.Invoke("DeleteMaster", new object[] {
            id});
    }

    public virtual System.IAsyncResult BeginDeleteMaster(string id, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("DeleteMaster", new object[] {
            id}, callback, asyncState);
    }

    public virtual void EndDeleteMaster(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
}

/// <remarks/>
[System.Xml.Serialization.XmlType(Namespace="http://novell.com/ifolder/domain")]
public class DomainInfo {

    /// <remarks/>
    public string Name;

    /// <remarks/>
    public string Description;

    /// <remarks/>
    public string ID;

    /// <remarks/>
    public string RosterID;

    /// <remarks/>
    public string RosterName;
}

/// <remarks/>
[System.Xml.Serialization.XmlType(Namespace="http://novell.com/ifolder/domain")]
public class ProvisionInfo {

    /// <remarks/>
    public string UserID;

    /// <remarks/>
    public string POBoxID;

    /// <remarks/>
    public string POBoxName;
}

