// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 1.1.4322.573
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

// 
// This source code was auto-generated by Mono Web Services Description Language Utility
//

/// <remarks/>
/// <remarks>
///Web Service providing access to Simias
///</remarks>
[System.Web.Services.WebServiceBinding(Name="Simias Web ServiceSoap",Namespace="http://novell.com/simias/web/"),
System.Diagnostics.DebuggerStepThroughAttribute(),
System.ComponentModel.DesignerCategoryAttribute("code")]
public class SimiasWebService: System.Web.Services.Protocols.SoapHttpClientProtocol {

    public SimiasWebService () {
        this.Url = "http://127.0.0.1:8086/simias10/Simias.asmx";
    }

    /// <remarks>
    ///GetSimiasInformation
    ///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/GetSimiasInformation",RequestNamespace="http://novell.com/simias/web/",ResponseNamespace="http://novell.com/simias/web/",ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped,Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public string GetSimiasInformation() {
        object[] results = this.Invoke("GetSimiasInformation", new object[0]);
        return ((string)(results[0]));
    }

    public System.IAsyncResult BeginGetSimiasInformation(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetSimiasInformation", new object[0], callback, asyncState);
    }

    public string EndGetSimiasInformation(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }

    /// <remarks>
    ///GetDomainInformation
    ///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/GetDomainInformation",RequestNamespace="http://novell.com/simias/web/",ResponseNamespace="http://novell.com/simias/web/",ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped,Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public DomainInformation GetDomainInformation(string domainID) {
        object[] results = this.Invoke("GetDomainInformation", new object[] {
            domainID});
        return ((DomainInformation)(results[0]));
    }

    public System.IAsyncResult BeginGetDomainInformation(string domainID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetDomainInformation", new object[] {
            domainID}, callback, asyncState);
    }

    public DomainInformation EndGetDomainInformation(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((DomainInformation)(results[0]));
    }

    /// <remarks>
    ///Get a list of local domains
    ///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/GetDomains",RequestNamespace="http://novell.com/simias/web/",ResponseNamespace="http://novell.com/simias/web/",ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped,Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public DomainInformation[] GetDomains(bool onlySlaves) {
        object[] results = this.Invoke("GetDomains", new object[] {
            onlySlaves});
        return ((DomainInformation[])(results[0]));
    }

    public System.IAsyncResult BeginGetDomains(bool onlySlaves, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetDomains", new object[] {
            onlySlaves}, callback, asyncState);
    }

    public DomainInformation[] EndGetDomains(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((DomainInformation[])(results[0]));
    }

    /// <remarks>
    ///SetDomainCredentials
    ///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/SetDomainCredentials",RequestNamespace="http://novell.com/simias/web/",ResponseNamespace="http://novell.com/simias/web/",ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped,Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public int SetDomainCredentials(string domainID, string memberID, string password) {
        object[] results = this.Invoke("SetDomainCredentials", new object[] {
            domainID,
            memberID,
            password});
        return ((int)(results[0]));
    }

    public System.IAsyncResult BeginSetDomainCredentials(string domainID, string memberID, string password, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetDomainCredentials", new object[] {
            domainID,
            memberID,
            password}, callback, asyncState);
    }

    public int EndSetDomainCredentials(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((int)(results[0]));
    }

    /// <remarks>
    ///WebMethod to check if a domain is active
    ///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/IsDomainActive",RequestNamespace="http://novell.com/simias/web/",ResponseNamespace="http://novell.com/simias/web/",ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped,Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public bool IsDomainActive(string domainID) {
        object[] results = this.Invoke("IsDomainActive", new object[] {
            domainID});
        return ((bool)(results[0]));
    }

    public System.IAsyncResult BeginIsDomainActive(string domainID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("IsDomainActive", new object[] {
            domainID}, callback, asyncState);
    }

    public bool EndIsDomainActive(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }

    /// <remarks>
    ///SetDomainActive - enables synchronization to the remote
    ///            server
    ///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/SetDomainActive",RequestNamespace="http://novell.com/simias/web/",ResponseNamespace="http://novell.com/simias/web/",ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped,Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public int SetDomainActive(string domainID) {
        object[] results = this.Invoke("SetDomainActive", new object[] {
            domainID});
        return ((int)(results[0]));
    }

    public System.IAsyncResult BeginSetDomainActive(string domainID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetDomainActive", new object[] {
            domainID}, callback, asyncState);
    }

    public int EndSetDomainActive(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((int)(results[0]));
    }

    /// <remarks>
    ///SetDomainInactive - disables remote synchronization
    ///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/SetDomainInactive",RequestNamespace="http://novell.com/simias/web/",ResponseNamespace="http://novell.com/simias/web/",ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped,Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public int SetDomainInactive(string domainID) {
        object[] results = this.Invoke("SetDomainInactive", new object[] {
            domainID});
        return ((int)(results[0]));
    }

    public System.IAsyncResult BeginSetDomainInactive(string domainID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetDomainInactive", new object[] {
            domainID}, callback, asyncState);
    }

    public int EndSetDomainInactive(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((int)(results[0]));
    }

    /// <remarks>
    ///ValidCredentials
    ///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/ValidCredentials",RequestNamespace="http://novell.com/simias/web/",ResponseNamespace="http://novell.com/simias/web/",ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped,Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public bool ValidCredentials(string domainID, string memberID) {
        object[] results = this.Invoke("ValidCredentials", new object[] {
            domainID,
            memberID});
        return ((bool)(results[0]));
    }

    public System.IAsyncResult BeginValidCredentials(string domainID, string memberID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ValidCredentials", new object[] {
            domainID,
            memberID}, callback, asyncState);
    }

    public bool EndValidCredentials(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }

    /// <remarks>
    ///Save domain credentials to the local store
    ///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/SaveDomainCredentials",RequestNamespace="http://novell.com/simias/web/",ResponseNamespace="http://novell.com/simias/web/",ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped,Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void SaveDomainCredentials(string domainID, string credentials, CredentialType type) {
        this.Invoke("SaveDomainCredentials", new object[] {
            domainID,
            credentials,
            type});
    }

    public System.IAsyncResult BeginSaveDomainCredentials(string domainID, string credentials, CredentialType type, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SaveDomainCredentials", new object[] {
            domainID,
            credentials,
            type}, callback, asyncState);
    }

    public void EndSaveDomainCredentials(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }

    /// <remarks>
    ///Get the saved credentials from a domain
    ///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/GetSavedDomainCredentials",RequestNamespace="http://novell.com/simias/web/",ResponseNamespace="http://novell.com/simias/web/",ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped,Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public CredentialType GetSavedDomainCredentials(string domainID, out string userID, out string credentials) {
        object[] results = this.Invoke("GetSavedDomainCredentials", new object[] {
            domainID});
        credentials = ((string)(results[2]));
        userID = ((string)(results[1]));
        return ((CredentialType)(results[0]));
    }

    public System.IAsyncResult BeginGetSavedDomainCredentials(string domainID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetSavedDomainCredentials", new object[] {
            domainID}, callback, asyncState);
    }

    public CredentialType EndGetSavedDomainCredentials(System.IAsyncResult asyncResult, out string userID, out string credentials) {
        object[] results = this.EndInvoke(asyncResult);
        credentials = ((string)(results[2]));
        userID = ((string)(results[1]));
        return ((CredentialType)(results[0]));
    }

    /// <remarks>
    ///Connects to a Domain
    ///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/ConnectToDomain",RequestNamespace="http://novell.com/simias/web/",ResponseNamespace="http://novell.com/simias/web/",ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped,Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public DomainInformation ConnectToDomain(string UserName, string Password, string Host) {
        object[] results = this.Invoke("ConnectToDomain", new object[] {
            UserName,
            Password,
            Host});
        return ((DomainInformation)(results[0]));
    }

    public System.IAsyncResult BeginConnectToDomain(string UserName, string Password, string Host, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ConnectToDomain", new object[] {
            UserName,
            Password,
            Host}, callback, asyncState);
    }

    public DomainInformation EndConnectToDomain(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((DomainInformation)(results[0]));
    }

    /// <remarks>
    ///Removes a domain account from the workstation
    ///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/LeaveDomain",RequestNamespace="http://novell.com/simias/web/",ResponseNamespace="http://novell.com/simias/web/",ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped,Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void LeaveDomain(string DomainID, bool LocalOnly) {
        this.Invoke("LeaveDomain", new object[] {
            DomainID,
            LocalOnly});
    }

    public System.IAsyncResult BeginLeaveDomain(string DomainID, bool LocalOnly, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("LeaveDomain", new object[] {
            DomainID,
            LocalOnly}, callback, asyncState);
    }

    public void EndLeaveDomain(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }

    /// <remarks>
    ///Change the default domain to the specified domain ID
    ///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/SetDefaultDomain",RequestNamespace="http://novell.com/simias/web/",ResponseNamespace="http://novell.com/simias/web/",ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped,Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void SetDefaultDomain(string domainID) {
        this.Invoke("SetDefaultDomain", new object[] {
            domainID});
    }

    public System.IAsyncResult BeginSetDefaultDomain(string domainID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetDefaultDomain", new object[] {
            domainID}, callback, asyncState);
    }

    public void EndSetDefaultDomain(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }

    /// <remarks>
    ///Get the ID of the default domain
    ///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/GetDefaultDomainID",RequestNamespace="http://novell.com/simias/web/",ResponseNamespace="http://novell.com/simias/web/",ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped,Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public string GetDefaultDomainID() {
        object[] results = this.Invoke("GetDefaultDomainID", new object[0]);
        return ((string)(results[0]));
    }

    public System.IAsyncResult BeginGetDefaultDomainID(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetDefaultDomainID", new object[0], callback, asyncState);
    }

    public string EndGetDefaultDomainID(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
}

/// <remarks/>
[System.Xml.Serialization.XmlType(Namespace="http://novell.com/simias/web/")]
public class DomainInformation {

    /// <remarks/>
    public DomainType Type;

    /// <remarks/>
    public bool Active;

    /// <remarks/>
    public string Name;

    /// <remarks/>
    public string Description;

    /// <remarks/>
    public string ID;

    /// <remarks/>
    public string RosterID;

    /// <remarks/>
    public string RosterName;

    /// <remarks/>
    public string MemberUserID;

    /// <remarks/>
    public string MemberName;

    /// <remarks/>
    public string RemoteUrl;

    /// <remarks/>
    public string POBoxID;

    /// <remarks/>
    public string Host;

    /// <remarks/>
    public bool IsSlave;

    /// <remarks/>
    public bool IsDefault;
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/simias/web/")]
public enum DomainType {

    /// <remarks/>
    Workgroup,

    /// <remarks/>
    Enterprise,
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/simias/web/")]
public enum CredentialType {

    /// <remarks/>
    None,

    /// <remarks/>
    NotRequired,

    /// <remarks/>
    Basic,

    /// <remarks/>
    PPK,
}

