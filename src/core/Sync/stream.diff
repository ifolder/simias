Index: StreamStream.cs
===================================================================
--- StreamStream.cs	(revision 6917)
+++ StreamStream.cs	(working copy)
@@ -203,7 +203,7 @@
 		/// <returns>The number of bytes read.</returns>
 		public int Read(Stream outStream, int count)
 		{
-			wStream = outStream;
+//			wStream = outStream;
 			int bytesLeft = count;
 			while(bytesLeft > 0)
 			{
@@ -212,9 +212,10 @@
 				if (bytesRead != 0)
 				{
 					writeComplete.WaitOne();
+					wStream = outStream;
 					if (exception != null)
 						throw exception;
-					outStream.BeginWrite(buffer, 0, bytesRead, new AsyncCallback(Read_WriteComplete), buffer);
+					wStream.BeginWrite(buffer, 0, bytesRead, new AsyncCallback(Read_WriteComplete), buffer);
 					bytesLeft -= bytesRead;
 				}
 				else break;
Index: Http.cs
===================================================================
--- Http.cs	(revision 6916)
+++ Http.cs	(working copy)
@@ -823,6 +823,9 @@
 		public static string	version = "1.0";
 		SyncService service;
 
+		/// </summary>
+		private static readonly ISimiasLog log = 
+			SimiasLogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
 		~HttpService()
 		{
 			Dispose(true);
@@ -1162,6 +1165,7 @@
 			long offset, size;
 			if (GetRange(request, out offset, out size))
 			{
+				log.Debug("WriteFile: offset {0} size {1}", offset, size);
 				service.Write(request.InputStream, offset, (int)size);
 			}
 			else
Index: SyncService.cs
===================================================================
--- SyncService.cs	(revision 6916)
+++ SyncService.cs	(working copy)
@@ -867,6 +867,7 @@
 		/// <param name="count">The number of bytes to write.</param>
 		public void Write(Stream stream, long offset, int count)
 		{
+			log.Debug("InfileWrite offser {0}, count {1}", offset, count);
 			inFile.WritePosition = offset;
 			inFile.Write(stream, count);
 			logger.LogAccessDebug("WriteFile", inFile.Name, collection.ID, "Success");
@@ -893,6 +894,7 @@
 		/// <returns>The number of bytes read.</returns>
 		public int Read(Stream stream, long offset, int count)
 		{
+			log.Debug("OutfileRead offser {0}, count {1}", offset, count);
 			outFile.ReadPosition = offset;
 			int bytesRead = outFile.Read(stream, count);
 			logger.LogAccessDebug("ReadFile", outFile.Name, collection.ID, "Success");
