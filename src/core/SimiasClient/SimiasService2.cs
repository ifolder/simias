// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 1.1.4322.2032
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

// 
// This source code was auto-generated by Mono Web Services Description Language Utility
//


/// <remarks/>
/// <remarks>
///Web Service providing access to Simias
///</remarks>
[System.Web.Services.WebServiceBinding(Name="Simias Web ServiceSoap", Namespace="http://novell.com/simias/web/")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public class SimiasWebService : System.Web.Services.Protocols.SoapHttpClientProtocol {
    
    public SimiasWebService() {
        this.Url = "http://127.0.0.1/simias10/Simias.asmx";
    }
    
    /// <remarks>
///Allows a client to ping to make sure the Web Service is up and running
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/PingSimias", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void PingSimias() {
        this.Invoke("PingSimias", new object[0]);
    }
    
    public System.IAsyncResult BeginPingSimias(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("PingSimias", new object[0], callback, asyncState);
    }
    
    public void EndPingSimias(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks>
///Add a member to the domain.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/AddMemberToDomain", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void AddMemberToDomain(string DomainID, string MemberName, string MemberID, string PublicKey, string GivenName, string FamilyName) {
        this.Invoke("AddMemberToDomain", new object[] {
            DomainID,
            MemberName,
            MemberID,
            PublicKey,
            GivenName,
            FamilyName});
    }
    
    public System.IAsyncResult BeginAddMemberToDomain(string DomainID, string MemberName, string MemberID, string PublicKey, string GivenName, string FamilyName, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("AddMemberToDomain", new object[] {
            DomainID,
            MemberName,
            MemberID,
            PublicKey,
            GivenName,
            FamilyName}, callback, asyncState);
    }
    
    public void EndAddMemberToDomain(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks>
///Remove a member from the domain.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/RemoveMemberFromDomain", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void RemoveMemberFromDomain(string DomainID, string MemberID) {
        this.Invoke("RemoveMemberFromDomain", new object[] {
            DomainID,
            MemberID});
    }
    
    public System.IAsyncResult BeginRemoveMemberFromDomain(string DomainID, string MemberID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("RemoveMemberFromDomain", new object[] {
            DomainID,
            MemberID}, callback, asyncState);
    }
    
    public void EndRemoveMemberFromDomain(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks>
///End the search for domain members.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/FindCloseMembers", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void FindCloseMembers(string domainID, string searchContext) {
        this.Invoke("FindCloseMembers", new object[] {
            domainID,
            searchContext});
    }
    
    public System.IAsyncResult BeginFindCloseMembers(string domainID, string searchContext, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("FindCloseMembers", new object[] {
            domainID,
            searchContext}, callback, asyncState);
    }
    
    public void EndFindCloseMembers(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks>
///Starts a search for all domain members.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/FindFirstMembers", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public bool FindFirstMembers(string domainID, int count, out string searchContext, out MemberInfo[] memberList, out int totalMembers) {
        object[] results = this.Invoke("FindFirstMembers", new object[] {
            domainID,
            count});
        totalMembers = ((int)(results[3]));
        memberList = ((MemberInfo[])(results[2]));
        searchContext = ((string)(results[1]));
        return ((bool)(results[0]));
    }
    
    public System.IAsyncResult BeginFindFirstMembers(string domainID, int count, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("FindFirstMembers", new object[] {
            domainID,
            count}, callback, asyncState);
    }
    
    public bool EndFindFirstMembers(System.IAsyncResult asyncResult, out string searchContext, out MemberInfo[] memberList, out int totalMembers) {
        object[] results = this.EndInvoke(asyncResult);
        totalMembers = ((int)(results[3]));
        memberList = ((MemberInfo[])(results[2]));
        searchContext = ((string)(results[1]));
        return ((bool)(results[0]));
    }
    
    /// <remarks>
///Starts a search for a specific set of domain members.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/FindFirstSpecificMembers", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public bool FindFirstSpecificMembers(string domainID, string attributeName, string searchString, SearchType operation, int count, out string searchContext, out MemberInfo[] memberList, out int totalMembers) {
        object[] results = this.Invoke("FindFirstSpecificMembers", new object[] {
            domainID,
            attributeName,
            searchString,
            operation,
            count});
        totalMembers = ((int)(results[3]));
        memberList = ((MemberInfo[])(results[2]));
        searchContext = ((string)(results[1]));
        return ((bool)(results[0]));
    }
    
    public System.IAsyncResult BeginFindFirstSpecificMembers(string domainID, string attributeName, string searchString, SearchType operation, int count, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("FindFirstSpecificMembers", new object[] {
            domainID,
            attributeName,
            searchString,
            operation,
            count}, callback, asyncState);
    }
    
    public bool EndFindFirstSpecificMembers(System.IAsyncResult asyncResult, out string searchContext, out MemberInfo[] memberList, out int totalMembers) {
        object[] results = this.EndInvoke(asyncResult);
        totalMembers = ((int)(results[3]));
        memberList = ((MemberInfo[])(results[2]));
        searchContext = ((string)(results[1]));
        return ((bool)(results[0]));
    }
    
    /// <remarks>
///Continues the search for domain members from the current record location.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/FindNextMembers", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public bool FindNextMembers(string domainID, ref string searchContext, int count, out MemberInfo[] memberList) {
        object[] results = this.Invoke("FindNextMembers", new object[] {
            domainID,
            searchContext,
            count});
        memberList = ((MemberInfo[])(results[2]));
        searchContext = ((string)(results[1]));
        return ((bool)(results[0]));
    }
    
    public System.IAsyncResult BeginFindNextMembers(string domainID, string searchContext, int count, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("FindNextMembers", new object[] {
            domainID,
            searchContext,
            count}, callback, asyncState);
    }
    
    public bool EndFindNextMembers(System.IAsyncResult asyncResult, out string searchContext, out MemberInfo[] memberList) {
        object[] results = this.EndInvoke(asyncResult);
        memberList = ((MemberInfo[])(results[2]));
        searchContext = ((string)(results[1]));
        return ((bool)(results[0]));
    }
    
    /// <remarks>
///Continues the search for domain members previous to the current record location.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/FindPreviousMembers", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public bool FindPreviousMembers(string domainID, ref string searchContext, int count, out MemberInfo[] memberList) {
        object[] results = this.Invoke("FindPreviousMembers", new object[] {
            domainID,
            searchContext,
            count});
        memberList = ((MemberInfo[])(results[2]));
        searchContext = ((string)(results[1]));
        return ((bool)(results[0]));
    }
    
    public System.IAsyncResult BeginFindPreviousMembers(string domainID, string searchContext, int count, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("FindPreviousMembers", new object[] {
            domainID,
            searchContext,
            count}, callback, asyncState);
    }
    
    public bool EndFindPreviousMembers(System.IAsyncResult asyncResult, out string searchContext, out MemberInfo[] memberList) {
        object[] results = this.EndInvoke(asyncResult);
        memberList = ((MemberInfo[])(results[2]));
        searchContext = ((string)(results[1]));
        return ((bool)(results[0]));
    }
    
    /// <remarks>
///Continues the search for domain members from the specified record location.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/FindSeekMembers", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public bool FindSeekMembers(string domainID, ref string searchContext, int offset, int count, out MemberInfo[] memberList) {
        object[] results = this.Invoke("FindSeekMembers", new object[] {
            domainID,
            searchContext,
            offset,
            count});
        memberList = ((MemberInfo[])(results[2]));
        searchContext = ((string)(results[1]));
        return ((bool)(results[0]));
    }
    
    public System.IAsyncResult BeginFindSeekMembers(string domainID, string searchContext, int offset, int count, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("FindSeekMembers", new object[] {
            domainID,
            searchContext,
            offset,
            count}, callback, asyncState);
    }
    
    public bool EndFindSeekMembers(System.IAsyncResult asyncResult, out string searchContext, out MemberInfo[] memberList) {
        object[] results = this.EndInvoke(asyncResult);
        memberList = ((MemberInfo[])(results[2]));
        searchContext = ((string)(results[1]));
        return ((bool)(results[0]));
    }
    
    /// <remarks>
///GetSimiasInformation
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/GetSimiasInformation", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public string GetSimiasInformation() {
        object[] results = this.Invoke("GetSimiasInformation", new object[0]);
        return ((string)(results[0]));
    }
    
    public System.IAsyncResult BeginGetSimiasInformation(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetSimiasInformation", new object[0], callback, asyncState);
    }
    
    public string EndGetSimiasInformation(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks>
///GetDomainInformation
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/GetDomainInformation", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public DomainInformation GetDomainInformation(string domainID) {
        object[] results = this.Invoke("GetDomainInformation", new object[] {
            domainID});
        return ((DomainInformation)(results[0]));
    }
    
    public System.IAsyncResult BeginGetDomainInformation(string domainID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetDomainInformation", new object[] {
            domainID}, callback, asyncState);
    }
    
    public DomainInformation EndGetDomainInformation(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((DomainInformation)(results[0]));
    }
    
    /// <remarks>
///Get a list of local domains
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/GetDomains", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public DomainInformation[] GetDomains(bool onlySlaves) {
        object[] results = this.Invoke("GetDomains", new object[] {
            onlySlaves});
        return ((DomainInformation[])(results[0]));
    }
    
    public System.IAsyncResult BeginGetDomains(bool onlySlaves, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetDomains", new object[] {
            onlySlaves}, callback, asyncState);
    }
    
    public DomainInformation[] EndGetDomains(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((DomainInformation[])(results[0]));
    }
    
    /// <remarks>
///Login or authenticate to a remote domain
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/LoginToRemoteDomain", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public Status LoginToRemoteDomain(string domainID, string password) {
        object[] results = this.Invoke("LoginToRemoteDomain", new object[] {
            domainID,
            password});
        return ((Status)(results[0]));
    }
    
    public System.IAsyncResult BeginLoginToRemoteDomain(string domainID, string password, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("LoginToRemoteDomain", new object[] {
            domainID,
            password}, callback, asyncState);
    }
    
    public Status EndLoginToRemoteDomain(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((Status)(results[0]));
    }
    
    /// <remarks>
///Logout from a remote domain
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/LogoutFromRemoteDomain", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public Status LogoutFromRemoteDomain(string domainID) {
        object[] results = this.Invoke("LogoutFromRemoteDomain", new object[] {
            domainID});
        return ((Status)(results[0]));
    }
    
    public System.IAsyncResult BeginLogoutFromRemoteDomain(string domainID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("LogoutFromRemoteDomain", new object[] {
            domainID}, callback, asyncState);
    }
    
    public Status EndLogoutFromRemoteDomain(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((Status)(results[0]));
    }
    
    /// <remarks>
///Disable automatic authentication to the specified domain
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/DisableDomainAutoLogin", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void DisableDomainAutoLogin(string domainID) {
        this.Invoke("DisableDomainAutoLogin", new object[] {
            domainID});
    }
    
    public System.IAsyncResult BeginDisableDomainAutoLogin(string domainID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("DisableDomainAutoLogin", new object[] {
            domainID}, callback, asyncState);
    }
    
    public void EndDisableDomainAutoLogin(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks>
///WebMethod to check if a domain is active
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/IsDomainActive", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public bool IsDomainActive(string domainID) {
        object[] results = this.Invoke("IsDomainActive", new object[] {
            domainID});
        return ((bool)(results[0]));
    }
    
    public System.IAsyncResult BeginIsDomainActive(string domainID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("IsDomainActive", new object[] {
            domainID}, callback, asyncState);
    }
    
    public bool EndIsDomainActive(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks>
///SetDomainActive - enables synchronization to the remote server
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/SetDomainActive", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public int SetDomainActive(string domainID) {
        object[] results = this.Invoke("SetDomainActive", new object[] {
            domainID});
        return ((int)(results[0]));
    }
    
    public System.IAsyncResult BeginSetDomainActive(string domainID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetDomainActive", new object[] {
            domainID}, callback, asyncState);
    }
    
    public int EndSetDomainActive(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((int)(results[0]));
    }
    
    /// <remarks>
///SetDomainInactive - disables remote synchronization
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/SetDomainInactive", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public int SetDomainInactive(string domainID) {
        object[] results = this.Invoke("SetDomainInactive", new object[] {
            domainID});
        return ((int)(results[0]));
    }
    
    public System.IAsyncResult BeginSetDomainInactive(string domainID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetDomainInactive", new object[] {
            domainID}, callback, asyncState);
    }
    
    public int EndSetDomainInactive(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((int)(results[0]));
    }
    
    /// <remarks>
///ValidCredentials
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/ValidCredentials", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public bool ValidCredentials(string domainID, string memberID) {
        object[] results = this.Invoke("ValidCredentials", new object[] {
            domainID,
            memberID});
        return ((bool)(results[0]));
    }
    
    public System.IAsyncResult BeginValidCredentials(string domainID, string memberID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ValidCredentials", new object[] {
            domainID,
            memberID}, callback, asyncState);
    }
    
    public bool EndValidCredentials(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks>
///Sets domain credentials in the local store
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/SetDomainCredentials", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void SetDomainCredentials(string domainID, string credentials, CredentialType type) {
        this.Invoke("SetDomainCredentials", new object[] {
            domainID,
            credentials,
            type});
    }
    
    public System.IAsyncResult BeginSetDomainCredentials(string domainID, string credentials, CredentialType type, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetDomainCredentials", new object[] {
            domainID,
            credentials,
            type}, callback, asyncState);
    }
    
    public void EndSetDomainCredentials(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks>
///Sets host's url to local domain
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/SetHostAddress", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void SetHostAddress(string Host, string PublicUrl, string PrivateUrl, string DomainID) {
        this.Invoke("SetHostAddress", new object[] {
            Host,
            PublicUrl,
            PrivateUrl,
            DomainID});
    }
    
    public System.IAsyncResult BeginSetHostAddress(string Host, string PublicUrl, string PrivateUrl, string DomainID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetHostAddress", new object[] {
            Host,
            PublicUrl,
            PrivateUrl,
            DomainID}, callback, asyncState);
    }
    
    public void EndSetHostAddress(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks>
///Stores domain passphrase in the local store
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/StorePassPhrase", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void StorePassPhrase(string domainID, string passPhrase, CredentialType type, bool rememberPassPhrase) {
        this.Invoke("StorePassPhrase", new object[] {
            domainID,
            passPhrase,
            type,
            rememberPassPhrase});
    }
    
    public System.IAsyncResult BeginStorePassPhrase(string domainID, string passPhrase, CredentialType type, bool rememberPassPhrase, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("StorePassPhrase", new object[] {
            domainID,
            passPhrase,
            type,
            rememberPassPhrase}, callback, asyncState);
    }
    
    public void EndStorePassPhrase(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks>
///Get the saved credentials from a domain
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/GetDomainCredentials", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public CredentialType GetDomainCredentials(string domainID, out string userID, out string credentials) {
        object[] results = this.Invoke("GetDomainCredentials", new object[] {
            domainID});
        credentials = ((string)(results[2]));
        userID = ((string)(results[1]));
        return ((CredentialType)(results[0]));
    }
    
    public System.IAsyncResult BeginGetDomainCredentials(string domainID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetDomainCredentials", new object[] {
            domainID}, callback, asyncState);
    }
    
    public CredentialType EndGetDomainCredentials(System.IAsyncResult asyncResult, out string userID, out string credentials) {
        object[] results = this.EndInvoke(asyncResult);
        credentials = ((string)(results[2]));
        userID = ((string)(results[1]));
        return ((CredentialType)(results[0]));
    }
    
    /// <remarks>
///Get the saved credentials from a domain
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/GetPassPhrase", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public string GetPassPhrase(string domainID) {
        object[] results = this.Invoke("GetPassPhrase", new object[] {
            domainID});
        return ((string)(results[0]));
    }
    
    public System.IAsyncResult BeginGetPassPhrase(string domainID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetPassPhrase", new object[] {
            domainID}, callback, asyncState);
    }
    
    public string EndGetPassPhrase(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks>
///Get the saved credentials from a domain
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/GetRememberOption", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public bool GetRememberOption(string domainID) {
        object[] results = this.Invoke("GetRememberOption", new object[] {
            domainID});
        return ((bool)(results[0]));
    }
    
    public System.IAsyncResult BeginGetRememberOption(string domainID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetRememberOption", new object[] {
            domainID}, callback, asyncState);
    }
    
    public bool EndGetRememberOption(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks>
///Connects to a Domain
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/ConnectToDomain", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public DomainInformation ConnectToDomain(string UserName, string Password, string Host) {
        object[] results = this.Invoke("ConnectToDomain", new object[] {
            UserName,
            Password,
            Host});
        return ((DomainInformation)(results[0]));
    }
    
    public System.IAsyncResult BeginConnectToDomain(string UserName, string Password, string Host, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ConnectToDomain", new object[] {
            UserName,
            Password,
            Host}, callback, asyncState);
    }
    
    public DomainInformation EndConnectToDomain(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((DomainInformation)(results[0]));
    }
    
    /// <remarks>
///Removes a domain account from the workstation
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/LeaveDomain", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void LeaveDomain(string DomainID, bool LocalOnly) {
        this.Invoke("LeaveDomain", new object[] {
            DomainID,
            LocalOnly});
    }
    
    public System.IAsyncResult BeginLeaveDomain(string DomainID, bool LocalOnly, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("LeaveDomain", new object[] {
            DomainID,
            LocalOnly}, callback, asyncState);
    }
    
    public void EndLeaveDomain(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks>
///Remove Certificate for this specified host
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/RemoveCertFromTable", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void RemoveCertFromTable(string host) {
        this.Invoke("RemoveCertFromTable", new object[] {
            host});
    }
    
    public System.IAsyncResult BeginRemoveCertFromTable(string host, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("RemoveCertFromTable", new object[] {
            host}, callback, asyncState);
    }
    
    public void EndRemoveCertFromTable(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks>
///Change the default domain to the specified domain ID
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/SetDefaultDomain", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void SetDefaultDomain(string domainID) {
        this.Invoke("SetDefaultDomain", new object[] {
            domainID});
    }
    
    public System.IAsyncResult BeginSetDefaultDomain(string domainID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetDefaultDomain", new object[] {
            domainID}, callback, asyncState);
    }
    
    public void EndSetDefaultDomain(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks>
///Get the ID of the default domain
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/GetDefaultDomainID", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public string GetDefaultDomainID() {
        object[] results = this.Invoke("GetDefaultDomainID", new object[0]);
        return ((string)(results[0]));
    }
    
    public System.IAsyncResult BeginGetDefaultDomainID(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetDefaultDomainID", new object[0], callback, asyncState);
    }
    
    public string EndGetDefaultDomainID(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks>
///Get the certificate of the specified host.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/GetCertificate", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public System.Byte[] GetCertificate(string host) {
        object[] results = this.Invoke("GetCertificate", new object[] {
            host});
        return ((System.Byte[])(results[0]));
    }
    
    public System.IAsyncResult BeginGetCertificate(string host, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetCertificate", new object[] {
            host}, callback, asyncState);
    }
    
    public System.Byte[] EndGetCertificate(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Byte[])(results[0]));
    }
    
    /// <remarks>
///Get the certificate of the specified host.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/GetCertificate2", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public System.Byte[] GetCertificate2(string host, out CertificateProblem Problem) {
        object[] results = this.Invoke("GetCertificate2", new object[] {
            host});
        Problem = ((CertificateProblem)(results[1]));
        return ((System.Byte[])(results[0]));
    }
    
    public System.IAsyncResult BeginGetCertificate2(string host, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetCertificate2", new object[] {
            host}, callback, asyncState);
    }
    
    public System.Byte[] EndGetCertificate2(System.IAsyncResult asyncResult, out CertificateProblem Problem) {
        object[] results = this.EndInvoke(asyncResult);
        Problem = ((CertificateProblem)(results[1]));
        return ((System.Byte[])(results[0]));
    }
    
    /// <remarks>
///Store the certificate for the specified host.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/StoreCertificate", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void StoreCertificate(System.Byte[] certificate, string host) {
        this.Invoke("StoreCertificate", new object[] {
            certificate,
            host});
    }
    
    public System.IAsyncResult BeginStoreCertificate(System.Byte[] certificate, string host, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("StoreCertificate", new object[] {
            certificate,
            host}, callback, asyncState);
    }
    
    public void EndStoreCertificate(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks>
///Store the certificate for the specified host.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/StoreDomainCertificate", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void StoreDomainCertificate(System.Byte[] certificate, string host, string domainID) {
        this.Invoke("StoreDomainCertificate", new object[] {
            certificate,
            host,
            domainID});
    }
    
    public System.IAsyncResult BeginStoreDomainCertificate(System.Byte[] certificate, string host, string domainID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("StoreDomainCertificate", new object[] {
            certificate,
            host,
            domainID}, callback, asyncState);
    }
    
    public void EndStoreDomainCertificate(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks>
///Get the Recovery Agent List.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/GetRAList", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public string[] GetRAList() {
        object[] results = this.Invoke("GetRAList", new object[0]);
        return ((string[])(results[0]));
    }
    
    public System.IAsyncResult BeginGetRAList(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetRAList", new object[0], callback, asyncState);
    }
    
    public string[] EndGetRAList(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string[])(results[0]));
    }
    
    /// <remarks>
///Get the Recovery Agent List.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/GetRAListOnClient", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public string[] GetRAListOnClient(string DomainID) {
        object[] results = this.Invoke("GetRAListOnClient", new object[] {
            DomainID});
        return ((string[])(results[0]));
    }
    
    public System.IAsyncResult BeginGetRAListOnClient(string DomainID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetRAListOnClient", new object[] {
            DomainID}, callback, asyncState);
    }
    
    public string[] EndGetRAListOnClient(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string[])(results[0]));
    }
    
    /// <remarks>
///Get the Recovery Agent certificate of the domain.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/GetRACertificate", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public System.Byte[] GetRACertificate(string rAgent) {
        object[] results = this.Invoke("GetRACertificate", new object[] {
            rAgent});
        return ((System.Byte[])(results[0]));
    }
    
    public System.IAsyncResult BeginGetRACertificate(string rAgent, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetRACertificate", new object[] {
            rAgent}, callback, asyncState);
    }
    
    public System.Byte[] EndGetRACertificate(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Byte[])(results[0]));
    }
    
    /// <remarks>
///Get the Recovery Agent List.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/GetRACertificateOnClient", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public System.Byte[] GetRACertificateOnClient(string DomainID, string rAgent) {
        object[] results = this.Invoke("GetRACertificateOnClient", new object[] {
            DomainID,
            rAgent});
        return ((System.Byte[])(results[0]));
    }
    
    public System.IAsyncResult BeginGetRACertificateOnClient(string DomainID, string rAgent, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetRACertificateOnClient", new object[] {
            DomainID,
            rAgent}, callback, asyncState);
    }
    
    public System.Byte[] EndGetRACertificateOnClient(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Byte[])(results[0]));
    }
    
    /// <remarks>
///Get the public key of the certificate
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/GetPublicKey", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public string GetPublicKey(string DomainID, string rAgent) {
        object[] results = this.Invoke("GetPublicKey", new object[] {
            DomainID,
            rAgent});
        return ((string)(results[0]));
    }
    
    public System.IAsyncResult BeginGetPublicKey(string DomainID, string rAgent, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetPublicKey", new object[] {
            DomainID,
            rAgent}, callback, asyncState);
    }
    
    public string EndGetPublicKey(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks>
///Get the public key of the certificate
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/GetDefaultPublicKey", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public string GetDefaultPublicKey(string DomainID) {
        object[] results = this.Invoke("GetDefaultPublicKey", new object[] {
            DomainID});
        return ((string)(results[0]));
    }
    
    public System.IAsyncResult BeginGetDefaultPublicKey(string DomainID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetDefaultPublicKey", new object[] {
            DomainID}, callback, asyncState);
    }
    
    public string EndGetDefaultPublicKey(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks>
///Get the Default RSA key
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/GetDefaultRSAFromServer", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public string GetDefaultRSAFromServer(string DomainID) {
        object[] results = this.Invoke("GetDefaultRSAFromServer", new object[] {
            DomainID});
        return ((string)(results[0]));
    }
    
    public System.IAsyncResult BeginGetDefaultRSAFromServer(string DomainID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetDefaultRSAFromServer", new object[] {
            DomainID}, callback, asyncState);
    }
    
    public string EndGetDefaultRSAFromServer(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks>
///Get the Default RSA key
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/GetDefaultRSAKey", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public string GetDefaultRSAKey(string DomainID) {
        object[] results = this.Invoke("GetDefaultRSAKey", new object[] {
            DomainID});
        return ((string)(results[0]));
    }
    
    public System.IAsyncResult BeginGetDefaultRSAKey(string DomainID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetDefaultRSAKey", new object[] {
            DomainID}, callback, asyncState);
    }
    
    public string EndGetDefaultRSAKey(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks>
///Store the certificate for the Domain.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/StoreRACertificate", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void StoreRACertificate(System.Byte[] certificate, string rAgent) {
        this.Invoke("StoreRACertificate", new object[] {
            certificate,
            rAgent});
    }
    
    public System.IAsyncResult BeginStoreRACertificate(System.Byte[] certificate, string rAgent, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("StoreRACertificate", new object[] {
            certificate,
            rAgent}, callback, asyncState);
    }
    
    public void EndStoreRACertificate(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks>
///Returns the characters which cannot be used for filenames in the Simias namespace (files and folders that contain any of these characters cannot be synchronized with iFolder and conflicts will be generated).
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/GetInvalidSyncFilenameChars", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public string GetInvalidSyncFilenameChars() {
        object[] results = this.Invoke("GetInvalidSyncFilenameChars", new object[0]);
        return ((string)(results[0]));
    }
    
    public System.IAsyncResult BeginGetInvalidSyncFilenameChars(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetInvalidSyncFilenameChars", new object[0], callback, asyncState);
    }
    
    public string EndGetInvalidSyncFilenameChars(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks>
///Sets a new server network address for a client.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/SetDomainHostAddress", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public bool SetDomainHostAddress(string domainID, string hostAddress, string user, string password) {
        object[] results = this.Invoke("SetDomainHostAddress", new object[] {
            domainID,
            hostAddress,
            user,
            password});
        return ((bool)(results[0]));
    }
    
    public System.IAsyncResult BeginSetDomainHostAddress(string domainID, string hostAddress, string user, string password, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetDomainHostAddress", new object[] {
            domainID,
            hostAddress,
            user,
            password}, callback, asyncState);
    }
    
    public bool EndSetDomainHostAddress(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks>
///Sets a new proxy address for the specified host.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/SetProxyAddress", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public bool SetProxyAddress(string hostUri, string proxyUri, string proxyUser, string proxyPassword) {
        object[] results = this.Invoke("SetProxyAddress", new object[] {
            hostUri,
            proxyUri,
            proxyUser,
            proxyPassword});
        return ((bool)(results[0]));
    }
    
    public System.IAsyncResult BeginSetProxyAddress(string hostUri, string proxyUri, string proxyUser, string proxyPassword, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetProxyAddress", new object[] {
            hostUri,
            proxyUri,
            proxyUser,
            proxyPassword}, callback, asyncState);
    }
    
    public bool EndSetProxyAddress(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks>
///Checks to see if this instance of Simias is shareable.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/CanShareService", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public bool CanShareService(string simiasDataPath, bool isClient) {
        object[] results = this.Invoke("CanShareService", new object[] {
            simiasDataPath,
            isClient});
        return ((bool)(results[0]));
    }
    
    public System.IAsyncResult BeginCanShareService(string simiasDataPath, bool isClient, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CanShareService", new object[] {
            simiasDataPath,
            isClient}, callback, asyncState);
    }
    
    public bool EndCanShareService(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks>
///Shuts down the controlling server process.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/StopSimiasProcess", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void StopSimiasProcess() {
        this.Invoke("StopSimiasProcess", new object[0]);
    }
    
    public System.IAsyncResult BeginStopSimiasProcess(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("StopSimiasProcess", new object[0], callback, asyncState);
    }
    
    public void EndStopSimiasProcess(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks>
///Increments the reference count that keeps Simias services running.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/AddSimiasReference", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public int AddSimiasReference() {
        object[] results = this.Invoke("AddSimiasReference", new object[0]);
        return ((int)(results[0]));
    }
    
    public System.IAsyncResult BeginAddSimiasReference(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("AddSimiasReference", new object[0], callback, asyncState);
    }
    
    public int EndAddSimiasReference(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((int)(results[0]));
    }
    
    /// <remarks>
///Decrements the Simias service reference count and signals the server to stop if the count goes to zero.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/RemoveSimiasReference", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public int RemoveSimiasReference() {
        object[] results = this.Invoke("RemoveSimiasReference", new object[0]);
        return ((int)(results[0]));
    }
    
    public System.IAsyncResult BeginRemoveSimiasReference(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("RemoveSimiasReference", new object[0], callback, asyncState);
    }
    
    public int EndRemoveSimiasReference(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((int)(results[0]));
    }
    
    /// <remarks>
///Set the passphrase and recovery agent.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/ServerSetDefaultAccount", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public bool ServerSetDefaultAccount(string DomainID, string UserID, string iFolderID) {
        object[] results = this.Invoke("ServerSetDefaultAccount", new object[] {
            DomainID,
            UserID,
            iFolderID});
        return ((bool)(results[0]));
    }
    
    public System.IAsyncResult BeginServerSetDefaultAccount(string DomainID, string UserID, string iFolderID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ServerSetDefaultAccount", new object[] {
            DomainID,
            UserID,
            iFolderID}, callback, asyncState);
    }
    
    public bool EndServerSetDefaultAccount(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks>
///Set the passphrase and recovery agent.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/ServerGetDefaultiFolder", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public string ServerGetDefaultiFolder(string DomainID, string UserID) {
        object[] results = this.Invoke("ServerGetDefaultiFolder", new object[] {
            DomainID,
            UserID});
        return ((string)(results[0]));
    }
    
    public System.IAsyncResult BeginServerGetDefaultiFolder(string DomainID, string UserID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ServerGetDefaultiFolder", new object[] {
            DomainID,
            UserID}, callback, asyncState);
    }
    
    public string EndServerGetDefaultiFolder(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks>
///gets the GroupsiFolderLimitPolicy for users group.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/GetGroupsiFolderLimitPolicy", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public int GetGroupsiFolderLimitPolicy(string DomainID, string UserID) {
        object[] results = this.Invoke("GetGroupsiFolderLimitPolicy", new object[] {
            DomainID,
            UserID});
        return ((int)(results[0]));
    }
    
    public System.IAsyncResult BeginGetGroupsiFolderLimitPolicy(string DomainID, string UserID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetGroupsiFolderLimitPolicy", new object[] {
            DomainID,
            UserID}, callback, asyncState);
    }
    
    public int EndGetGroupsiFolderLimitPolicy(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((int)(results[0]));
    }
    
    /// <remarks>
///gets the UseriFolderLimitPolicy for users - transfer of Ownership.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/IsTransferAllowed", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public bool IsTransferAllowed(string DomainID, string UserID) {
        object[] results = this.Invoke("IsTransferAllowed", new object[] {
            DomainID,
            UserID});
        return ((bool)(results[0]));
    }
    
    public System.IAsyncResult BeginIsTransferAllowed(string DomainID, string UserID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("IsTransferAllowed", new object[] {
            DomainID,
            UserID}, callback, asyncState);
    }
    
    public bool EndIsTransferAllowed(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks>
///gets the GroupsiFolderLimitPolicy for users group.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/GetGroupsSharingPolicy", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public int GetGroupsSharingPolicy(string DomainID, string UserID) {
        object[] results = this.Invoke("GetGroupsSharingPolicy", new object[] {
            DomainID,
            UserID});
        return ((int)(results[0]));
    }
    
    public System.IAsyncResult BeginGetGroupsSharingPolicy(string DomainID, string UserID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetGroupsSharingPolicy", new object[] {
            DomainID,
            UserID}, callback, asyncState);
    }
    
    public int EndGetGroupsSharingPolicy(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((int)(results[0]));
    }
    
    /// <remarks>
///gets the GroupsSecurityPolicy for users group.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/GetGroupsSecurityPolicy", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public int GetGroupsSecurityPolicy(string DomainID, string UserID) {
        object[] results = this.Invoke("GetGroupsSecurityPolicy", new object[] {
            DomainID,
            UserID});
        return ((int)(results[0]));
    }
    
    public System.IAsyncResult BeginGetGroupsSecurityPolicy(string DomainID, string UserID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetGroupsSecurityPolicy", new object[] {
            DomainID,
            UserID}, callback, asyncState);
    }
    
    public int EndGetGroupsSecurityPolicy(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((int)(results[0]));
    }
    
    /// <remarks>
///gets the GroupsSecurityPolicy for users group.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/GetEffectiveSyncPolicy", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public int GetEffectiveSyncPolicy(string DomainID, string UserID, string CollectionID) {
        object[] results = this.Invoke("GetEffectiveSyncPolicy", new object[] {
            DomainID,
            UserID,
            CollectionID});
        return ((int)(results[0]));
    }
    
    public System.IAsyncResult BeginGetEffectiveSyncPolicy(string DomainID, string UserID, string CollectionID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetEffectiveSyncPolicy", new object[] {
            DomainID,
            UserID,
            CollectionID}, callback, asyncState);
    }
    
    public int EndGetEffectiveSyncPolicy(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((int)(results[0]));
    }
    
    /// <remarks>
///Set the passphrase and recovery agent.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/ServerSetPassPhrase", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public Status ServerSetPassPhrase(string DomainID, string UserID, string EncryptedCryptoKey, string CryptoKeyBlob, string RAName, string RAPublicKey) {
        object[] results = this.Invoke("ServerSetPassPhrase", new object[] {
            DomainID,
            UserID,
            EncryptedCryptoKey,
            CryptoKeyBlob,
            RAName,
            RAPublicKey});
        return ((Status)(results[0]));
    }
    
    public System.IAsyncResult BeginServerSetPassPhrase(string DomainID, string UserID, string EncryptedCryptoKey, string CryptoKeyBlob, string RAName, string RAPublicKey, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ServerSetPassPhrase", new object[] {
            DomainID,
            UserID,
            EncryptedCryptoKey,
            CryptoKeyBlob,
            RAName,
            RAPublicKey}, callback, asyncState);
    }
    
    public Status EndServerSetPassPhrase(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((Status)(results[0]));
    }
    
    /// <remarks>
///ServerGetEncrypPassKey.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/ServerGetEncrypPassKey", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public string ServerGetEncrypPassKey(string DomainID, string UserID) {
        object[] results = this.Invoke("ServerGetEncrypPassKey", new object[] {
            DomainID,
            UserID});
        return ((string)(results[0]));
    }
    
    public System.IAsyncResult BeginServerGetEncrypPassKey(string DomainID, string UserID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ServerGetEncrypPassKey", new object[] {
            DomainID,
            UserID}, callback, asyncState);
    }
    
    public string EndServerGetEncrypPassKey(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks>
///ServerGetPassKeyHash.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/ServerGetPassKeyHash", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public string ServerGetPassKeyHash(string DomainID, string UserID) {
        object[] results = this.Invoke("ServerGetPassKeyHash", new object[] {
            DomainID,
            UserID});
        return ((string)(results[0]));
    }
    
    public System.IAsyncResult BeginServerGetPassKeyHash(string DomainID, string UserID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ServerGetPassKeyHash", new object[] {
            DomainID,
            UserID}, callback, asyncState);
    }
    
    public string EndServerGetPassKeyHash(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks>
///Updates the user move state property
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/UpdateUserMoveState", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public bool UpdateUserMoveState(string DomainID, string UserID, int userMoveStatus) {
        object[] results = this.Invoke("UpdateUserMoveState", new object[] {
            DomainID,
            UserID,
            userMoveStatus});
        return ((bool)(results[0]));
    }
    
    public System.IAsyncResult BeginUpdateUserMoveState(string DomainID, string UserID, int userMoveStatus, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("UpdateUserMoveState", new object[] {
            DomainID,
            UserID,
            userMoveStatus}, callback, asyncState);
    }
    
    public bool EndUpdateUserMoveState(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks>
///Update users HomeServer Object
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/UpdateHomeServer", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public bool UpdateHomeServer(string DomainID, string UserID, string newHostID) {
        object[] results = this.Invoke("UpdateHomeServer", new object[] {
            DomainID,
            UserID,
            newHostID});
        return ((bool)(results[0]));
    }
    
    public System.IAsyncResult BeginUpdateHomeServer(string DomainID, string UserID, string newHostID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("UpdateHomeServer", new object[] {
            DomainID,
            UserID,
            newHostID}, callback, asyncState);
    }
    
    public bool EndUpdateHomeServer(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks>
///Returns the characters which cannot be used for filenames in the Simias namespace (files and folders that contain any of these characters cannot be synchronized with iFolder and conflicts will be generated).
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/DownloadiFolder", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public bool DownloadiFolder(string iFolderID, string name, string DomainID, string HostID, string DirNodeID, string MemberNodeID, string colMemberNodeID, string localPath) {
        object[] results = this.Invoke("DownloadiFolder", new object[] {
            iFolderID,
            name,
            DomainID,
            HostID,
            DirNodeID,
            MemberNodeID,
            colMemberNodeID,
            localPath});
        return ((bool)(results[0]));
    }
    
    public System.IAsyncResult BeginDownloadiFolder(string iFolderID, string name, string DomainID, string HostID, string DirNodeID, string MemberNodeID, string colMemberNodeID, string localPath, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("DownloadiFolder", new object[] {
            iFolderID,
            name,
            DomainID,
            HostID,
            DirNodeID,
            MemberNodeID,
            colMemberNodeID,
            localPath}, callback, asyncState);
    }
    
    public bool EndDownloadiFolder(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks>
///Updates the encryption related local properties.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/UpdateLocalProperties", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public bool UpdateLocalProperties(string DomainID, string UserID, string EncryptionKey, string EncryptionVersion, string EncryptionBlob, string RAName, string RAPublicKey) {
        object[] results = this.Invoke("UpdateLocalProperties", new object[] {
            DomainID,
            UserID,
            EncryptionKey,
            EncryptionVersion,
            EncryptionBlob,
            RAName,
            RAPublicKey});
        return ((bool)(results[0]));
    }
    
    public System.IAsyncResult BeginUpdateLocalProperties(string DomainID, string UserID, string EncryptionKey, string EncryptionVersion, string EncryptionBlob, string RAName, string RAPublicKey, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("UpdateLocalProperties", new object[] {
            DomainID,
            UserID,
            EncryptionKey,
            EncryptionVersion,
            EncryptionBlob,
            RAName,
            RAPublicKey}, callback, asyncState);
    }
    
    public bool EndUpdateLocalProperties(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks>
///Disable user object and set user move property
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/DisableUser", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public bool DisableUser(string DomainID, string UserID, string newHostID) {
        object[] results = this.Invoke("DisableUser", new object[] {
            DomainID,
            UserID,
            newHostID});
        return ((bool)(results[0]));
    }
    
    public System.IAsyncResult BeginDisableUser(string DomainID, string UserID, string newHostID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("DisableUser", new object[] {
            DomainID,
            UserID,
            newHostID}, callback, asyncState);
    }
    
    public bool EndDisableUser(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks>
///SetOnMasterEncryptionBlobFlag
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/SetOnMasterEncryptionBlobFlag", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void SetOnMasterEncryptionBlobFlag(string DomainID, string UserID) {
        this.Invoke("SetOnMasterEncryptionBlobFlag", new object[] {
            DomainID,
            UserID});
    }
    
    public System.IAsyncResult BeginSetOnMasterEncryptionBlobFlag(string DomainID, string UserID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetOnMasterEncryptionBlobFlag", new object[] {
            DomainID,
            UserID}, callback, asyncState);
    }
    
    public void EndSetOnMasterEncryptionBlobFlag(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks>
///CommitDomainMember
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/CommitDomainMember", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public bool CommitDomainMember(string DomainID, System.Xml.XmlNode ModifiedMemberXML) {
        object[] results = this.Invoke("CommitDomainMember", new object[] {
            DomainID,
            ModifiedMemberXML});
        return ((bool)(results[0]));
    }
    
    public System.IAsyncResult BeginCommitDomainMember(string DomainID, System.Xml.XmlNode ModifiedMemberXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CommitDomainMember", new object[] {
            DomainID,
            ModifiedMemberXML}, callback, asyncState);
    }
    
    public bool EndCommitDomainMember(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks>
///GetCollectionHashKey.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/ServerGetCollectionHashKey", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public string ServerGetCollectionHashKey(string CollectionID) {
        object[] results = this.Invoke("ServerGetCollectionHashKey", new object[] {
            CollectionID});
        return ((string)(results[0]));
    }
    
    public System.IAsyncResult BeginServerGetCollectionHashKey(string CollectionID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ServerGetCollectionHashKey", new object[] {
            CollectionID}, callback, asyncState);
    }
    
    public string EndServerGetCollectionHashKey(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks>
///GetiFolderCryptoKeys.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/GetiFolderCryptoKeys", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public CollectionKey GetiFolderCryptoKeys(string DomainID, string UserID, int Index) {
        object[] results = this.Invoke("GetiFolderCryptoKeys", new object[] {
            DomainID,
            UserID,
            Index});
        return ((CollectionKey)(results[0]));
    }
    
    public System.IAsyncResult BeginGetiFolderCryptoKeys(string DomainID, string UserID, int Index, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetiFolderCryptoKeys", new object[] {
            DomainID,
            UserID,
            Index}, callback, asyncState);
    }
    
    public CollectionKey EndGetiFolderCryptoKeys(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CollectionKey)(results[0]));
    }
    
    /// <remarks>
///SetiFolderCryptoKeys.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/SetiFolderCryptoKeys", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public bool SetiFolderCryptoKeys(string DomainID, string UserID, CollectionKey CKey) {
        object[] results = this.Invoke("SetiFolderCryptoKeys", new object[] {
            DomainID,
            UserID,
            CKey});
        return ((bool)(results[0]));
    }
    
    public System.IAsyncResult BeginSetiFolderCryptoKeys(string DomainID, string UserID, CollectionKey CKey, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetiFolderCryptoKeys", new object[] {
            DomainID,
            UserID,
            CKey}, callback, asyncState);
    }
    
    public bool EndSetiFolderCryptoKeys(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks>
///ExportiFoldersCryptoKeys.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/ExportiFoldersCryptoKeys", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void ExportiFoldersCryptoKeys(string DomainID, string FilePath) {
        this.Invoke("ExportiFoldersCryptoKeys", new object[] {
            DomainID,
            FilePath});
    }
    
    public System.IAsyncResult BeginExportiFoldersCryptoKeys(string DomainID, string FilePath, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ExportiFoldersCryptoKeys", new object[] {
            DomainID,
            FilePath}, callback, asyncState);
    }
    
    public void EndExportiFoldersCryptoKeys(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks>
///ImportiFoldersCryptoKeys.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/ImportiFoldersCryptoKeys", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void ImportiFoldersCryptoKeys(string DomainID, string NewPassphrase, string OneTimePassphrase, string FilePath) {
        this.Invoke("ImportiFoldersCryptoKeys", new object[] {
            DomainID,
            NewPassphrase,
            OneTimePassphrase,
            FilePath});
    }
    
    public System.IAsyncResult BeginImportiFoldersCryptoKeys(string DomainID, string NewPassphrase, string OneTimePassphrase, string FilePath, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ImportiFoldersCryptoKeys", new object[] {
            DomainID,
            NewPassphrase,
            OneTimePassphrase,
            FilePath}, callback, asyncState);
    }
    
    public void EndImportiFoldersCryptoKeys(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks>
///Exports the iFolders Crypto Keys to a XML Document.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/ExportiFoldersCryptoKeysToDoc", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    [return: System.Xml.Serialization.XmlElementAttribute("keyDocument")]
    public System.Xml.XmlNode ExportiFoldersCryptoKeysToDoc(string DomainID, string UserID) {
        object[] results = this.Invoke("ExportiFoldersCryptoKeysToDoc", new object[] {
            DomainID,
            UserID});
        return ((System.Xml.XmlNode)(results[0]));
    }
    
    public System.IAsyncResult BeginExportiFoldersCryptoKeysToDoc(string DomainID, string UserID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ExportiFoldersCryptoKeysToDoc", new object[] {
            DomainID,
            UserID}, callback, asyncState);
    }
    
    public System.Xml.XmlNode EndExportiFoldersCryptoKeysToDoc(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Xml.XmlNode)(results[0]));
    }
    
    /// <remarks>
///Recover the ifolder crypto keys for an user in a Domain given a RA.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/RecoverKeys", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public bool RecoverKeys(string DomainID, string UserID, string RAName, System.Xml.XmlNode keyDocument, string oneTimePP, out System.Xml.XmlNode decryptedKeyDoc) {
        object[] results = this.Invoke("RecoverKeys", new object[] {
            DomainID,
            UserID,
            RAName,
            keyDocument,
            oneTimePP});
        decryptedKeyDoc = ((System.Xml.XmlNode)(results[1]));
        return ((bool)(results[0]));
    }
    
    public System.IAsyncResult BeginRecoverKeys(string DomainID, string UserID, string RAName, System.Xml.XmlNode keyDocument, string oneTimePP, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("RecoverKeys", new object[] {
            DomainID,
            UserID,
            RAName,
            keyDocument,
            oneTimePP}, callback, asyncState);
    }
    
    public bool EndRecoverKeys(System.IAsyncResult asyncResult, out System.Xml.XmlNode decryptedKeyDoc) {
        object[] results = this.EndInvoke(asyncResult);
        decryptedKeyDoc = ((System.Xml.XmlNode)(results[1]));
        return ((bool)(results[0]));
    }
    
    /// <remarks>
///Imports the iFolder Crypto Keys from an Array
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/ImportiFoldersCryptoKeysFromDoc", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void ImportiFoldersCryptoKeysFromDoc(string DomainID, string UserID, string NewPassphrase, string OneTimePassword, System.Xml.XmlNode keyDocument) {
        this.Invoke("ImportiFoldersCryptoKeysFromDoc", new object[] {
            DomainID,
            UserID,
            NewPassphrase,
            OneTimePassword,
            keyDocument});
    }
    
    public System.IAsyncResult BeginImportiFoldersCryptoKeysFromDoc(string DomainID, string UserID, string NewPassphrase, string OneTimePassword, System.Xml.XmlNode keyDocument, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ImportiFoldersCryptoKeysFromDoc", new object[] {
            DomainID,
            UserID,
            NewPassphrase,
            OneTimePassword,
            keyDocument}, callback, asyncState);
    }
    
    public void EndImportiFoldersCryptoKeysFromDoc(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks>
///Resets the passphrase by Export-Recover-Import automation
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/ExportRecoverImport", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void ExportRecoverImport(string DomainID, string UserID, string NewPassphrase) {
        this.Invoke("ExportRecoverImport", new object[] {
            DomainID,
            UserID,
            NewPassphrase});
    }
    
    public System.IAsyncResult BeginExportRecoverImport(string DomainID, string UserID, string NewPassphrase, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ExportRecoverImport", new object[] {
            DomainID,
            UserID,
            NewPassphrase}, callback, asyncState);
    }
    
    public void EndExportRecoverImport(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks>
///Set the passphrase and recovery agent.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/SetPassPhrase", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public Status SetPassPhrase(string DomainID, string PassPhrase, string RAName, string RAPublicKey) {
        object[] results = this.Invoke("SetPassPhrase", new object[] {
            DomainID,
            PassPhrase,
            RAName,
            RAPublicKey});
        return ((Status)(results[0]));
    }
    
    public System.IAsyncResult BeginSetPassPhrase(string DomainID, string PassPhrase, string RAName, string RAPublicKey, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetPassPhrase", new object[] {
            DomainID,
            PassPhrase,
            RAName,
            RAPublicKey}, callback, asyncState);
    }
    
    public Status EndSetPassPhrase(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((Status)(results[0]));
    }
    
    /// <remarks>
///Set the passphrase and recovery agent.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/DefaultAccount", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public bool DefaultAccount(string DomainID, string iFolderID) {
        object[] results = this.Invoke("DefaultAccount", new object[] {
            DomainID,
            iFolderID});
        return ((bool)(results[0]));
    }
    
    public System.IAsyncResult BeginDefaultAccount(string DomainID, string iFolderID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("DefaultAccount", new object[] {
            DomainID,
            iFolderID}, callback, asyncState);
    }
    
    public bool EndDefaultAccount(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks>
///Set the passphrase and recovery agent.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/GetDefaultiFolder", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public string GetDefaultiFolder(string DomainID) {
        object[] results = this.Invoke("GetDefaultiFolder", new object[] {
            DomainID});
        return ((string)(results[0]));
    }
    
    public System.IAsyncResult BeginGetDefaultiFolder(string DomainID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetDefaultiFolder", new object[] {
            DomainID}, callback, asyncState);
    }
    
    public string EndGetDefaultiFolder(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks>
///Reset passphrase and recovery agent.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/ReSetPassPhrase", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public Status ReSetPassPhrase(string DomainID, string OldPassPhrase, string PassPhrase, string RAName, string RAPublicKey) {
        object[] results = this.Invoke("ReSetPassPhrase", new object[] {
            DomainID,
            OldPassPhrase,
            PassPhrase,
            RAName,
            RAPublicKey});
        return ((Status)(results[0]));
    }
    
    public System.IAsyncResult BeginReSetPassPhrase(string DomainID, string OldPassPhrase, string PassPhrase, string RAName, string RAPublicKey, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ReSetPassPhrase", new object[] {
            DomainID,
            OldPassPhrase,
            PassPhrase,
            RAName,
            RAPublicKey}, callback, asyncState);
    }
    
    public Status EndReSetPassPhrase(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((Status)(results[0]));
    }
    
    /// <remarks>
///Validate the passphrase for the correctness.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/ValidatePassPhrase", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public Status ValidatePassPhrase(string DomainID, string PassPhrase) {
        object[] results = this.Invoke("ValidatePassPhrase", new object[] {
            DomainID,
            PassPhrase});
        return ((Status)(results[0]));
    }
    
    public System.IAsyncResult BeginValidatePassPhrase(string DomainID, string PassPhrase, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ValidatePassPhrase", new object[] {
            DomainID,
            PassPhrase}, callback, asyncState);
    }
    
    public Status EndValidatePassPhrase(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((Status)(results[0]));
    }
    
    /// <remarks>
///Returns the passphrase state.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/IsPassPhraseSet", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public bool IsPassPhraseSet(string DomainID) {
        object[] results = this.Invoke("IsPassPhraseSet", new object[] {
            DomainID});
        return ((bool)(results[0]));
    }
    
    public System.IAsyncResult BeginIsPassPhraseSet(string DomainID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("IsPassPhraseSet", new object[] {
            DomainID}, callback, asyncState);
    }
    
    public bool EndIsPassPhraseSet(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks>
///Gets the directory path to the Simias data area.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/GetSimiasDataPath", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public string GetSimiasDataPath() {
        object[] results = this.Invoke("GetSimiasDataPath", new object[0]);
        return ((string)(results[0]));
    }
    
    public System.IAsyncResult BeginGetSimiasDataPath(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetSimiasDataPath", new object[0], callback, asyncState);
    }
    
    public string EndGetSimiasDataPath(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks>
///Gets the process ID for the current running process.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/GetSimiasProcessID", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public int GetSimiasProcessID() {
        object[] results = this.Invoke("GetSimiasProcessID", new object[0]);
        return ((int)(results[0]));
    }
    
    public System.IAsyncResult BeginGetSimiasProcessID(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetSimiasProcessID", new object[0], callback, asyncState);
    }
    
    public int EndGetSimiasProcessID(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((int)(results[0]));
    }
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/simias/web/")]
public class MemberInfo {
    
    /// <remarks/>
    public string ObjectID;
    
    /// <remarks/>
    public string UserID;
    
    /// <remarks/>
    public string Name;
    
    /// <remarks/>
    public string GivenName;
    
    /// <remarks/>
    public string FamilyName;
    
    /// <remarks/>
    public string FullName;
    
    /// <remarks/>
    public int AccessRights;
    
    /// <remarks/>
    public bool IsOwner;
    
    /// <remarks/>
    public bool IsHost;
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/simias/web/")]
public enum SearchType {
    
    /// <remarks/>
    Equal,
    
    /// <remarks/>
    Not_Equal,
    
    /// <remarks/>
    Begins,
    
    /// <remarks/>
    Ends,
    
    /// <remarks/>
    Contains,
    
    /// <remarks/>
    Greater,
    
    /// <remarks/>
    Less,
    
    /// <remarks/>
    Greater_Equal,
    
    /// <remarks/>
    Less_Equal,
    
    /// <remarks/>
    Exists,
    
    /// <remarks/>
    CaseEqual,
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/simias/web/")]
public class DomainInformation {
    
    /// <remarks/>
    public DomainType Type;
    
    /// <remarks/>
    public bool Active;
    
    /// <remarks/>
    public bool Authenticated;
    
    /// <remarks/>
    public string Name;
    
    /// <remarks/>
    public string Description;
    
    /// <remarks/>
    public string ID;
    
    /// <remarks/>
    public string MemberUserID;
    
    /// <remarks/>
    public string MemberName;
    
    /// <remarks/>
    public string RemoteUrl;
    
    /// <remarks/>
    public string POBoxID;
    
    /// <remarks/>
    public string HostUrl;
    
    /// <remarks/>
    public string Host;
    
    /// <remarks/>
    public bool IsSlave;
    
    /// <remarks/>
    public bool IsDefault;
    
    /// <remarks/>
    public StatusCodes StatusCode;
    
    /// <remarks/>
    public int RemainingGraceLogins;
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/simias/web/")]
public enum DomainType {
    
    /// <remarks/>
    Master,
    
    /// <remarks/>
    Slave,
    
    /// <remarks/>
    Local,
    
    /// <remarks/>
    None,
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/simias/web/")]
public enum StatusCodes {
    
    /// <remarks/>
    Success,
    
    /// <remarks/>
    SuccessInGrace,
    
    /// <remarks/>
    InvalidCertificate,
    
    /// <remarks/>
    UnknownUser,
    
    /// <remarks/>
    AmbiguousUser,
    
    /// <remarks/>
    InvalidCredentials,
    
    /// <remarks/>
    InvalidPassword,
    
    /// <remarks/>
    AccountDisabled,
    
    /// <remarks/>
    AccountLockout,
    
    /// <remarks/>
    SimiasLoginDisabled,
    
    /// <remarks/>
    UnknownDomain,
    
    /// <remarks/>
    InternalException,
    
    /// <remarks/>
    MethodNotSupported,
    
    /// <remarks/>
    Timeout,
    
    /// <remarks/>
    OlderVersion,
    
    /// <remarks/>
    ServerOld,
    
    /// <remarks/>
    UpgradeNeeded,
    
    /// <remarks/>
    PassPhraseNotSet,
    
    /// <remarks/>
    PassPhraseInvalid,
    
    /// <remarks/>
    UserAlreadyMoved,
    
    /// <remarks/>
    Unknown,
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/simias/web/")]
public class Status {
    
    /// <remarks/>
    public StatusCodes statusCode;
    
    /// <remarks/>
    public string DomainID;
    
    /// <remarks/>
    public string UserID;
    
    /// <remarks/>
    public string UserName;
    
    /// <remarks/>
    public string DistinguishedUserName;
    
    /// <remarks/>
    public string ExceptionMessage;
    
    /// <remarks/>
    public int TotalGraceLogins;
    
    /// <remarks/>
    public int RemainingGraceLogins;
    
    /// <remarks/>
    public int DaysUntilPasswordExpires;
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/simias/web/")]
public enum CredentialType {
    
    /// <remarks/>
    None,
    
    /// <remarks/>
    NotRequired,
    
    /// <remarks/>
    Basic,
    
    /// <remarks/>
    PPK,
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/simias/web/")]
public enum CertificateProblem {
    
    /// <remarks/>
    CertOK,
    
    /// <remarks/>
    CertEXPIRED,
    
    /// <remarks/>
    CertVALIDITYPERIODNESTING,
    
    /// <remarks/>
    CertROLE,
    
    /// <remarks/>
    CertPATHLENCONST,
    
    /// <remarks/>
    CertCRITICAL,
    
    /// <remarks/>
    CertPURPOSE,
    
    /// <remarks/>
    CertISSUERCHAINING,
    
    /// <remarks/>
    CertMALFORMED,
    
    /// <remarks/>
    CertUNTRUSTEDROOT,
    
    /// <remarks/>
    CertCHAINING,
    
    /// <remarks/>
    CertREVOKED,
    
    /// <remarks/>
    CertUNTRUSTEDTESTROOT,
    
    /// <remarks/>
    CertREVOCATION_FAILURE,
    
    /// <remarks/>
    CertCN_NO_MATCH,
    
    /// <remarks/>
    CertWRONG_USAGE,
    
    /// <remarks/>
    CertUNTRUSTEDCA,
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/simias/web/")]
public class CollectionKey {
    
    /// <remarks/>
    public string NodeID;
    
    /// <remarks/>
    public string PEDEK;
    
    /// <remarks/>
    public string REDEK;
}
