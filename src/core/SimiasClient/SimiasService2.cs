// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

// 
// This source code was auto-generated by Web Services Description Language Utility
//Mono Framework v2.0.50727.1433
//


/// <remarks/>
/// <remarks>
///Web Service providing access to Simias
///</remarks>
[System.Web.Services.WebServiceBinding(Name="Simias Web ServiceSoap", Namespace="http://novell.com/simias/web/")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class SimiasWebService : System.Web.Services.Protocols.SoapHttpClientProtocol {
    
    private System.Threading.SendOrPostCallback PingSimiasOperationCompleted;
    
    private System.Threading.SendOrPostCallback AddMemberToDomainOperationCompleted;
    
    private System.Threading.SendOrPostCallback RemoveMemberFromDomainOperationCompleted;
    
    private System.Threading.SendOrPostCallback FindCloseMembersOperationCompleted;
    
    private System.Threading.SendOrPostCallback FindFirstMembersOperationCompleted;
    
    private System.Threading.SendOrPostCallback FindFirstSpecificMembersOperationCompleted;
    
    private System.Threading.SendOrPostCallback FindNextMembersOperationCompleted;
    
    private System.Threading.SendOrPostCallback FindPreviousMembersOperationCompleted;
    
    private System.Threading.SendOrPostCallback FindSeekMembersOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetSimiasInformationOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetDomainInformationOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetDomainsOperationCompleted;
    
    private System.Threading.SendOrPostCallback LoginToRemoteDomainOperationCompleted;
    
    private System.Threading.SendOrPostCallback LogoutFromRemoteDomainOperationCompleted;
    
    private System.Threading.SendOrPostCallback DisableDomainAutoLoginOperationCompleted;
    
    private System.Threading.SendOrPostCallback IsDomainActiveOperationCompleted;
    
    private System.Threading.SendOrPostCallback SetDomainActiveOperationCompleted;
    
    private System.Threading.SendOrPostCallback SetDomainInactiveOperationCompleted;
    
    private System.Threading.SendOrPostCallback ValidCredentialsOperationCompleted;
    
    private System.Threading.SendOrPostCallback SetDomainCredentialsOperationCompleted;
    
    private System.Threading.SendOrPostCallback SetHostAddressOperationCompleted;
    
    private System.Threading.SendOrPostCallback StorePassPhraseOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetDomainCredentialsOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetPassPhraseOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetRememberOptionOperationCompleted;
    
    private System.Threading.SendOrPostCallback ConnectToDomainOperationCompleted;
    
    private System.Threading.SendOrPostCallback LeaveDomainOperationCompleted;
    
    private System.Threading.SendOrPostCallback RemoveCertFromTableOperationCompleted;
    
    private System.Threading.SendOrPostCallback SetDefaultDomainOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetDefaultDomainIDOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetCertificateOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetCertificate2OperationCompleted;
    
    private System.Threading.SendOrPostCallback StoreCertificateOperationCompleted;
    
    private System.Threading.SendOrPostCallback StoreDomainCertificateOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetRAListOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetRAListOnClientOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetRACertificateOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetRACertificateOnClientOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetPublicKeyOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetDefaultPublicKeyOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetDefaultRSAFromServerOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetDefaultRSAKeyOperationCompleted;
    
    private System.Threading.SendOrPostCallback StoreRACertificateOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetInvalidSyncFilenameCharsOperationCompleted;
    
    private System.Threading.SendOrPostCallback SetDomainHostAddressOperationCompleted;
    
    private System.Threading.SendOrPostCallback SetProxyAddressOperationCompleted;
    
    private System.Threading.SendOrPostCallback CanShareServiceOperationCompleted;
    
    private System.Threading.SendOrPostCallback StopSimiasProcessOperationCompleted;
    
    private System.Threading.SendOrPostCallback AddSimiasReferenceOperationCompleted;
    
    private System.Threading.SendOrPostCallback RemoveSimiasReferenceOperationCompleted;
    
    private System.Threading.SendOrPostCallback ServerSetDefaultAccountOperationCompleted;
    
    private System.Threading.SendOrPostCallback ServerGetDefaultiFolderOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetGroupsiFolderLimitPolicyOperationCompleted;
    
    private System.Threading.SendOrPostCallback IsTransferAllowedOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetGroupsSharingPolicyOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetGroupsSecurityPolicyOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetEffectiveSyncPolicyOperationCompleted;
    
    private System.Threading.SendOrPostCallback ServerSetPassPhraseOperationCompleted;
    
    private System.Threading.SendOrPostCallback ServerGetEncrypPassKeyOperationCompleted;
    
    private System.Threading.SendOrPostCallback ServerGetPassKeyHashOperationCompleted;
    
    private System.Threading.SendOrPostCallback UpdateUserMoveStateOperationCompleted;
    
    private System.Threading.SendOrPostCallback UpdateHomeServerOperationCompleted;
    
    private System.Threading.SendOrPostCallback DownloadiFolderOperationCompleted;
    
    private System.Threading.SendOrPostCallback UpdateLocalPropertiesOperationCompleted;
    
    private System.Threading.SendOrPostCallback DisableUserOperationCompleted;
    
    private System.Threading.SendOrPostCallback SetOnMasterEncryptionBlobFlagOperationCompleted;
    
    private System.Threading.SendOrPostCallback CommitDomainMemberOperationCompleted;
    
    private System.Threading.SendOrPostCallback ServerGetCollectionHashKeyOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetiFolderCryptoKeysOperationCompleted;
    
    private System.Threading.SendOrPostCallback SetiFolderCryptoKeysOperationCompleted;
    
    private System.Threading.SendOrPostCallback ExportiFoldersCryptoKeysOperationCompleted;
    
    private System.Threading.SendOrPostCallback ImportiFoldersCryptoKeysOperationCompleted;
    
    private System.Threading.SendOrPostCallback ExportiFoldersCryptoKeysToDocOperationCompleted;
    
    private System.Threading.SendOrPostCallback RecoverKeysOperationCompleted;
    
    private System.Threading.SendOrPostCallback ImportiFoldersCryptoKeysFromDocOperationCompleted;
    
    private System.Threading.SendOrPostCallback ExportRecoverImportOperationCompleted;
    
    private System.Threading.SendOrPostCallback SetPassPhraseOperationCompleted;
    
    private System.Threading.SendOrPostCallback DefaultAccountOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetDefaultiFolderOperationCompleted;
    
    private System.Threading.SendOrPostCallback ReSetPassPhraseOperationCompleted;
    
    private System.Threading.SendOrPostCallback ValidatePassPhraseOperationCompleted;
    
    private System.Threading.SendOrPostCallback IsPassPhraseSetOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetSimiasDataPathOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetSimiasProcessIDOperationCompleted;
    
    public SimiasWebService() {
        this.Url = "http://127.0.0.1/simias10/Simias.asmx";
    }
    
    public event PingSimiasCompletedEventHandler PingSimiasCompleted;
    
    public event AddMemberToDomainCompletedEventHandler AddMemberToDomainCompleted;
    
    public event RemoveMemberFromDomainCompletedEventHandler RemoveMemberFromDomainCompleted;
    
    public event FindCloseMembersCompletedEventHandler FindCloseMembersCompleted;
    
    public event FindFirstMembersCompletedEventHandler FindFirstMembersCompleted;
    
    public event FindFirstSpecificMembersCompletedEventHandler FindFirstSpecificMembersCompleted;
    
    public event FindNextMembersCompletedEventHandler FindNextMembersCompleted;
    
    public event FindPreviousMembersCompletedEventHandler FindPreviousMembersCompleted;
    
    public event FindSeekMembersCompletedEventHandler FindSeekMembersCompleted;
    
    public event GetSimiasInformationCompletedEventHandler GetSimiasInformationCompleted;
    
    public event GetDomainInformationCompletedEventHandler GetDomainInformationCompleted;
    
    public event GetDomainsCompletedEventHandler GetDomainsCompleted;
    
    public event LoginToRemoteDomainCompletedEventHandler LoginToRemoteDomainCompleted;
    
    public event LogoutFromRemoteDomainCompletedEventHandler LogoutFromRemoteDomainCompleted;
    
    public event DisableDomainAutoLoginCompletedEventHandler DisableDomainAutoLoginCompleted;
    
    public event IsDomainActiveCompletedEventHandler IsDomainActiveCompleted;
    
    public event SetDomainActiveCompletedEventHandler SetDomainActiveCompleted;
    
    public event SetDomainInactiveCompletedEventHandler SetDomainInactiveCompleted;
    
    public event ValidCredentialsCompletedEventHandler ValidCredentialsCompleted;
    
    public event SetDomainCredentialsCompletedEventHandler SetDomainCredentialsCompleted;
    
    public event SetHostAddressCompletedEventHandler SetHostAddressCompleted;
    
    public event StorePassPhraseCompletedEventHandler StorePassPhraseCompleted;
    
    public event GetDomainCredentialsCompletedEventHandler GetDomainCredentialsCompleted;
    
    public event GetPassPhraseCompletedEventHandler GetPassPhraseCompleted;
    
    public event GetRememberOptionCompletedEventHandler GetRememberOptionCompleted;
    
    public event ConnectToDomainCompletedEventHandler ConnectToDomainCompleted;
    
    public event LeaveDomainCompletedEventHandler LeaveDomainCompleted;
    
    public event RemoveCertFromTableCompletedEventHandler RemoveCertFromTableCompleted;
    
    public event SetDefaultDomainCompletedEventHandler SetDefaultDomainCompleted;
    
    public event GetDefaultDomainIDCompletedEventHandler GetDefaultDomainIDCompleted;
    
    public event GetCertificateCompletedEventHandler GetCertificateCompleted;
    
    public event GetCertificate2CompletedEventHandler GetCertificate2Completed;
    
    public event StoreCertificateCompletedEventHandler StoreCertificateCompleted;
    
    public event StoreDomainCertificateCompletedEventHandler StoreDomainCertificateCompleted;
    
    public event GetRAListCompletedEventHandler GetRAListCompleted;
    
    public event GetRAListOnClientCompletedEventHandler GetRAListOnClientCompleted;
    
    public event GetRACertificateCompletedEventHandler GetRACertificateCompleted;
    
    public event GetRACertificateOnClientCompletedEventHandler GetRACertificateOnClientCompleted;
    
    public event GetPublicKeyCompletedEventHandler GetPublicKeyCompleted;
    
    public event GetDefaultPublicKeyCompletedEventHandler GetDefaultPublicKeyCompleted;
    
    public event GetDefaultRSAFromServerCompletedEventHandler GetDefaultRSAFromServerCompleted;
    
    public event GetDefaultRSAKeyCompletedEventHandler GetDefaultRSAKeyCompleted;
    
    public event StoreRACertificateCompletedEventHandler StoreRACertificateCompleted;
    
    public event GetInvalidSyncFilenameCharsCompletedEventHandler GetInvalidSyncFilenameCharsCompleted;
    
    public event SetDomainHostAddressCompletedEventHandler SetDomainHostAddressCompleted;
    
    public event SetProxyAddressCompletedEventHandler SetProxyAddressCompleted;
    
    public event CanShareServiceCompletedEventHandler CanShareServiceCompleted;
    
    public event StopSimiasProcessCompletedEventHandler StopSimiasProcessCompleted;
    
    public event AddSimiasReferenceCompletedEventHandler AddSimiasReferenceCompleted;
    
    public event RemoveSimiasReferenceCompletedEventHandler RemoveSimiasReferenceCompleted;
    
    public event ServerSetDefaultAccountCompletedEventHandler ServerSetDefaultAccountCompleted;
    
    public event ServerGetDefaultiFolderCompletedEventHandler ServerGetDefaultiFolderCompleted;
    
    public event GetGroupsiFolderLimitPolicyCompletedEventHandler GetGroupsiFolderLimitPolicyCompleted;
    
    public event IsTransferAllowedCompletedEventHandler IsTransferAllowedCompleted;
    
    public event GetGroupsSharingPolicyCompletedEventHandler GetGroupsSharingPolicyCompleted;
    
    public event GetGroupsSecurityPolicyCompletedEventHandler GetGroupsSecurityPolicyCompleted;
    
    public event GetEffectiveSyncPolicyCompletedEventHandler GetEffectiveSyncPolicyCompleted;
    
    public event ServerSetPassPhraseCompletedEventHandler ServerSetPassPhraseCompleted;
    
    public event ServerGetEncrypPassKeyCompletedEventHandler ServerGetEncrypPassKeyCompleted;
    
    public event ServerGetPassKeyHashCompletedEventHandler ServerGetPassKeyHashCompleted;
    
    public event UpdateUserMoveStateCompletedEventHandler UpdateUserMoveStateCompleted;
    
    public event UpdateHomeServerCompletedEventHandler UpdateHomeServerCompleted;
    
    public event DownloadiFolderCompletedEventHandler DownloadiFolderCompleted;
    
    public event UpdateLocalPropertiesCompletedEventHandler UpdateLocalPropertiesCompleted;
    
    public event DisableUserCompletedEventHandler DisableUserCompleted;
    
    public event SetOnMasterEncryptionBlobFlagCompletedEventHandler SetOnMasterEncryptionBlobFlagCompleted;
    
    public event CommitDomainMemberCompletedEventHandler CommitDomainMemberCompleted;
    
    public event ServerGetCollectionHashKeyCompletedEventHandler ServerGetCollectionHashKeyCompleted;
    
    public event GetiFolderCryptoKeysCompletedEventHandler GetiFolderCryptoKeysCompleted;
    
    public event SetiFolderCryptoKeysCompletedEventHandler SetiFolderCryptoKeysCompleted;
    
    public event ExportiFoldersCryptoKeysCompletedEventHandler ExportiFoldersCryptoKeysCompleted;
    
    public event ImportiFoldersCryptoKeysCompletedEventHandler ImportiFoldersCryptoKeysCompleted;
    
    public event ExportiFoldersCryptoKeysToDocCompletedEventHandler ExportiFoldersCryptoKeysToDocCompleted;
    
    public event RecoverKeysCompletedEventHandler RecoverKeysCompleted;
    
    public event ImportiFoldersCryptoKeysFromDocCompletedEventHandler ImportiFoldersCryptoKeysFromDocCompleted;
    
    public event ExportRecoverImportCompletedEventHandler ExportRecoverImportCompleted;
    
    public event SetPassPhraseCompletedEventHandler SetPassPhraseCompleted;
    
    public event DefaultAccountCompletedEventHandler DefaultAccountCompleted;
    
    public event GetDefaultiFolderCompletedEventHandler GetDefaultiFolderCompleted;
    
    public event ReSetPassPhraseCompletedEventHandler ReSetPassPhraseCompleted;
    
    public event ValidatePassPhraseCompletedEventHandler ValidatePassPhraseCompleted;
    
    public event IsPassPhraseSetCompletedEventHandler IsPassPhraseSetCompleted;
    
    public event GetSimiasDataPathCompletedEventHandler GetSimiasDataPathCompleted;
    
    public event GetSimiasProcessIDCompletedEventHandler GetSimiasProcessIDCompleted;
    
    /// <remarks>
///Allows a client to ping to make sure the Web Service is up and running
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/PingSimias", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void PingSimias() {
        this.Invoke("PingSimias", new object[0]);
    }
    
    public System.IAsyncResult BeginPingSimias(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("PingSimias", new object[0], callback, asyncState);
    }
    
    public void EndPingSimias(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    public void PingSimiasAsync() {
        this.PingSimiasAsync(null);
    }
    
    public void PingSimiasAsync(object userState) {
        if ((this.PingSimiasOperationCompleted == null)) {
            this.PingSimiasOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPingSimiasCompleted);
        }
        this.InvokeAsync("PingSimias", new object[0], this.PingSimiasOperationCompleted, userState);
    }
    
    private void OnPingSimiasCompleted(object arg) {
        if ((this.PingSimiasCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.PingSimiasCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Add a member to the domain.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/AddMemberToDomain", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void AddMemberToDomain(string DomainID, string MemberName, string MemberID, string PublicKey, string GivenName, string FamilyName) {
        this.Invoke("AddMemberToDomain", new object[] {
                    DomainID,
                    MemberName,
                    MemberID,
                    PublicKey,
                    GivenName,
                    FamilyName});
    }
    
    public System.IAsyncResult BeginAddMemberToDomain(string DomainID, string MemberName, string MemberID, string PublicKey, string GivenName, string FamilyName, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("AddMemberToDomain", new object[] {
                    DomainID,
                    MemberName,
                    MemberID,
                    PublicKey,
                    GivenName,
                    FamilyName}, callback, asyncState);
    }
    
    public void EndAddMemberToDomain(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    public void AddMemberToDomainAsync(string DomainID, string MemberName, string MemberID, string PublicKey, string GivenName, string FamilyName) {
        this.AddMemberToDomainAsync(DomainID, MemberName, MemberID, PublicKey, GivenName, FamilyName, null);
    }
    
    public void AddMemberToDomainAsync(string DomainID, string MemberName, string MemberID, string PublicKey, string GivenName, string FamilyName, object userState) {
        if ((this.AddMemberToDomainOperationCompleted == null)) {
            this.AddMemberToDomainOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddMemberToDomainCompleted);
        }
        this.InvokeAsync("AddMemberToDomain", new object[] {
                    DomainID,
                    MemberName,
                    MemberID,
                    PublicKey,
                    GivenName,
                    FamilyName}, this.AddMemberToDomainOperationCompleted, userState);
    }
    
    private void OnAddMemberToDomainCompleted(object arg) {
        if ((this.AddMemberToDomainCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.AddMemberToDomainCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Remove a member from the domain.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/RemoveMemberFromDomain", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void RemoveMemberFromDomain(string DomainID, string MemberID) {
        this.Invoke("RemoveMemberFromDomain", new object[] {
                    DomainID,
                    MemberID});
    }
    
    public System.IAsyncResult BeginRemoveMemberFromDomain(string DomainID, string MemberID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("RemoveMemberFromDomain", new object[] {
                    DomainID,
                    MemberID}, callback, asyncState);
    }
    
    public void EndRemoveMemberFromDomain(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    public void RemoveMemberFromDomainAsync(string DomainID, string MemberID) {
        this.RemoveMemberFromDomainAsync(DomainID, MemberID, null);
    }
    
    public void RemoveMemberFromDomainAsync(string DomainID, string MemberID, object userState) {
        if ((this.RemoveMemberFromDomainOperationCompleted == null)) {
            this.RemoveMemberFromDomainOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveMemberFromDomainCompleted);
        }
        this.InvokeAsync("RemoveMemberFromDomain", new object[] {
                    DomainID,
                    MemberID}, this.RemoveMemberFromDomainOperationCompleted, userState);
    }
    
    private void OnRemoveMemberFromDomainCompleted(object arg) {
        if ((this.RemoveMemberFromDomainCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.RemoveMemberFromDomainCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///End the search for domain members.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/FindCloseMembers", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void FindCloseMembers(string domainID, string searchContext) {
        this.Invoke("FindCloseMembers", new object[] {
                    domainID,
                    searchContext});
    }
    
    public System.IAsyncResult BeginFindCloseMembers(string domainID, string searchContext, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("FindCloseMembers", new object[] {
                    domainID,
                    searchContext}, callback, asyncState);
    }
    
    public void EndFindCloseMembers(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    public void FindCloseMembersAsync(string domainID, string searchContext) {
        this.FindCloseMembersAsync(domainID, searchContext, null);
    }
    
    public void FindCloseMembersAsync(string domainID, string searchContext, object userState) {
        if ((this.FindCloseMembersOperationCompleted == null)) {
            this.FindCloseMembersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFindCloseMembersCompleted);
        }
        this.InvokeAsync("FindCloseMembers", new object[] {
                    domainID,
                    searchContext}, this.FindCloseMembersOperationCompleted, userState);
    }
    
    private void OnFindCloseMembersCompleted(object arg) {
        if ((this.FindCloseMembersCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.FindCloseMembersCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Starts a search for all domain members.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/FindFirstMembers", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public bool FindFirstMembers(string domainID, int count, out string searchContext, out MemberInfo[] memberList, out int totalMembers) {
        object[] results = this.Invoke("FindFirstMembers", new object[] {
                    domainID,
                    count});
        totalMembers = ((int)(results[3]));
        memberList = ((MemberInfo[])(results[2]));
        searchContext = ((string)(results[1]));
        return ((bool)(results[0]));
    }
    
    public System.IAsyncResult BeginFindFirstMembers(string domainID, int count, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("FindFirstMembers", new object[] {
                    domainID,
                    count}, callback, asyncState);
    }
    
    public bool EndFindFirstMembers(System.IAsyncResult asyncResult, out string searchContext, out MemberInfo[] memberList, out int totalMembers) {
        object[] results = this.EndInvoke(asyncResult);
        totalMembers = ((int)(results[3]));
        memberList = ((MemberInfo[])(results[2]));
        searchContext = ((string)(results[1]));
        return ((bool)(results[0]));
    }
    
    public void FindFirstMembersAsync(string domainID, int count) {
        this.FindFirstMembersAsync(domainID, count, null);
    }
    
    public void FindFirstMembersAsync(string domainID, int count, object userState) {
        if ((this.FindFirstMembersOperationCompleted == null)) {
            this.FindFirstMembersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFindFirstMembersCompleted);
        }
        this.InvokeAsync("FindFirstMembers", new object[] {
                    domainID,
                    count}, this.FindFirstMembersOperationCompleted, userState);
    }
    
    private void OnFindFirstMembersCompleted(object arg) {
        if ((this.FindFirstMembersCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.FindFirstMembersCompleted(this, new FindFirstMembersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Starts a search for a specific set of domain members.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/FindFirstSpecificMembers", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public bool FindFirstSpecificMembers(string domainID, string attributeName, string searchString, SearchType operation, int count, out string searchContext, out MemberInfo[] memberList, out int totalMembers) {
        object[] results = this.Invoke("FindFirstSpecificMembers", new object[] {
                    domainID,
                    attributeName,
                    searchString,
                    operation,
                    count});
        totalMembers = ((int)(results[3]));
        memberList = ((MemberInfo[])(results[2]));
        searchContext = ((string)(results[1]));
        return ((bool)(results[0]));
    }
    
    public System.IAsyncResult BeginFindFirstSpecificMembers(string domainID, string attributeName, string searchString, SearchType operation, int count, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("FindFirstSpecificMembers", new object[] {
                    domainID,
                    attributeName,
                    searchString,
                    operation,
                    count}, callback, asyncState);
    }
    
    public bool EndFindFirstSpecificMembers(System.IAsyncResult asyncResult, out string searchContext, out MemberInfo[] memberList, out int totalMembers) {
        object[] results = this.EndInvoke(asyncResult);
        totalMembers = ((int)(results[3]));
        memberList = ((MemberInfo[])(results[2]));
        searchContext = ((string)(results[1]));
        return ((bool)(results[0]));
    }
    
    public void FindFirstSpecificMembersAsync(string domainID, string attributeName, string searchString, SearchType operation, int count) {
        this.FindFirstSpecificMembersAsync(domainID, attributeName, searchString, operation, count, null);
    }
    
    public void FindFirstSpecificMembersAsync(string domainID, string attributeName, string searchString, SearchType operation, int count, object userState) {
        if ((this.FindFirstSpecificMembersOperationCompleted == null)) {
            this.FindFirstSpecificMembersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFindFirstSpecificMembersCompleted);
        }
        this.InvokeAsync("FindFirstSpecificMembers", new object[] {
                    domainID,
                    attributeName,
                    searchString,
                    operation,
                    count}, this.FindFirstSpecificMembersOperationCompleted, userState);
    }
    
    private void OnFindFirstSpecificMembersCompleted(object arg) {
        if ((this.FindFirstSpecificMembersCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.FindFirstSpecificMembersCompleted(this, new FindFirstSpecificMembersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Continues the search for domain members from the current record location.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/FindNextMembers", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public bool FindNextMembers(string domainID, ref string searchContext, int count, out MemberInfo[] memberList) {
        object[] results = this.Invoke("FindNextMembers", new object[] {
                    domainID,
                    searchContext,
                    count});
        memberList = ((MemberInfo[])(results[2]));
        searchContext = ((string)(results[1]));
        return ((bool)(results[0]));
    }
    
    public System.IAsyncResult BeginFindNextMembers(string domainID, string searchContext, int count, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("FindNextMembers", new object[] {
                    domainID,
                    searchContext,
                    count}, callback, asyncState);
    }
    
    public bool EndFindNextMembers(System.IAsyncResult asyncResult, out string searchContext, out MemberInfo[] memberList) {
        object[] results = this.EndInvoke(asyncResult);
        memberList = ((MemberInfo[])(results[2]));
        searchContext = ((string)(results[1]));
        return ((bool)(results[0]));
    }
    
    public void FindNextMembersAsync(string domainID, string searchContext, int count) {
        this.FindNextMembersAsync(domainID, searchContext, count, null);
    }
    
    public void FindNextMembersAsync(string domainID, string searchContext, int count, object userState) {
        if ((this.FindNextMembersOperationCompleted == null)) {
            this.FindNextMembersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFindNextMembersCompleted);
        }
        this.InvokeAsync("FindNextMembers", new object[] {
                    domainID,
                    searchContext,
                    count}, this.FindNextMembersOperationCompleted, userState);
    }
    
    private void OnFindNextMembersCompleted(object arg) {
        if ((this.FindNextMembersCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.FindNextMembersCompleted(this, new FindNextMembersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Continues the search for domain members previous to the current record location.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/FindPreviousMembers", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public bool FindPreviousMembers(string domainID, ref string searchContext, int count, out MemberInfo[] memberList) {
        object[] results = this.Invoke("FindPreviousMembers", new object[] {
                    domainID,
                    searchContext,
                    count});
        memberList = ((MemberInfo[])(results[2]));
        searchContext = ((string)(results[1]));
        return ((bool)(results[0]));
    }
    
    public System.IAsyncResult BeginFindPreviousMembers(string domainID, string searchContext, int count, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("FindPreviousMembers", new object[] {
                    domainID,
                    searchContext,
                    count}, callback, asyncState);
    }
    
    public bool EndFindPreviousMembers(System.IAsyncResult asyncResult, out string searchContext, out MemberInfo[] memberList) {
        object[] results = this.EndInvoke(asyncResult);
        memberList = ((MemberInfo[])(results[2]));
        searchContext = ((string)(results[1]));
        return ((bool)(results[0]));
    }
    
    public void FindPreviousMembersAsync(string domainID, string searchContext, int count) {
        this.FindPreviousMembersAsync(domainID, searchContext, count, null);
    }
    
    public void FindPreviousMembersAsync(string domainID, string searchContext, int count, object userState) {
        if ((this.FindPreviousMembersOperationCompleted == null)) {
            this.FindPreviousMembersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFindPreviousMembersCompleted);
        }
        this.InvokeAsync("FindPreviousMembers", new object[] {
                    domainID,
                    searchContext,
                    count}, this.FindPreviousMembersOperationCompleted, userState);
    }
    
    private void OnFindPreviousMembersCompleted(object arg) {
        if ((this.FindPreviousMembersCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.FindPreviousMembersCompleted(this, new FindPreviousMembersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Continues the search for domain members from the specified record location.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/FindSeekMembers", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public bool FindSeekMembers(string domainID, ref string searchContext, int offset, int count, out MemberInfo[] memberList) {
        object[] results = this.Invoke("FindSeekMembers", new object[] {
                    domainID,
                    searchContext,
                    offset,
                    count});
        memberList = ((MemberInfo[])(results[2]));
        searchContext = ((string)(results[1]));
        return ((bool)(results[0]));
    }
    
    public System.IAsyncResult BeginFindSeekMembers(string domainID, string searchContext, int offset, int count, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("FindSeekMembers", new object[] {
                    domainID,
                    searchContext,
                    offset,
                    count}, callback, asyncState);
    }
    
    public bool EndFindSeekMembers(System.IAsyncResult asyncResult, out string searchContext, out MemberInfo[] memberList) {
        object[] results = this.EndInvoke(asyncResult);
        memberList = ((MemberInfo[])(results[2]));
        searchContext = ((string)(results[1]));
        return ((bool)(results[0]));
    }
    
    public void FindSeekMembersAsync(string domainID, string searchContext, int offset, int count) {
        this.FindSeekMembersAsync(domainID, searchContext, offset, count, null);
    }
    
    public void FindSeekMembersAsync(string domainID, string searchContext, int offset, int count, object userState) {
        if ((this.FindSeekMembersOperationCompleted == null)) {
            this.FindSeekMembersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFindSeekMembersCompleted);
        }
        this.InvokeAsync("FindSeekMembers", new object[] {
                    domainID,
                    searchContext,
                    offset,
                    count}, this.FindSeekMembersOperationCompleted, userState);
    }
    
    private void OnFindSeekMembersCompleted(object arg) {
        if ((this.FindSeekMembersCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.FindSeekMembersCompleted(this, new FindSeekMembersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///GetSimiasInformation
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/GetSimiasInformation", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public string GetSimiasInformation() {
        object[] results = this.Invoke("GetSimiasInformation", new object[0]);
        return ((string)(results[0]));
    }
    
    public System.IAsyncResult BeginGetSimiasInformation(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetSimiasInformation", new object[0], callback, asyncState);
    }
    
    public string EndGetSimiasInformation(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    public void GetSimiasInformationAsync() {
        this.GetSimiasInformationAsync(null);
    }
    
    public void GetSimiasInformationAsync(object userState) {
        if ((this.GetSimiasInformationOperationCompleted == null)) {
            this.GetSimiasInformationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSimiasInformationCompleted);
        }
        this.InvokeAsync("GetSimiasInformation", new object[0], this.GetSimiasInformationOperationCompleted, userState);
    }
    
    private void OnGetSimiasInformationCompleted(object arg) {
        if ((this.GetSimiasInformationCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetSimiasInformationCompleted(this, new GetSimiasInformationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///GetDomainInformation
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/GetDomainInformation", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public DomainInformation GetDomainInformation(string domainID) {
        object[] results = this.Invoke("GetDomainInformation", new object[] {
                    domainID});
        return ((DomainInformation)(results[0]));
    }
    
    public System.IAsyncResult BeginGetDomainInformation(string domainID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetDomainInformation", new object[] {
                    domainID}, callback, asyncState);
    }
    
    public DomainInformation EndGetDomainInformation(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((DomainInformation)(results[0]));
    }
    
    public void GetDomainInformationAsync(string domainID) {
        this.GetDomainInformationAsync(domainID, null);
    }
    
    public void GetDomainInformationAsync(string domainID, object userState) {
        if ((this.GetDomainInformationOperationCompleted == null)) {
            this.GetDomainInformationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDomainInformationCompleted);
        }
        this.InvokeAsync("GetDomainInformation", new object[] {
                    domainID}, this.GetDomainInformationOperationCompleted, userState);
    }
    
    private void OnGetDomainInformationCompleted(object arg) {
        if ((this.GetDomainInformationCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetDomainInformationCompleted(this, new GetDomainInformationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Get a list of local domains
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/GetDomains", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public DomainInformation[] GetDomains(bool onlySlaves) {
        object[] results = this.Invoke("GetDomains", new object[] {
                    onlySlaves});
        return ((DomainInformation[])(results[0]));
    }
    
    public System.IAsyncResult BeginGetDomains(bool onlySlaves, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetDomains", new object[] {
                    onlySlaves}, callback, asyncState);
    }
    
    public DomainInformation[] EndGetDomains(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((DomainInformation[])(results[0]));
    }
    
    public void GetDomainsAsync(bool onlySlaves) {
        this.GetDomainsAsync(onlySlaves, null);
    }
    
    public void GetDomainsAsync(bool onlySlaves, object userState) {
        if ((this.GetDomainsOperationCompleted == null)) {
            this.GetDomainsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDomainsCompleted);
        }
        this.InvokeAsync("GetDomains", new object[] {
                    onlySlaves}, this.GetDomainsOperationCompleted, userState);
    }
    
    private void OnGetDomainsCompleted(object arg) {
        if ((this.GetDomainsCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetDomainsCompleted(this, new GetDomainsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Login or authenticate to a remote domain
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/LoginToRemoteDomain", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public Status LoginToRemoteDomain(string domainID, string password) {
        object[] results = this.Invoke("LoginToRemoteDomain", new object[] {
                    domainID,
                    password});
        return ((Status)(results[0]));
    }
    
    public System.IAsyncResult BeginLoginToRemoteDomain(string domainID, string password, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("LoginToRemoteDomain", new object[] {
                    domainID,
                    password}, callback, asyncState);
    }
    
    public Status EndLoginToRemoteDomain(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((Status)(results[0]));
    }
    
    public void LoginToRemoteDomainAsync(string domainID, string password) {
        this.LoginToRemoteDomainAsync(domainID, password, null);
    }
    
    public void LoginToRemoteDomainAsync(string domainID, string password, object userState) {
        if ((this.LoginToRemoteDomainOperationCompleted == null)) {
            this.LoginToRemoteDomainOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoginToRemoteDomainCompleted);
        }
        this.InvokeAsync("LoginToRemoteDomain", new object[] {
                    domainID,
                    password}, this.LoginToRemoteDomainOperationCompleted, userState);
    }
    
    private void OnLoginToRemoteDomainCompleted(object arg) {
        if ((this.LoginToRemoteDomainCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.LoginToRemoteDomainCompleted(this, new LoginToRemoteDomainCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Logout from a remote domain
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/LogoutFromRemoteDomain", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public Status LogoutFromRemoteDomain(string domainID) {
        object[] results = this.Invoke("LogoutFromRemoteDomain", new object[] {
                    domainID});
        return ((Status)(results[0]));
    }
    
    public System.IAsyncResult BeginLogoutFromRemoteDomain(string domainID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("LogoutFromRemoteDomain", new object[] {
                    domainID}, callback, asyncState);
    }
    
    public Status EndLogoutFromRemoteDomain(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((Status)(results[0]));
    }
    
    public void LogoutFromRemoteDomainAsync(string domainID) {
        this.LogoutFromRemoteDomainAsync(domainID, null);
    }
    
    public void LogoutFromRemoteDomainAsync(string domainID, object userState) {
        if ((this.LogoutFromRemoteDomainOperationCompleted == null)) {
            this.LogoutFromRemoteDomainOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogoutFromRemoteDomainCompleted);
        }
        this.InvokeAsync("LogoutFromRemoteDomain", new object[] {
                    domainID}, this.LogoutFromRemoteDomainOperationCompleted, userState);
    }
    
    private void OnLogoutFromRemoteDomainCompleted(object arg) {
        if ((this.LogoutFromRemoteDomainCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.LogoutFromRemoteDomainCompleted(this, new LogoutFromRemoteDomainCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Disable automatic authentication to the specified domain
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/DisableDomainAutoLogin", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void DisableDomainAutoLogin(string domainID) {
        this.Invoke("DisableDomainAutoLogin", new object[] {
                    domainID});
    }
    
    public System.IAsyncResult BeginDisableDomainAutoLogin(string domainID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("DisableDomainAutoLogin", new object[] {
                    domainID}, callback, asyncState);
    }
    
    public void EndDisableDomainAutoLogin(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    public void DisableDomainAutoLoginAsync(string domainID) {
        this.DisableDomainAutoLoginAsync(domainID, null);
    }
    
    public void DisableDomainAutoLoginAsync(string domainID, object userState) {
        if ((this.DisableDomainAutoLoginOperationCompleted == null)) {
            this.DisableDomainAutoLoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDisableDomainAutoLoginCompleted);
        }
        this.InvokeAsync("DisableDomainAutoLogin", new object[] {
                    domainID}, this.DisableDomainAutoLoginOperationCompleted, userState);
    }
    
    private void OnDisableDomainAutoLoginCompleted(object arg) {
        if ((this.DisableDomainAutoLoginCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.DisableDomainAutoLoginCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///WebMethod to check if a domain is active
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/IsDomainActive", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public bool IsDomainActive(string domainID) {
        object[] results = this.Invoke("IsDomainActive", new object[] {
                    domainID});
        return ((bool)(results[0]));
    }
    
    public System.IAsyncResult BeginIsDomainActive(string domainID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("IsDomainActive", new object[] {
                    domainID}, callback, asyncState);
    }
    
    public bool EndIsDomainActive(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    public void IsDomainActiveAsync(string domainID) {
        this.IsDomainActiveAsync(domainID, null);
    }
    
    public void IsDomainActiveAsync(string domainID, object userState) {
        if ((this.IsDomainActiveOperationCompleted == null)) {
            this.IsDomainActiveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsDomainActiveCompleted);
        }
        this.InvokeAsync("IsDomainActive", new object[] {
                    domainID}, this.IsDomainActiveOperationCompleted, userState);
    }
    
    private void OnIsDomainActiveCompleted(object arg) {
        if ((this.IsDomainActiveCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.IsDomainActiveCompleted(this, new IsDomainActiveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///SetDomainActive - enables synchronization to the remote server
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/SetDomainActive", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public int SetDomainActive(string domainID) {
        object[] results = this.Invoke("SetDomainActive", new object[] {
                    domainID});
        return ((int)(results[0]));
    }
    
    public System.IAsyncResult BeginSetDomainActive(string domainID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetDomainActive", new object[] {
                    domainID}, callback, asyncState);
    }
    
    public int EndSetDomainActive(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((int)(results[0]));
    }
    
    public void SetDomainActiveAsync(string domainID) {
        this.SetDomainActiveAsync(domainID, null);
    }
    
    public void SetDomainActiveAsync(string domainID, object userState) {
        if ((this.SetDomainActiveOperationCompleted == null)) {
            this.SetDomainActiveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetDomainActiveCompleted);
        }
        this.InvokeAsync("SetDomainActive", new object[] {
                    domainID}, this.SetDomainActiveOperationCompleted, userState);
    }
    
    private void OnSetDomainActiveCompleted(object arg) {
        if ((this.SetDomainActiveCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SetDomainActiveCompleted(this, new SetDomainActiveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///SetDomainInactive - disables remote synchronization
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/SetDomainInactive", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public int SetDomainInactive(string domainID) {
        object[] results = this.Invoke("SetDomainInactive", new object[] {
                    domainID});
        return ((int)(results[0]));
    }
    
    public System.IAsyncResult BeginSetDomainInactive(string domainID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetDomainInactive", new object[] {
                    domainID}, callback, asyncState);
    }
    
    public int EndSetDomainInactive(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((int)(results[0]));
    }
    
    public void SetDomainInactiveAsync(string domainID) {
        this.SetDomainInactiveAsync(domainID, null);
    }
    
    public void SetDomainInactiveAsync(string domainID, object userState) {
        if ((this.SetDomainInactiveOperationCompleted == null)) {
            this.SetDomainInactiveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetDomainInactiveCompleted);
        }
        this.InvokeAsync("SetDomainInactive", new object[] {
                    domainID}, this.SetDomainInactiveOperationCompleted, userState);
    }
    
    private void OnSetDomainInactiveCompleted(object arg) {
        if ((this.SetDomainInactiveCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SetDomainInactiveCompleted(this, new SetDomainInactiveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///ValidCredentials
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/ValidCredentials", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public bool ValidCredentials(string domainID, string memberID) {
        object[] results = this.Invoke("ValidCredentials", new object[] {
                    domainID,
                    memberID});
        return ((bool)(results[0]));
    }
    
    public System.IAsyncResult BeginValidCredentials(string domainID, string memberID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ValidCredentials", new object[] {
                    domainID,
                    memberID}, callback, asyncState);
    }
    
    public bool EndValidCredentials(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    public void ValidCredentialsAsync(string domainID, string memberID) {
        this.ValidCredentialsAsync(domainID, memberID, null);
    }
    
    public void ValidCredentialsAsync(string domainID, string memberID, object userState) {
        if ((this.ValidCredentialsOperationCompleted == null)) {
            this.ValidCredentialsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidCredentialsCompleted);
        }
        this.InvokeAsync("ValidCredentials", new object[] {
                    domainID,
                    memberID}, this.ValidCredentialsOperationCompleted, userState);
    }
    
    private void OnValidCredentialsCompleted(object arg) {
        if ((this.ValidCredentialsCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.ValidCredentialsCompleted(this, new ValidCredentialsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Sets domain credentials in the local store
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/SetDomainCredentials", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void SetDomainCredentials(string domainID, string credentials, CredentialType type) {
        this.Invoke("SetDomainCredentials", new object[] {
                    domainID,
                    credentials,
                    type});
    }
    
    public System.IAsyncResult BeginSetDomainCredentials(string domainID, string credentials, CredentialType type, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetDomainCredentials", new object[] {
                    domainID,
                    credentials,
                    type}, callback, asyncState);
    }
    
    public void EndSetDomainCredentials(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    public void SetDomainCredentialsAsync(string domainID, string credentials, CredentialType type) {
        this.SetDomainCredentialsAsync(domainID, credentials, type, null);
    }
    
    public void SetDomainCredentialsAsync(string domainID, string credentials, CredentialType type, object userState) {
        if ((this.SetDomainCredentialsOperationCompleted == null)) {
            this.SetDomainCredentialsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetDomainCredentialsCompleted);
        }
        this.InvokeAsync("SetDomainCredentials", new object[] {
                    domainID,
                    credentials,
                    type}, this.SetDomainCredentialsOperationCompleted, userState);
    }
    
    private void OnSetDomainCredentialsCompleted(object arg) {
        if ((this.SetDomainCredentialsCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SetDomainCredentialsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Sets host's url to local domain
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/SetHostAddress", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void SetHostAddress(string Host, string PublicUrl, string PrivateUrl, string DomainID) {
        this.Invoke("SetHostAddress", new object[] {
                    Host,
                    PublicUrl,
                    PrivateUrl,
                    DomainID});
    }
    
    public System.IAsyncResult BeginSetHostAddress(string Host, string PublicUrl, string PrivateUrl, string DomainID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetHostAddress", new object[] {
                    Host,
                    PublicUrl,
                    PrivateUrl,
                    DomainID}, callback, asyncState);
    }
    
    public void EndSetHostAddress(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    public void SetHostAddressAsync(string Host, string PublicUrl, string PrivateUrl, string DomainID) {
        this.SetHostAddressAsync(Host, PublicUrl, PrivateUrl, DomainID, null);
    }
    
    public void SetHostAddressAsync(string Host, string PublicUrl, string PrivateUrl, string DomainID, object userState) {
        if ((this.SetHostAddressOperationCompleted == null)) {
            this.SetHostAddressOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetHostAddressCompleted);
        }
        this.InvokeAsync("SetHostAddress", new object[] {
                    Host,
                    PublicUrl,
                    PrivateUrl,
                    DomainID}, this.SetHostAddressOperationCompleted, userState);
    }
    
    private void OnSetHostAddressCompleted(object arg) {
        if ((this.SetHostAddressCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SetHostAddressCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Stores domain passphrase in the local store
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/StorePassPhrase", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void StorePassPhrase(string domainID, string passPhrase, CredentialType type, bool rememberPassPhrase) {
        this.Invoke("StorePassPhrase", new object[] {
                    domainID,
                    passPhrase,
                    type,
                    rememberPassPhrase});
    }
    
    public System.IAsyncResult BeginStorePassPhrase(string domainID, string passPhrase, CredentialType type, bool rememberPassPhrase, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("StorePassPhrase", new object[] {
                    domainID,
                    passPhrase,
                    type,
                    rememberPassPhrase}, callback, asyncState);
    }
    
    public void EndStorePassPhrase(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    public void StorePassPhraseAsync(string domainID, string passPhrase, CredentialType type, bool rememberPassPhrase) {
        this.StorePassPhraseAsync(domainID, passPhrase, type, rememberPassPhrase, null);
    }
    
    public void StorePassPhraseAsync(string domainID, string passPhrase, CredentialType type, bool rememberPassPhrase, object userState) {
        if ((this.StorePassPhraseOperationCompleted == null)) {
            this.StorePassPhraseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStorePassPhraseCompleted);
        }
        this.InvokeAsync("StorePassPhrase", new object[] {
                    domainID,
                    passPhrase,
                    type,
                    rememberPassPhrase}, this.StorePassPhraseOperationCompleted, userState);
    }
    
    private void OnStorePassPhraseCompleted(object arg) {
        if ((this.StorePassPhraseCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.StorePassPhraseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Get the saved credentials from a domain
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/GetDomainCredentials", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public CredentialType GetDomainCredentials(string domainID, out string userID, out string credentials) {
        object[] results = this.Invoke("GetDomainCredentials", new object[] {
                    domainID});
        credentials = ((string)(results[2]));
        userID = ((string)(results[1]));
        return ((CredentialType)(results[0]));
    }
    
    public System.IAsyncResult BeginGetDomainCredentials(string domainID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetDomainCredentials", new object[] {
                    domainID}, callback, asyncState);
    }
    
    public CredentialType EndGetDomainCredentials(System.IAsyncResult asyncResult, out string userID, out string credentials) {
        object[] results = this.EndInvoke(asyncResult);
        credentials = ((string)(results[2]));
        userID = ((string)(results[1]));
        return ((CredentialType)(results[0]));
    }
    
    public void GetDomainCredentialsAsync(string domainID) {
        this.GetDomainCredentialsAsync(domainID, null);
    }
    
    public void GetDomainCredentialsAsync(string domainID, object userState) {
        if ((this.GetDomainCredentialsOperationCompleted == null)) {
            this.GetDomainCredentialsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDomainCredentialsCompleted);
        }
        this.InvokeAsync("GetDomainCredentials", new object[] {
                    domainID}, this.GetDomainCredentialsOperationCompleted, userState);
    }
    
    private void OnGetDomainCredentialsCompleted(object arg) {
        if ((this.GetDomainCredentialsCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetDomainCredentialsCompleted(this, new GetDomainCredentialsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Get the saved credentials from a domain
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/GetPassPhrase", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public string GetPassPhrase(string domainID) {
        object[] results = this.Invoke("GetPassPhrase", new object[] {
                    domainID});
        return ((string)(results[0]));
    }
    
    public System.IAsyncResult BeginGetPassPhrase(string domainID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetPassPhrase", new object[] {
                    domainID}, callback, asyncState);
    }
    
    public string EndGetPassPhrase(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    public void GetPassPhraseAsync(string domainID) {
        this.GetPassPhraseAsync(domainID, null);
    }
    
    public void GetPassPhraseAsync(string domainID, object userState) {
        if ((this.GetPassPhraseOperationCompleted == null)) {
            this.GetPassPhraseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPassPhraseCompleted);
        }
        this.InvokeAsync("GetPassPhrase", new object[] {
                    domainID}, this.GetPassPhraseOperationCompleted, userState);
    }
    
    private void OnGetPassPhraseCompleted(object arg) {
        if ((this.GetPassPhraseCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetPassPhraseCompleted(this, new GetPassPhraseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Get the saved credentials from a domain
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/GetRememberOption", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public bool GetRememberOption(string domainID) {
        object[] results = this.Invoke("GetRememberOption", new object[] {
                    domainID});
        return ((bool)(results[0]));
    }
    
    public System.IAsyncResult BeginGetRememberOption(string domainID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetRememberOption", new object[] {
                    domainID}, callback, asyncState);
    }
    
    public bool EndGetRememberOption(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    public void GetRememberOptionAsync(string domainID) {
        this.GetRememberOptionAsync(domainID, null);
    }
    
    public void GetRememberOptionAsync(string domainID, object userState) {
        if ((this.GetRememberOptionOperationCompleted == null)) {
            this.GetRememberOptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRememberOptionCompleted);
        }
        this.InvokeAsync("GetRememberOption", new object[] {
                    domainID}, this.GetRememberOptionOperationCompleted, userState);
    }
    
    private void OnGetRememberOptionCompleted(object arg) {
        if ((this.GetRememberOptionCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetRememberOptionCompleted(this, new GetRememberOptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Connects to a Domain
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/ConnectToDomain", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public DomainInformation ConnectToDomain(string UserName, string Password, string Host) {
        object[] results = this.Invoke("ConnectToDomain", new object[] {
                    UserName,
                    Password,
                    Host});
        return ((DomainInformation)(results[0]));
    }
    
    public System.IAsyncResult BeginConnectToDomain(string UserName, string Password, string Host, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ConnectToDomain", new object[] {
                    UserName,
                    Password,
                    Host}, callback, asyncState);
    }
    
    public DomainInformation EndConnectToDomain(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((DomainInformation)(results[0]));
    }
    
    public void ConnectToDomainAsync(string UserName, string Password, string Host) {
        this.ConnectToDomainAsync(UserName, Password, Host, null);
    }
    
    public void ConnectToDomainAsync(string UserName, string Password, string Host, object userState) {
        if ((this.ConnectToDomainOperationCompleted == null)) {
            this.ConnectToDomainOperationCompleted = new System.Threading.SendOrPostCallback(this.OnConnectToDomainCompleted);
        }
        this.InvokeAsync("ConnectToDomain", new object[] {
                    UserName,
                    Password,
                    Host}, this.ConnectToDomainOperationCompleted, userState);
    }
    
    private void OnConnectToDomainCompleted(object arg) {
        if ((this.ConnectToDomainCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.ConnectToDomainCompleted(this, new ConnectToDomainCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Removes a domain account from the workstation
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/LeaveDomain", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void LeaveDomain(string DomainID, bool LocalOnly) {
        this.Invoke("LeaveDomain", new object[] {
                    DomainID,
                    LocalOnly});
    }
    
    public System.IAsyncResult BeginLeaveDomain(string DomainID, bool LocalOnly, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("LeaveDomain", new object[] {
                    DomainID,
                    LocalOnly}, callback, asyncState);
    }
    
    public void EndLeaveDomain(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    public void LeaveDomainAsync(string DomainID, bool LocalOnly) {
        this.LeaveDomainAsync(DomainID, LocalOnly, null);
    }
    
    public void LeaveDomainAsync(string DomainID, bool LocalOnly, object userState) {
        if ((this.LeaveDomainOperationCompleted == null)) {
            this.LeaveDomainOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLeaveDomainCompleted);
        }
        this.InvokeAsync("LeaveDomain", new object[] {
                    DomainID,
                    LocalOnly}, this.LeaveDomainOperationCompleted, userState);
    }
    
    private void OnLeaveDomainCompleted(object arg) {
        if ((this.LeaveDomainCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.LeaveDomainCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Remove Certificate for this specified host
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/RemoveCertFromTable", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void RemoveCertFromTable(string host) {
        this.Invoke("RemoveCertFromTable", new object[] {
                    host});
    }
    
    public System.IAsyncResult BeginRemoveCertFromTable(string host, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("RemoveCertFromTable", new object[] {
                    host}, callback, asyncState);
    }
    
    public void EndRemoveCertFromTable(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    public void RemoveCertFromTableAsync(string host) {
        this.RemoveCertFromTableAsync(host, null);
    }
    
    public void RemoveCertFromTableAsync(string host, object userState) {
        if ((this.RemoveCertFromTableOperationCompleted == null)) {
            this.RemoveCertFromTableOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveCertFromTableCompleted);
        }
        this.InvokeAsync("RemoveCertFromTable", new object[] {
                    host}, this.RemoveCertFromTableOperationCompleted, userState);
    }
    
    private void OnRemoveCertFromTableCompleted(object arg) {
        if ((this.RemoveCertFromTableCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.RemoveCertFromTableCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Change the default domain to the specified domain ID
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/SetDefaultDomain", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void SetDefaultDomain(string domainID) {
        this.Invoke("SetDefaultDomain", new object[] {
                    domainID});
    }
    
    public System.IAsyncResult BeginSetDefaultDomain(string domainID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetDefaultDomain", new object[] {
                    domainID}, callback, asyncState);
    }
    
    public void EndSetDefaultDomain(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    public void SetDefaultDomainAsync(string domainID) {
        this.SetDefaultDomainAsync(domainID, null);
    }
    
    public void SetDefaultDomainAsync(string domainID, object userState) {
        if ((this.SetDefaultDomainOperationCompleted == null)) {
            this.SetDefaultDomainOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetDefaultDomainCompleted);
        }
        this.InvokeAsync("SetDefaultDomain", new object[] {
                    domainID}, this.SetDefaultDomainOperationCompleted, userState);
    }
    
    private void OnSetDefaultDomainCompleted(object arg) {
        if ((this.SetDefaultDomainCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SetDefaultDomainCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Get the ID of the default domain
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/GetDefaultDomainID", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public string GetDefaultDomainID() {
        object[] results = this.Invoke("GetDefaultDomainID", new object[0]);
        return ((string)(results[0]));
    }
    
    public System.IAsyncResult BeginGetDefaultDomainID(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetDefaultDomainID", new object[0], callback, asyncState);
    }
    
    public string EndGetDefaultDomainID(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    public void GetDefaultDomainIDAsync() {
        this.GetDefaultDomainIDAsync(null);
    }
    
    public void GetDefaultDomainIDAsync(object userState) {
        if ((this.GetDefaultDomainIDOperationCompleted == null)) {
            this.GetDefaultDomainIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDefaultDomainIDCompleted);
        }
        this.InvokeAsync("GetDefaultDomainID", new object[0], this.GetDefaultDomainIDOperationCompleted, userState);
    }
    
    private void OnGetDefaultDomainIDCompleted(object arg) {
        if ((this.GetDefaultDomainIDCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetDefaultDomainIDCompleted(this, new GetDefaultDomainIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Get the certificate of the specified host.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/GetCertificate", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public byte[] GetCertificate(string host) {
        object[] results = this.Invoke("GetCertificate", new object[] {
                    host});
        return ((byte[])(results[0]));
    }
    
    public System.IAsyncResult BeginGetCertificate(string host, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetCertificate", new object[] {
                    host}, callback, asyncState);
    }
    
    public byte[] EndGetCertificate(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((byte[])(results[0]));
    }
    
    public void GetCertificateAsync(string host) {
        this.GetCertificateAsync(host, null);
    }
    
    public void GetCertificateAsync(string host, object userState) {
        if ((this.GetCertificateOperationCompleted == null)) {
            this.GetCertificateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCertificateCompleted);
        }
        this.InvokeAsync("GetCertificate", new object[] {
                    host}, this.GetCertificateOperationCompleted, userState);
    }
    
    private void OnGetCertificateCompleted(object arg) {
        if ((this.GetCertificateCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetCertificateCompleted(this, new GetCertificateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Get the certificate of the specified host.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/GetCertificate2", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public byte[] GetCertificate2(string host, out CertificateProblem Problem) {
        object[] results = this.Invoke("GetCertificate2", new object[] {
                    host});
        Problem = ((CertificateProblem)(results[1]));
        return ((byte[])(results[0]));
    }
    
    public System.IAsyncResult BeginGetCertificate2(string host, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetCertificate2", new object[] {
                    host}, callback, asyncState);
    }
    
    public byte[] EndGetCertificate2(System.IAsyncResult asyncResult, out CertificateProblem Problem) {
        object[] results = this.EndInvoke(asyncResult);
        Problem = ((CertificateProblem)(results[1]));
        return ((byte[])(results[0]));
    }
    
    public void GetCertificate2Async(string host) {
        this.GetCertificate2Async(host, null);
    }
    
    public void GetCertificate2Async(string host, object userState) {
        if ((this.GetCertificate2OperationCompleted == null)) {
            this.GetCertificate2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCertificate2Completed);
        }
        this.InvokeAsync("GetCertificate2", new object[] {
                    host}, this.GetCertificate2OperationCompleted, userState);
    }
    
    private void OnGetCertificate2Completed(object arg) {
        if ((this.GetCertificate2Completed != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetCertificate2Completed(this, new GetCertificate2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Store the certificate for the specified host.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/StoreCertificate", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void StoreCertificate(byte[] certificate, string host) {
        this.Invoke("StoreCertificate", new object[] {
                    certificate,
                    host});
    }
    
    public System.IAsyncResult BeginStoreCertificate(byte[] certificate, string host, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("StoreCertificate", new object[] {
                    certificate,
                    host}, callback, asyncState);
    }
    
    public void EndStoreCertificate(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    public void StoreCertificateAsync(byte[] certificate, string host) {
        this.StoreCertificateAsync(certificate, host, null);
    }
    
    public void StoreCertificateAsync(byte[] certificate, string host, object userState) {
        if ((this.StoreCertificateOperationCompleted == null)) {
            this.StoreCertificateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStoreCertificateCompleted);
        }
        this.InvokeAsync("StoreCertificate", new object[] {
                    certificate,
                    host}, this.StoreCertificateOperationCompleted, userState);
    }
    
    private void OnStoreCertificateCompleted(object arg) {
        if ((this.StoreCertificateCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.StoreCertificateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Store the certificate for the specified host.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/StoreDomainCertificate", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void StoreDomainCertificate(byte[] certificate, string host, string domainID) {
        this.Invoke("StoreDomainCertificate", new object[] {
                    certificate,
                    host,
                    domainID});
    }
    
    public System.IAsyncResult BeginStoreDomainCertificate(byte[] certificate, string host, string domainID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("StoreDomainCertificate", new object[] {
                    certificate,
                    host,
                    domainID}, callback, asyncState);
    }
    
    public void EndStoreDomainCertificate(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    public void StoreDomainCertificateAsync(byte[] certificate, string host, string domainID) {
        this.StoreDomainCertificateAsync(certificate, host, domainID, null);
    }
    
    public void StoreDomainCertificateAsync(byte[] certificate, string host, string domainID, object userState) {
        if ((this.StoreDomainCertificateOperationCompleted == null)) {
            this.StoreDomainCertificateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStoreDomainCertificateCompleted);
        }
        this.InvokeAsync("StoreDomainCertificate", new object[] {
                    certificate,
                    host,
                    domainID}, this.StoreDomainCertificateOperationCompleted, userState);
    }
    
    private void OnStoreDomainCertificateCompleted(object arg) {
        if ((this.StoreDomainCertificateCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.StoreDomainCertificateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Get the Recovery Agent List.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/GetRAList", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public string[] GetRAList() {
        object[] results = this.Invoke("GetRAList", new object[0]);
        return ((string[])(results[0]));
    }
    
    public System.IAsyncResult BeginGetRAList(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetRAList", new object[0], callback, asyncState);
    }
    
    public string[] EndGetRAList(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string[])(results[0]));
    }
    
    public void GetRAListAsync() {
        this.GetRAListAsync(null);
    }
    
    public void GetRAListAsync(object userState) {
        if ((this.GetRAListOperationCompleted == null)) {
            this.GetRAListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRAListCompleted);
        }
        this.InvokeAsync("GetRAList", new object[0], this.GetRAListOperationCompleted, userState);
    }
    
    private void OnGetRAListCompleted(object arg) {
        if ((this.GetRAListCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetRAListCompleted(this, new GetRAListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Get the Recovery Agent List.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/GetRAListOnClient", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public string[] GetRAListOnClient(string DomainID) {
        object[] results = this.Invoke("GetRAListOnClient", new object[] {
                    DomainID});
        return ((string[])(results[0]));
    }
    
    public System.IAsyncResult BeginGetRAListOnClient(string DomainID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetRAListOnClient", new object[] {
                    DomainID}, callback, asyncState);
    }
    
    public string[] EndGetRAListOnClient(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string[])(results[0]));
    }
    
    public void GetRAListOnClientAsync(string DomainID) {
        this.GetRAListOnClientAsync(DomainID, null);
    }
    
    public void GetRAListOnClientAsync(string DomainID, object userState) {
        if ((this.GetRAListOnClientOperationCompleted == null)) {
            this.GetRAListOnClientOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRAListOnClientCompleted);
        }
        this.InvokeAsync("GetRAListOnClient", new object[] {
                    DomainID}, this.GetRAListOnClientOperationCompleted, userState);
    }
    
    private void OnGetRAListOnClientCompleted(object arg) {
        if ((this.GetRAListOnClientCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetRAListOnClientCompleted(this, new GetRAListOnClientCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Get the Recovery Agent certificate of the domain.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/GetRACertificate", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public byte[] GetRACertificate(string rAgent) {
        object[] results = this.Invoke("GetRACertificate", new object[] {
                    rAgent});
        return ((byte[])(results[0]));
    }
    
    public System.IAsyncResult BeginGetRACertificate(string rAgent, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetRACertificate", new object[] {
                    rAgent}, callback, asyncState);
    }
    
    public byte[] EndGetRACertificate(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((byte[])(results[0]));
    }
    
    public void GetRACertificateAsync(string rAgent) {
        this.GetRACertificateAsync(rAgent, null);
    }
    
    public void GetRACertificateAsync(string rAgent, object userState) {
        if ((this.GetRACertificateOperationCompleted == null)) {
            this.GetRACertificateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRACertificateCompleted);
        }
        this.InvokeAsync("GetRACertificate", new object[] {
                    rAgent}, this.GetRACertificateOperationCompleted, userState);
    }
    
    private void OnGetRACertificateCompleted(object arg) {
        if ((this.GetRACertificateCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetRACertificateCompleted(this, new GetRACertificateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Get the Recovery Agent List.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/GetRACertificateOnClient", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public byte[] GetRACertificateOnClient(string DomainID, string rAgent) {
        object[] results = this.Invoke("GetRACertificateOnClient", new object[] {
                    DomainID,
                    rAgent});
        return ((byte[])(results[0]));
    }
    
    public System.IAsyncResult BeginGetRACertificateOnClient(string DomainID, string rAgent, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetRACertificateOnClient", new object[] {
                    DomainID,
                    rAgent}, callback, asyncState);
    }
    
    public byte[] EndGetRACertificateOnClient(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((byte[])(results[0]));
    }
    
    public void GetRACertificateOnClientAsync(string DomainID, string rAgent) {
        this.GetRACertificateOnClientAsync(DomainID, rAgent, null);
    }
    
    public void GetRACertificateOnClientAsync(string DomainID, string rAgent, object userState) {
        if ((this.GetRACertificateOnClientOperationCompleted == null)) {
            this.GetRACertificateOnClientOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRACertificateOnClientCompleted);
        }
        this.InvokeAsync("GetRACertificateOnClient", new object[] {
                    DomainID,
                    rAgent}, this.GetRACertificateOnClientOperationCompleted, userState);
    }
    
    private void OnGetRACertificateOnClientCompleted(object arg) {
        if ((this.GetRACertificateOnClientCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetRACertificateOnClientCompleted(this, new GetRACertificateOnClientCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Get the public key of the certificate
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/GetPublicKey", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public string GetPublicKey(string DomainID, string rAgent) {
        object[] results = this.Invoke("GetPublicKey", new object[] {
                    DomainID,
                    rAgent});
        return ((string)(results[0]));
    }
    
    public System.IAsyncResult BeginGetPublicKey(string DomainID, string rAgent, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetPublicKey", new object[] {
                    DomainID,
                    rAgent}, callback, asyncState);
    }
    
    public string EndGetPublicKey(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    public void GetPublicKeyAsync(string DomainID, string rAgent) {
        this.GetPublicKeyAsync(DomainID, rAgent, null);
    }
    
    public void GetPublicKeyAsync(string DomainID, string rAgent, object userState) {
        if ((this.GetPublicKeyOperationCompleted == null)) {
            this.GetPublicKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPublicKeyCompleted);
        }
        this.InvokeAsync("GetPublicKey", new object[] {
                    DomainID,
                    rAgent}, this.GetPublicKeyOperationCompleted, userState);
    }
    
    private void OnGetPublicKeyCompleted(object arg) {
        if ((this.GetPublicKeyCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetPublicKeyCompleted(this, new GetPublicKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Get the public key of the certificate
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/GetDefaultPublicKey", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public string GetDefaultPublicKey(string DomainID) {
        object[] results = this.Invoke("GetDefaultPublicKey", new object[] {
                    DomainID});
        return ((string)(results[0]));
    }
    
    public System.IAsyncResult BeginGetDefaultPublicKey(string DomainID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetDefaultPublicKey", new object[] {
                    DomainID}, callback, asyncState);
    }
    
    public string EndGetDefaultPublicKey(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    public void GetDefaultPublicKeyAsync(string DomainID) {
        this.GetDefaultPublicKeyAsync(DomainID, null);
    }
    
    public void GetDefaultPublicKeyAsync(string DomainID, object userState) {
        if ((this.GetDefaultPublicKeyOperationCompleted == null)) {
            this.GetDefaultPublicKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDefaultPublicKeyCompleted);
        }
        this.InvokeAsync("GetDefaultPublicKey", new object[] {
                    DomainID}, this.GetDefaultPublicKeyOperationCompleted, userState);
    }
    
    private void OnGetDefaultPublicKeyCompleted(object arg) {
        if ((this.GetDefaultPublicKeyCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetDefaultPublicKeyCompleted(this, new GetDefaultPublicKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Get the Default RSA key
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/GetDefaultRSAFromServer", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public string GetDefaultRSAFromServer(string DomainID) {
        object[] results = this.Invoke("GetDefaultRSAFromServer", new object[] {
                    DomainID});
        return ((string)(results[0]));
    }
    
    public System.IAsyncResult BeginGetDefaultRSAFromServer(string DomainID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetDefaultRSAFromServer", new object[] {
                    DomainID}, callback, asyncState);
    }
    
    public string EndGetDefaultRSAFromServer(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    public void GetDefaultRSAFromServerAsync(string DomainID) {
        this.GetDefaultRSAFromServerAsync(DomainID, null);
    }
    
    public void GetDefaultRSAFromServerAsync(string DomainID, object userState) {
        if ((this.GetDefaultRSAFromServerOperationCompleted == null)) {
            this.GetDefaultRSAFromServerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDefaultRSAFromServerCompleted);
        }
        this.InvokeAsync("GetDefaultRSAFromServer", new object[] {
                    DomainID}, this.GetDefaultRSAFromServerOperationCompleted, userState);
    }
    
    private void OnGetDefaultRSAFromServerCompleted(object arg) {
        if ((this.GetDefaultRSAFromServerCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetDefaultRSAFromServerCompleted(this, new GetDefaultRSAFromServerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Get the Default RSA key
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/GetDefaultRSAKey", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public string GetDefaultRSAKey(string DomainID) {
        object[] results = this.Invoke("GetDefaultRSAKey", new object[] {
                    DomainID});
        return ((string)(results[0]));
    }
    
    public System.IAsyncResult BeginGetDefaultRSAKey(string DomainID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetDefaultRSAKey", new object[] {
                    DomainID}, callback, asyncState);
    }
    
    public string EndGetDefaultRSAKey(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    public void GetDefaultRSAKeyAsync(string DomainID) {
        this.GetDefaultRSAKeyAsync(DomainID, null);
    }
    
    public void GetDefaultRSAKeyAsync(string DomainID, object userState) {
        if ((this.GetDefaultRSAKeyOperationCompleted == null)) {
            this.GetDefaultRSAKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDefaultRSAKeyCompleted);
        }
        this.InvokeAsync("GetDefaultRSAKey", new object[] {
                    DomainID}, this.GetDefaultRSAKeyOperationCompleted, userState);
    }
    
    private void OnGetDefaultRSAKeyCompleted(object arg) {
        if ((this.GetDefaultRSAKeyCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetDefaultRSAKeyCompleted(this, new GetDefaultRSAKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Store the certificate for the Domain.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/StoreRACertificate", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void StoreRACertificate(byte[] certificate, string rAgent) {
        this.Invoke("StoreRACertificate", new object[] {
                    certificate,
                    rAgent});
    }
    
    public System.IAsyncResult BeginStoreRACertificate(byte[] certificate, string rAgent, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("StoreRACertificate", new object[] {
                    certificate,
                    rAgent}, callback, asyncState);
    }
    
    public void EndStoreRACertificate(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    public void StoreRACertificateAsync(byte[] certificate, string rAgent) {
        this.StoreRACertificateAsync(certificate, rAgent, null);
    }
    
    public void StoreRACertificateAsync(byte[] certificate, string rAgent, object userState) {
        if ((this.StoreRACertificateOperationCompleted == null)) {
            this.StoreRACertificateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStoreRACertificateCompleted);
        }
        this.InvokeAsync("StoreRACertificate", new object[] {
                    certificate,
                    rAgent}, this.StoreRACertificateOperationCompleted, userState);
    }
    
    private void OnStoreRACertificateCompleted(object arg) {
        if ((this.StoreRACertificateCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.StoreRACertificateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Returns the characters which cannot be used for filenames in the Simias namespace (files and folders that contain any of these characters cannot be synchronized with iFolder and conflicts will be generated).
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/GetInvalidSyncFilenameChars", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public string GetInvalidSyncFilenameChars() {
        object[] results = this.Invoke("GetInvalidSyncFilenameChars", new object[0]);
        return ((string)(results[0]));
    }
    
    public System.IAsyncResult BeginGetInvalidSyncFilenameChars(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetInvalidSyncFilenameChars", new object[0], callback, asyncState);
    }
    
    public string EndGetInvalidSyncFilenameChars(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    public void GetInvalidSyncFilenameCharsAsync() {
        this.GetInvalidSyncFilenameCharsAsync(null);
    }
    
    public void GetInvalidSyncFilenameCharsAsync(object userState) {
        if ((this.GetInvalidSyncFilenameCharsOperationCompleted == null)) {
            this.GetInvalidSyncFilenameCharsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetInvalidSyncFilenameCharsCompleted);
        }
        this.InvokeAsync("GetInvalidSyncFilenameChars", new object[0], this.GetInvalidSyncFilenameCharsOperationCompleted, userState);
    }
    
    private void OnGetInvalidSyncFilenameCharsCompleted(object arg) {
        if ((this.GetInvalidSyncFilenameCharsCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetInvalidSyncFilenameCharsCompleted(this, new GetInvalidSyncFilenameCharsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Sets a new server network address for a client.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/SetDomainHostAddress", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public bool SetDomainHostAddress(string domainID, string hostAddress, string user, string password) {
        object[] results = this.Invoke("SetDomainHostAddress", new object[] {
                    domainID,
                    hostAddress,
                    user,
                    password});
        return ((bool)(results[0]));
    }
    
    public System.IAsyncResult BeginSetDomainHostAddress(string domainID, string hostAddress, string user, string password, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetDomainHostAddress", new object[] {
                    domainID,
                    hostAddress,
                    user,
                    password}, callback, asyncState);
    }
    
    public bool EndSetDomainHostAddress(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    public void SetDomainHostAddressAsync(string domainID, string hostAddress, string user, string password) {
        this.SetDomainHostAddressAsync(domainID, hostAddress, user, password, null);
    }
    
    public void SetDomainHostAddressAsync(string domainID, string hostAddress, string user, string password, object userState) {
        if ((this.SetDomainHostAddressOperationCompleted == null)) {
            this.SetDomainHostAddressOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetDomainHostAddressCompleted);
        }
        this.InvokeAsync("SetDomainHostAddress", new object[] {
                    domainID,
                    hostAddress,
                    user,
                    password}, this.SetDomainHostAddressOperationCompleted, userState);
    }
    
    private void OnSetDomainHostAddressCompleted(object arg) {
        if ((this.SetDomainHostAddressCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SetDomainHostAddressCompleted(this, new SetDomainHostAddressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Sets a new proxy address for the specified host.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/SetProxyAddress", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public bool SetProxyAddress(string hostUri, string proxyUri, string proxyUser, string proxyPassword) {
        object[] results = this.Invoke("SetProxyAddress", new object[] {
                    hostUri,
                    proxyUri,
                    proxyUser,
                    proxyPassword});
        return ((bool)(results[0]));
    }
    
    public System.IAsyncResult BeginSetProxyAddress(string hostUri, string proxyUri, string proxyUser, string proxyPassword, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetProxyAddress", new object[] {
                    hostUri,
                    proxyUri,
                    proxyUser,
                    proxyPassword}, callback, asyncState);
    }
    
    public bool EndSetProxyAddress(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    public void SetProxyAddressAsync(string hostUri, string proxyUri, string proxyUser, string proxyPassword) {
        this.SetProxyAddressAsync(hostUri, proxyUri, proxyUser, proxyPassword, null);
    }
    
    public void SetProxyAddressAsync(string hostUri, string proxyUri, string proxyUser, string proxyPassword, object userState) {
        if ((this.SetProxyAddressOperationCompleted == null)) {
            this.SetProxyAddressOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetProxyAddressCompleted);
        }
        this.InvokeAsync("SetProxyAddress", new object[] {
                    hostUri,
                    proxyUri,
                    proxyUser,
                    proxyPassword}, this.SetProxyAddressOperationCompleted, userState);
    }
    
    private void OnSetProxyAddressCompleted(object arg) {
        if ((this.SetProxyAddressCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SetProxyAddressCompleted(this, new SetProxyAddressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Checks to see if this instance of Simias is shareable.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/CanShareService", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public bool CanShareService(string simiasDataPath, bool isClient) {
        object[] results = this.Invoke("CanShareService", new object[] {
                    simiasDataPath,
                    isClient});
        return ((bool)(results[0]));
    }
    
    public System.IAsyncResult BeginCanShareService(string simiasDataPath, bool isClient, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CanShareService", new object[] {
                    simiasDataPath,
                    isClient}, callback, asyncState);
    }
    
    public bool EndCanShareService(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    public void CanShareServiceAsync(string simiasDataPath, bool isClient) {
        this.CanShareServiceAsync(simiasDataPath, isClient, null);
    }
    
    public void CanShareServiceAsync(string simiasDataPath, bool isClient, object userState) {
        if ((this.CanShareServiceOperationCompleted == null)) {
            this.CanShareServiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCanShareServiceCompleted);
        }
        this.InvokeAsync("CanShareService", new object[] {
                    simiasDataPath,
                    isClient}, this.CanShareServiceOperationCompleted, userState);
    }
    
    private void OnCanShareServiceCompleted(object arg) {
        if ((this.CanShareServiceCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.CanShareServiceCompleted(this, new CanShareServiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Shuts down the controlling server process.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/StopSimiasProcess", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void StopSimiasProcess() {
        this.Invoke("StopSimiasProcess", new object[0]);
    }
    
    public System.IAsyncResult BeginStopSimiasProcess(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("StopSimiasProcess", new object[0], callback, asyncState);
    }
    
    public void EndStopSimiasProcess(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    public void StopSimiasProcessAsync() {
        this.StopSimiasProcessAsync(null);
    }
    
    public void StopSimiasProcessAsync(object userState) {
        if ((this.StopSimiasProcessOperationCompleted == null)) {
            this.StopSimiasProcessOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStopSimiasProcessCompleted);
        }
        this.InvokeAsync("StopSimiasProcess", new object[0], this.StopSimiasProcessOperationCompleted, userState);
    }
    
    private void OnStopSimiasProcessCompleted(object arg) {
        if ((this.StopSimiasProcessCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.StopSimiasProcessCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Increments the reference count that keeps Simias services running.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/AddSimiasReference", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public int AddSimiasReference() {
        object[] results = this.Invoke("AddSimiasReference", new object[0]);
        return ((int)(results[0]));
    }
    
    public System.IAsyncResult BeginAddSimiasReference(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("AddSimiasReference", new object[0], callback, asyncState);
    }
    
    public int EndAddSimiasReference(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((int)(results[0]));
    }
    
    public void AddSimiasReferenceAsync() {
        this.AddSimiasReferenceAsync(null);
    }
    
    public void AddSimiasReferenceAsync(object userState) {
        if ((this.AddSimiasReferenceOperationCompleted == null)) {
            this.AddSimiasReferenceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddSimiasReferenceCompleted);
        }
        this.InvokeAsync("AddSimiasReference", new object[0], this.AddSimiasReferenceOperationCompleted, userState);
    }
    
    private void OnAddSimiasReferenceCompleted(object arg) {
        if ((this.AddSimiasReferenceCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.AddSimiasReferenceCompleted(this, new AddSimiasReferenceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Decrements the Simias service reference count and signals the server to stop if the count goes to zero.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/RemoveSimiasReference", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public int RemoveSimiasReference() {
        object[] results = this.Invoke("RemoveSimiasReference", new object[0]);
        return ((int)(results[0]));
    }
    
    public System.IAsyncResult BeginRemoveSimiasReference(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("RemoveSimiasReference", new object[0], callback, asyncState);
    }
    
    public int EndRemoveSimiasReference(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((int)(results[0]));
    }
    
    public void RemoveSimiasReferenceAsync() {
        this.RemoveSimiasReferenceAsync(null);
    }
    
    public void RemoveSimiasReferenceAsync(object userState) {
        if ((this.RemoveSimiasReferenceOperationCompleted == null)) {
            this.RemoveSimiasReferenceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveSimiasReferenceCompleted);
        }
        this.InvokeAsync("RemoveSimiasReference", new object[0], this.RemoveSimiasReferenceOperationCompleted, userState);
    }
    
    private void OnRemoveSimiasReferenceCompleted(object arg) {
        if ((this.RemoveSimiasReferenceCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.RemoveSimiasReferenceCompleted(this, new RemoveSimiasReferenceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Set the passphrase and recovery agent.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/ServerSetDefaultAccount", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public bool ServerSetDefaultAccount(string DomainID, string UserID, string iFolderID) {
        object[] results = this.Invoke("ServerSetDefaultAccount", new object[] {
                    DomainID,
                    UserID,
                    iFolderID});
        return ((bool)(results[0]));
    }
    
    public System.IAsyncResult BeginServerSetDefaultAccount(string DomainID, string UserID, string iFolderID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ServerSetDefaultAccount", new object[] {
                    DomainID,
                    UserID,
                    iFolderID}, callback, asyncState);
    }
    
    public bool EndServerSetDefaultAccount(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    public void ServerSetDefaultAccountAsync(string DomainID, string UserID, string iFolderID) {
        this.ServerSetDefaultAccountAsync(DomainID, UserID, iFolderID, null);
    }
    
    public void ServerSetDefaultAccountAsync(string DomainID, string UserID, string iFolderID, object userState) {
        if ((this.ServerSetDefaultAccountOperationCompleted == null)) {
            this.ServerSetDefaultAccountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnServerSetDefaultAccountCompleted);
        }
        this.InvokeAsync("ServerSetDefaultAccount", new object[] {
                    DomainID,
                    UserID,
                    iFolderID}, this.ServerSetDefaultAccountOperationCompleted, userState);
    }
    
    private void OnServerSetDefaultAccountCompleted(object arg) {
        if ((this.ServerSetDefaultAccountCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.ServerSetDefaultAccountCompleted(this, new ServerSetDefaultAccountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Set the passphrase and recovery agent.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/ServerGetDefaultiFolder", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public string ServerGetDefaultiFolder(string DomainID, string UserID) {
        object[] results = this.Invoke("ServerGetDefaultiFolder", new object[] {
                    DomainID,
                    UserID});
        return ((string)(results[0]));
    }
    
    public System.IAsyncResult BeginServerGetDefaultiFolder(string DomainID, string UserID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ServerGetDefaultiFolder", new object[] {
                    DomainID,
                    UserID}, callback, asyncState);
    }
    
    public string EndServerGetDefaultiFolder(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    public void ServerGetDefaultiFolderAsync(string DomainID, string UserID) {
        this.ServerGetDefaultiFolderAsync(DomainID, UserID, null);
    }
    
    public void ServerGetDefaultiFolderAsync(string DomainID, string UserID, object userState) {
        if ((this.ServerGetDefaultiFolderOperationCompleted == null)) {
            this.ServerGetDefaultiFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnServerGetDefaultiFolderCompleted);
        }
        this.InvokeAsync("ServerGetDefaultiFolder", new object[] {
                    DomainID,
                    UserID}, this.ServerGetDefaultiFolderOperationCompleted, userState);
    }
    
    private void OnServerGetDefaultiFolderCompleted(object arg) {
        if ((this.ServerGetDefaultiFolderCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.ServerGetDefaultiFolderCompleted(this, new ServerGetDefaultiFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///gets the GroupsiFolderLimitPolicy for users group.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/GetGroupsiFolderLimitPolicy", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public int GetGroupsiFolderLimitPolicy(string DomainID, string UserID) {
        object[] results = this.Invoke("GetGroupsiFolderLimitPolicy", new object[] {
                    DomainID,
                    UserID});
        return ((int)(results[0]));
    }
    
    public System.IAsyncResult BeginGetGroupsiFolderLimitPolicy(string DomainID, string UserID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetGroupsiFolderLimitPolicy", new object[] {
                    DomainID,
                    UserID}, callback, asyncState);
    }
    
    public int EndGetGroupsiFolderLimitPolicy(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((int)(results[0]));
    }
    
    public void GetGroupsiFolderLimitPolicyAsync(string DomainID, string UserID) {
        this.GetGroupsiFolderLimitPolicyAsync(DomainID, UserID, null);
    }
    
    public void GetGroupsiFolderLimitPolicyAsync(string DomainID, string UserID, object userState) {
        if ((this.GetGroupsiFolderLimitPolicyOperationCompleted == null)) {
            this.GetGroupsiFolderLimitPolicyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetGroupsiFolderLimitPolicyCompleted);
        }
        this.InvokeAsync("GetGroupsiFolderLimitPolicy", new object[] {
                    DomainID,
                    UserID}, this.GetGroupsiFolderLimitPolicyOperationCompleted, userState);
    }
    
    private void OnGetGroupsiFolderLimitPolicyCompleted(object arg) {
        if ((this.GetGroupsiFolderLimitPolicyCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetGroupsiFolderLimitPolicyCompleted(this, new GetGroupsiFolderLimitPolicyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///gets the UseriFolderLimitPolicy for users - transfer of Ownership.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/IsTransferAllowed", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public bool IsTransferAllowed(string DomainID, string UserID) {
        object[] results = this.Invoke("IsTransferAllowed", new object[] {
                    DomainID,
                    UserID});
        return ((bool)(results[0]));
    }
    
    public System.IAsyncResult BeginIsTransferAllowed(string DomainID, string UserID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("IsTransferAllowed", new object[] {
                    DomainID,
                    UserID}, callback, asyncState);
    }
    
    public bool EndIsTransferAllowed(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    public void IsTransferAllowedAsync(string DomainID, string UserID) {
        this.IsTransferAllowedAsync(DomainID, UserID, null);
    }
    
    public void IsTransferAllowedAsync(string DomainID, string UserID, object userState) {
        if ((this.IsTransferAllowedOperationCompleted == null)) {
            this.IsTransferAllowedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsTransferAllowedCompleted);
        }
        this.InvokeAsync("IsTransferAllowed", new object[] {
                    DomainID,
                    UserID}, this.IsTransferAllowedOperationCompleted, userState);
    }
    
    private void OnIsTransferAllowedCompleted(object arg) {
        if ((this.IsTransferAllowedCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.IsTransferAllowedCompleted(this, new IsTransferAllowedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///gets the GroupsiFolderLimitPolicy for users group.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/GetGroupsSharingPolicy", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public int GetGroupsSharingPolicy(string DomainID, string UserID) {
        object[] results = this.Invoke("GetGroupsSharingPolicy", new object[] {
                    DomainID,
                    UserID});
        return ((int)(results[0]));
    }
    
    public System.IAsyncResult BeginGetGroupsSharingPolicy(string DomainID, string UserID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetGroupsSharingPolicy", new object[] {
                    DomainID,
                    UserID}, callback, asyncState);
    }
    
    public int EndGetGroupsSharingPolicy(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((int)(results[0]));
    }
    
    public void GetGroupsSharingPolicyAsync(string DomainID, string UserID) {
        this.GetGroupsSharingPolicyAsync(DomainID, UserID, null);
    }
    
    public void GetGroupsSharingPolicyAsync(string DomainID, string UserID, object userState) {
        if ((this.GetGroupsSharingPolicyOperationCompleted == null)) {
            this.GetGroupsSharingPolicyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetGroupsSharingPolicyCompleted);
        }
        this.InvokeAsync("GetGroupsSharingPolicy", new object[] {
                    DomainID,
                    UserID}, this.GetGroupsSharingPolicyOperationCompleted, userState);
    }
    
    private void OnGetGroupsSharingPolicyCompleted(object arg) {
        if ((this.GetGroupsSharingPolicyCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetGroupsSharingPolicyCompleted(this, new GetGroupsSharingPolicyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///gets the GroupsSecurityPolicy for users group.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/GetGroupsSecurityPolicy", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public int GetGroupsSecurityPolicy(string DomainID, string UserID) {
        object[] results = this.Invoke("GetGroupsSecurityPolicy", new object[] {
                    DomainID,
                    UserID});
        return ((int)(results[0]));
    }
    
    public System.IAsyncResult BeginGetGroupsSecurityPolicy(string DomainID, string UserID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetGroupsSecurityPolicy", new object[] {
                    DomainID,
                    UserID}, callback, asyncState);
    }
    
    public int EndGetGroupsSecurityPolicy(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((int)(results[0]));
    }
    
    public void GetGroupsSecurityPolicyAsync(string DomainID, string UserID) {
        this.GetGroupsSecurityPolicyAsync(DomainID, UserID, null);
    }
    
    public void GetGroupsSecurityPolicyAsync(string DomainID, string UserID, object userState) {
        if ((this.GetGroupsSecurityPolicyOperationCompleted == null)) {
            this.GetGroupsSecurityPolicyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetGroupsSecurityPolicyCompleted);
        }
        this.InvokeAsync("GetGroupsSecurityPolicy", new object[] {
                    DomainID,
                    UserID}, this.GetGroupsSecurityPolicyOperationCompleted, userState);
    }
    
    private void OnGetGroupsSecurityPolicyCompleted(object arg) {
        if ((this.GetGroupsSecurityPolicyCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetGroupsSecurityPolicyCompleted(this, new GetGroupsSecurityPolicyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///gets the GroupsSecurityPolicy for users group.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/GetEffectiveSyncPolicy", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public int GetEffectiveSyncPolicy(string DomainID, string UserID, string CollectionID) {
        object[] results = this.Invoke("GetEffectiveSyncPolicy", new object[] {
                    DomainID,
                    UserID,
                    CollectionID});
        return ((int)(results[0]));
    }
    
    public System.IAsyncResult BeginGetEffectiveSyncPolicy(string DomainID, string UserID, string CollectionID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetEffectiveSyncPolicy", new object[] {
                    DomainID,
                    UserID,
                    CollectionID}, callback, asyncState);
    }
    
    public int EndGetEffectiveSyncPolicy(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((int)(results[0]));
    }
    
    public void GetEffectiveSyncPolicyAsync(string DomainID, string UserID, string CollectionID) {
        this.GetEffectiveSyncPolicyAsync(DomainID, UserID, CollectionID, null);
    }
    
    public void GetEffectiveSyncPolicyAsync(string DomainID, string UserID, string CollectionID, object userState) {
        if ((this.GetEffectiveSyncPolicyOperationCompleted == null)) {
            this.GetEffectiveSyncPolicyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEffectiveSyncPolicyCompleted);
        }
        this.InvokeAsync("GetEffectiveSyncPolicy", new object[] {
                    DomainID,
                    UserID,
                    CollectionID}, this.GetEffectiveSyncPolicyOperationCompleted, userState);
    }
    
    private void OnGetEffectiveSyncPolicyCompleted(object arg) {
        if ((this.GetEffectiveSyncPolicyCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetEffectiveSyncPolicyCompleted(this, new GetEffectiveSyncPolicyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Set the passphrase and recovery agent.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/ServerSetPassPhrase", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public Status ServerSetPassPhrase(string DomainID, string UserID, string EncryptedCryptoKey, string CryptoKeyBlob, string RAName, string RAPublicKey) {
        object[] results = this.Invoke("ServerSetPassPhrase", new object[] {
                    DomainID,
                    UserID,
                    EncryptedCryptoKey,
                    CryptoKeyBlob,
                    RAName,
                    RAPublicKey});
        return ((Status)(results[0]));
    }
    
    public System.IAsyncResult BeginServerSetPassPhrase(string DomainID, string UserID, string EncryptedCryptoKey, string CryptoKeyBlob, string RAName, string RAPublicKey, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ServerSetPassPhrase", new object[] {
                    DomainID,
                    UserID,
                    EncryptedCryptoKey,
                    CryptoKeyBlob,
                    RAName,
                    RAPublicKey}, callback, asyncState);
    }
    
    public Status EndServerSetPassPhrase(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((Status)(results[0]));
    }
    
    public void ServerSetPassPhraseAsync(string DomainID, string UserID, string EncryptedCryptoKey, string CryptoKeyBlob, string RAName, string RAPublicKey) {
        this.ServerSetPassPhraseAsync(DomainID, UserID, EncryptedCryptoKey, CryptoKeyBlob, RAName, RAPublicKey, null);
    }
    
    public void ServerSetPassPhraseAsync(string DomainID, string UserID, string EncryptedCryptoKey, string CryptoKeyBlob, string RAName, string RAPublicKey, object userState) {
        if ((this.ServerSetPassPhraseOperationCompleted == null)) {
            this.ServerSetPassPhraseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnServerSetPassPhraseCompleted);
        }
        this.InvokeAsync("ServerSetPassPhrase", new object[] {
                    DomainID,
                    UserID,
                    EncryptedCryptoKey,
                    CryptoKeyBlob,
                    RAName,
                    RAPublicKey}, this.ServerSetPassPhraseOperationCompleted, userState);
    }
    
    private void OnServerSetPassPhraseCompleted(object arg) {
        if ((this.ServerSetPassPhraseCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.ServerSetPassPhraseCompleted(this, new ServerSetPassPhraseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///ServerGetEncrypPassKey.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/ServerGetEncrypPassKey", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public string ServerGetEncrypPassKey(string DomainID, string UserID) {
        object[] results = this.Invoke("ServerGetEncrypPassKey", new object[] {
                    DomainID,
                    UserID});
        return ((string)(results[0]));
    }
    
    public System.IAsyncResult BeginServerGetEncrypPassKey(string DomainID, string UserID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ServerGetEncrypPassKey", new object[] {
                    DomainID,
                    UserID}, callback, asyncState);
    }
    
    public string EndServerGetEncrypPassKey(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    public void ServerGetEncrypPassKeyAsync(string DomainID, string UserID) {
        this.ServerGetEncrypPassKeyAsync(DomainID, UserID, null);
    }
    
    public void ServerGetEncrypPassKeyAsync(string DomainID, string UserID, object userState) {
        if ((this.ServerGetEncrypPassKeyOperationCompleted == null)) {
            this.ServerGetEncrypPassKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnServerGetEncrypPassKeyCompleted);
        }
        this.InvokeAsync("ServerGetEncrypPassKey", new object[] {
                    DomainID,
                    UserID}, this.ServerGetEncrypPassKeyOperationCompleted, userState);
    }
    
    private void OnServerGetEncrypPassKeyCompleted(object arg) {
        if ((this.ServerGetEncrypPassKeyCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.ServerGetEncrypPassKeyCompleted(this, new ServerGetEncrypPassKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///ServerGetPassKeyHash.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/ServerGetPassKeyHash", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public string ServerGetPassKeyHash(string DomainID, string UserID) {
        object[] results = this.Invoke("ServerGetPassKeyHash", new object[] {
                    DomainID,
                    UserID});
        return ((string)(results[0]));
    }
    
    public System.IAsyncResult BeginServerGetPassKeyHash(string DomainID, string UserID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ServerGetPassKeyHash", new object[] {
                    DomainID,
                    UserID}, callback, asyncState);
    }
    
    public string EndServerGetPassKeyHash(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    public void ServerGetPassKeyHashAsync(string DomainID, string UserID) {
        this.ServerGetPassKeyHashAsync(DomainID, UserID, null);
    }
    
    public void ServerGetPassKeyHashAsync(string DomainID, string UserID, object userState) {
        if ((this.ServerGetPassKeyHashOperationCompleted == null)) {
            this.ServerGetPassKeyHashOperationCompleted = new System.Threading.SendOrPostCallback(this.OnServerGetPassKeyHashCompleted);
        }
        this.InvokeAsync("ServerGetPassKeyHash", new object[] {
                    DomainID,
                    UserID}, this.ServerGetPassKeyHashOperationCompleted, userState);
    }
    
    private void OnServerGetPassKeyHashCompleted(object arg) {
        if ((this.ServerGetPassKeyHashCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.ServerGetPassKeyHashCompleted(this, new ServerGetPassKeyHashCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Updates the user move state property
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/UpdateUserMoveState", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public bool UpdateUserMoveState(string DomainID, string UserID, int userMoveStatus) {
        object[] results = this.Invoke("UpdateUserMoveState", new object[] {
                    DomainID,
                    UserID,
                    userMoveStatus});
        return ((bool)(results[0]));
    }
    
    public System.IAsyncResult BeginUpdateUserMoveState(string DomainID, string UserID, int userMoveStatus, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("UpdateUserMoveState", new object[] {
                    DomainID,
                    UserID,
                    userMoveStatus}, callback, asyncState);
    }
    
    public bool EndUpdateUserMoveState(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    public void UpdateUserMoveStateAsync(string DomainID, string UserID, int userMoveStatus) {
        this.UpdateUserMoveStateAsync(DomainID, UserID, userMoveStatus, null);
    }
    
    public void UpdateUserMoveStateAsync(string DomainID, string UserID, int userMoveStatus, object userState) {
        if ((this.UpdateUserMoveStateOperationCompleted == null)) {
            this.UpdateUserMoveStateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateUserMoveStateCompleted);
        }
        this.InvokeAsync("UpdateUserMoveState", new object[] {
                    DomainID,
                    UserID,
                    userMoveStatus}, this.UpdateUserMoveStateOperationCompleted, userState);
    }
    
    private void OnUpdateUserMoveStateCompleted(object arg) {
        if ((this.UpdateUserMoveStateCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.UpdateUserMoveStateCompleted(this, new UpdateUserMoveStateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Update users HomeServer Object
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/UpdateHomeServer", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public bool UpdateHomeServer(string DomainID, string UserID, string newHostID) {
        object[] results = this.Invoke("UpdateHomeServer", new object[] {
                    DomainID,
                    UserID,
                    newHostID});
        return ((bool)(results[0]));
    }
    
    public System.IAsyncResult BeginUpdateHomeServer(string DomainID, string UserID, string newHostID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("UpdateHomeServer", new object[] {
                    DomainID,
                    UserID,
                    newHostID}, callback, asyncState);
    }
    
    public bool EndUpdateHomeServer(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    public void UpdateHomeServerAsync(string DomainID, string UserID, string newHostID) {
        this.UpdateHomeServerAsync(DomainID, UserID, newHostID, null);
    }
    
    public void UpdateHomeServerAsync(string DomainID, string UserID, string newHostID, object userState) {
        if ((this.UpdateHomeServerOperationCompleted == null)) {
            this.UpdateHomeServerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateHomeServerCompleted);
        }
        this.InvokeAsync("UpdateHomeServer", new object[] {
                    DomainID,
                    UserID,
                    newHostID}, this.UpdateHomeServerOperationCompleted, userState);
    }
    
    private void OnUpdateHomeServerCompleted(object arg) {
        if ((this.UpdateHomeServerCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.UpdateHomeServerCompleted(this, new UpdateHomeServerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Returns the characters which cannot be used for filenames in the Simias namespace (files and folders that contain any of these characters cannot be synchronized with iFolder and conflicts will be generated).
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/DownloadiFolder", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public bool DownloadiFolder(string iFolderID, string name, string DomainID, string HostID, string DirNodeID, string MemberNodeID, string colMemberNodeID, string localPath) {
        object[] results = this.Invoke("DownloadiFolder", new object[] {
                    iFolderID,
                    name,
                    DomainID,
                    HostID,
                    DirNodeID,
                    MemberNodeID,
                    colMemberNodeID,
                    localPath});
        return ((bool)(results[0]));
    }
    
    public System.IAsyncResult BeginDownloadiFolder(string iFolderID, string name, string DomainID, string HostID, string DirNodeID, string MemberNodeID, string colMemberNodeID, string localPath, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("DownloadiFolder", new object[] {
                    iFolderID,
                    name,
                    DomainID,
                    HostID,
                    DirNodeID,
                    MemberNodeID,
                    colMemberNodeID,
                    localPath}, callback, asyncState);
    }
    
    public bool EndDownloadiFolder(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    public void DownloadiFolderAsync(string iFolderID, string name, string DomainID, string HostID, string DirNodeID, string MemberNodeID, string colMemberNodeID, string localPath) {
        this.DownloadiFolderAsync(iFolderID, name, DomainID, HostID, DirNodeID, MemberNodeID, colMemberNodeID, localPath, null);
    }
    
    public void DownloadiFolderAsync(string iFolderID, string name, string DomainID, string HostID, string DirNodeID, string MemberNodeID, string colMemberNodeID, string localPath, object userState) {
        if ((this.DownloadiFolderOperationCompleted == null)) {
            this.DownloadiFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDownloadiFolderCompleted);
        }
        this.InvokeAsync("DownloadiFolder", new object[] {
                    iFolderID,
                    name,
                    DomainID,
                    HostID,
                    DirNodeID,
                    MemberNodeID,
                    colMemberNodeID,
                    localPath}, this.DownloadiFolderOperationCompleted, userState);
    }
    
    private void OnDownloadiFolderCompleted(object arg) {
        if ((this.DownloadiFolderCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.DownloadiFolderCompleted(this, new DownloadiFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Updates the encryption related local properties.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/UpdateLocalProperties", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public bool UpdateLocalProperties(string DomainID, string UserID, string EncryptionKey, string EncryptionVersion, string EncryptionBlob, string RAName, string RAPublicKey) {
        object[] results = this.Invoke("UpdateLocalProperties", new object[] {
                    DomainID,
                    UserID,
                    EncryptionKey,
                    EncryptionVersion,
                    EncryptionBlob,
                    RAName,
                    RAPublicKey});
        return ((bool)(results[0]));
    }
    
    public System.IAsyncResult BeginUpdateLocalProperties(string DomainID, string UserID, string EncryptionKey, string EncryptionVersion, string EncryptionBlob, string RAName, string RAPublicKey, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("UpdateLocalProperties", new object[] {
                    DomainID,
                    UserID,
                    EncryptionKey,
                    EncryptionVersion,
                    EncryptionBlob,
                    RAName,
                    RAPublicKey}, callback, asyncState);
    }
    
    public bool EndUpdateLocalProperties(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    public void UpdateLocalPropertiesAsync(string DomainID, string UserID, string EncryptionKey, string EncryptionVersion, string EncryptionBlob, string RAName, string RAPublicKey) {
        this.UpdateLocalPropertiesAsync(DomainID, UserID, EncryptionKey, EncryptionVersion, EncryptionBlob, RAName, RAPublicKey, null);
    }
    
    public void UpdateLocalPropertiesAsync(string DomainID, string UserID, string EncryptionKey, string EncryptionVersion, string EncryptionBlob, string RAName, string RAPublicKey, object userState) {
        if ((this.UpdateLocalPropertiesOperationCompleted == null)) {
            this.UpdateLocalPropertiesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateLocalPropertiesCompleted);
        }
        this.InvokeAsync("UpdateLocalProperties", new object[] {
                    DomainID,
                    UserID,
                    EncryptionKey,
                    EncryptionVersion,
                    EncryptionBlob,
                    RAName,
                    RAPublicKey}, this.UpdateLocalPropertiesOperationCompleted, userState);
    }
    
    private void OnUpdateLocalPropertiesCompleted(object arg) {
        if ((this.UpdateLocalPropertiesCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.UpdateLocalPropertiesCompleted(this, new UpdateLocalPropertiesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Disable user object and set user move property
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/DisableUser", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public bool DisableUser(string DomainID, string UserID, string newHostID) {
        object[] results = this.Invoke("DisableUser", new object[] {
                    DomainID,
                    UserID,
                    newHostID});
        return ((bool)(results[0]));
    }
    
    public System.IAsyncResult BeginDisableUser(string DomainID, string UserID, string newHostID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("DisableUser", new object[] {
                    DomainID,
                    UserID,
                    newHostID}, callback, asyncState);
    }
    
    public bool EndDisableUser(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    public void DisableUserAsync(string DomainID, string UserID, string newHostID) {
        this.DisableUserAsync(DomainID, UserID, newHostID, null);
    }
    
    public void DisableUserAsync(string DomainID, string UserID, string newHostID, object userState) {
        if ((this.DisableUserOperationCompleted == null)) {
            this.DisableUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDisableUserCompleted);
        }
        this.InvokeAsync("DisableUser", new object[] {
                    DomainID,
                    UserID,
                    newHostID}, this.DisableUserOperationCompleted, userState);
    }
    
    private void OnDisableUserCompleted(object arg) {
        if ((this.DisableUserCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.DisableUserCompleted(this, new DisableUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///SetOnMasterEncryptionBlobFlag
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/SetOnMasterEncryptionBlobFlag", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void SetOnMasterEncryptionBlobFlag(string DomainID, string UserID) {
        this.Invoke("SetOnMasterEncryptionBlobFlag", new object[] {
                    DomainID,
                    UserID});
    }
    
    public System.IAsyncResult BeginSetOnMasterEncryptionBlobFlag(string DomainID, string UserID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetOnMasterEncryptionBlobFlag", new object[] {
                    DomainID,
                    UserID}, callback, asyncState);
    }
    
    public void EndSetOnMasterEncryptionBlobFlag(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    public void SetOnMasterEncryptionBlobFlagAsync(string DomainID, string UserID) {
        this.SetOnMasterEncryptionBlobFlagAsync(DomainID, UserID, null);
    }
    
    public void SetOnMasterEncryptionBlobFlagAsync(string DomainID, string UserID, object userState) {
        if ((this.SetOnMasterEncryptionBlobFlagOperationCompleted == null)) {
            this.SetOnMasterEncryptionBlobFlagOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetOnMasterEncryptionBlobFlagCompleted);
        }
        this.InvokeAsync("SetOnMasterEncryptionBlobFlag", new object[] {
                    DomainID,
                    UserID}, this.SetOnMasterEncryptionBlobFlagOperationCompleted, userState);
    }
    
    private void OnSetOnMasterEncryptionBlobFlagCompleted(object arg) {
        if ((this.SetOnMasterEncryptionBlobFlagCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SetOnMasterEncryptionBlobFlagCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///CommitDomainMember
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/CommitDomainMember", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public bool CommitDomainMember(string DomainID, System.Xml.XmlNode ModifiedMemberXML) {
        object[] results = this.Invoke("CommitDomainMember", new object[] {
                    DomainID,
                    ModifiedMemberXML});
        return ((bool)(results[0]));
    }
    
    public System.IAsyncResult BeginCommitDomainMember(string DomainID, System.Xml.XmlNode ModifiedMemberXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CommitDomainMember", new object[] {
                    DomainID,
                    ModifiedMemberXML}, callback, asyncState);
    }
    
    public bool EndCommitDomainMember(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    public void CommitDomainMemberAsync(string DomainID, System.Xml.XmlNode ModifiedMemberXML) {
        this.CommitDomainMemberAsync(DomainID, ModifiedMemberXML, null);
    }
    
    public void CommitDomainMemberAsync(string DomainID, System.Xml.XmlNode ModifiedMemberXML, object userState) {
        if ((this.CommitDomainMemberOperationCompleted == null)) {
            this.CommitDomainMemberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCommitDomainMemberCompleted);
        }
        this.InvokeAsync("CommitDomainMember", new object[] {
                    DomainID,
                    ModifiedMemberXML}, this.CommitDomainMemberOperationCompleted, userState);
    }
    
    private void OnCommitDomainMemberCompleted(object arg) {
        if ((this.CommitDomainMemberCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.CommitDomainMemberCompleted(this, new CommitDomainMemberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///GetCollectionHashKey.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/ServerGetCollectionHashKey", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public string ServerGetCollectionHashKey(string CollectionID) {
        object[] results = this.Invoke("ServerGetCollectionHashKey", new object[] {
                    CollectionID});
        return ((string)(results[0]));
    }
    
    public System.IAsyncResult BeginServerGetCollectionHashKey(string CollectionID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ServerGetCollectionHashKey", new object[] {
                    CollectionID}, callback, asyncState);
    }
    
    public string EndServerGetCollectionHashKey(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    public void ServerGetCollectionHashKeyAsync(string CollectionID) {
        this.ServerGetCollectionHashKeyAsync(CollectionID, null);
    }
    
    public void ServerGetCollectionHashKeyAsync(string CollectionID, object userState) {
        if ((this.ServerGetCollectionHashKeyOperationCompleted == null)) {
            this.ServerGetCollectionHashKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnServerGetCollectionHashKeyCompleted);
        }
        this.InvokeAsync("ServerGetCollectionHashKey", new object[] {
                    CollectionID}, this.ServerGetCollectionHashKeyOperationCompleted, userState);
    }
    
    private void OnServerGetCollectionHashKeyCompleted(object arg) {
        if ((this.ServerGetCollectionHashKeyCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.ServerGetCollectionHashKeyCompleted(this, new ServerGetCollectionHashKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///GetiFolderCryptoKeys.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/GetiFolderCryptoKeys", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public CollectionKey GetiFolderCryptoKeys(string DomainID, string UserID, int Index) {
        object[] results = this.Invoke("GetiFolderCryptoKeys", new object[] {
                    DomainID,
                    UserID,
                    Index});
        return ((CollectionKey)(results[0]));
    }
    
    public System.IAsyncResult BeginGetiFolderCryptoKeys(string DomainID, string UserID, int Index, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetiFolderCryptoKeys", new object[] {
                    DomainID,
                    UserID,
                    Index}, callback, asyncState);
    }
    
    public CollectionKey EndGetiFolderCryptoKeys(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CollectionKey)(results[0]));
    }
    
    public void GetiFolderCryptoKeysAsync(string DomainID, string UserID, int Index) {
        this.GetiFolderCryptoKeysAsync(DomainID, UserID, Index, null);
    }
    
    public void GetiFolderCryptoKeysAsync(string DomainID, string UserID, int Index, object userState) {
        if ((this.GetiFolderCryptoKeysOperationCompleted == null)) {
            this.GetiFolderCryptoKeysOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetiFolderCryptoKeysCompleted);
        }
        this.InvokeAsync("GetiFolderCryptoKeys", new object[] {
                    DomainID,
                    UserID,
                    Index}, this.GetiFolderCryptoKeysOperationCompleted, userState);
    }
    
    private void OnGetiFolderCryptoKeysCompleted(object arg) {
        if ((this.GetiFolderCryptoKeysCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetiFolderCryptoKeysCompleted(this, new GetiFolderCryptoKeysCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///SetiFolderCryptoKeys.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/SetiFolderCryptoKeys", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public bool SetiFolderCryptoKeys(string DomainID, string UserID, CollectionKey CKey) {
        object[] results = this.Invoke("SetiFolderCryptoKeys", new object[] {
                    DomainID,
                    UserID,
                    CKey});
        return ((bool)(results[0]));
    }
    
    public System.IAsyncResult BeginSetiFolderCryptoKeys(string DomainID, string UserID, CollectionKey CKey, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetiFolderCryptoKeys", new object[] {
                    DomainID,
                    UserID,
                    CKey}, callback, asyncState);
    }
    
    public bool EndSetiFolderCryptoKeys(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    public void SetiFolderCryptoKeysAsync(string DomainID, string UserID, CollectionKey CKey) {
        this.SetiFolderCryptoKeysAsync(DomainID, UserID, CKey, null);
    }
    
    public void SetiFolderCryptoKeysAsync(string DomainID, string UserID, CollectionKey CKey, object userState) {
        if ((this.SetiFolderCryptoKeysOperationCompleted == null)) {
            this.SetiFolderCryptoKeysOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetiFolderCryptoKeysCompleted);
        }
        this.InvokeAsync("SetiFolderCryptoKeys", new object[] {
                    DomainID,
                    UserID,
                    CKey}, this.SetiFolderCryptoKeysOperationCompleted, userState);
    }
    
    private void OnSetiFolderCryptoKeysCompleted(object arg) {
        if ((this.SetiFolderCryptoKeysCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SetiFolderCryptoKeysCompleted(this, new SetiFolderCryptoKeysCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///ExportiFoldersCryptoKeys.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/ExportiFoldersCryptoKeys", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void ExportiFoldersCryptoKeys(string DomainID, string FilePath) {
        this.Invoke("ExportiFoldersCryptoKeys", new object[] {
                    DomainID,
                    FilePath});
    }
    
    public System.IAsyncResult BeginExportiFoldersCryptoKeys(string DomainID, string FilePath, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ExportiFoldersCryptoKeys", new object[] {
                    DomainID,
                    FilePath}, callback, asyncState);
    }
    
    public void EndExportiFoldersCryptoKeys(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    public void ExportiFoldersCryptoKeysAsync(string DomainID, string FilePath) {
        this.ExportiFoldersCryptoKeysAsync(DomainID, FilePath, null);
    }
    
    public void ExportiFoldersCryptoKeysAsync(string DomainID, string FilePath, object userState) {
        if ((this.ExportiFoldersCryptoKeysOperationCompleted == null)) {
            this.ExportiFoldersCryptoKeysOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExportiFoldersCryptoKeysCompleted);
        }
        this.InvokeAsync("ExportiFoldersCryptoKeys", new object[] {
                    DomainID,
                    FilePath}, this.ExportiFoldersCryptoKeysOperationCompleted, userState);
    }
    
    private void OnExportiFoldersCryptoKeysCompleted(object arg) {
        if ((this.ExportiFoldersCryptoKeysCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.ExportiFoldersCryptoKeysCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///ImportiFoldersCryptoKeys.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/ImportiFoldersCryptoKeys", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void ImportiFoldersCryptoKeys(string DomainID, string NewPassphrase, string OneTimePassphrase, string FilePath) {
        this.Invoke("ImportiFoldersCryptoKeys", new object[] {
                    DomainID,
                    NewPassphrase,
                    OneTimePassphrase,
                    FilePath});
    }
    
    public System.IAsyncResult BeginImportiFoldersCryptoKeys(string DomainID, string NewPassphrase, string OneTimePassphrase, string FilePath, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ImportiFoldersCryptoKeys", new object[] {
                    DomainID,
                    NewPassphrase,
                    OneTimePassphrase,
                    FilePath}, callback, asyncState);
    }
    
    public void EndImportiFoldersCryptoKeys(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    public void ImportiFoldersCryptoKeysAsync(string DomainID, string NewPassphrase, string OneTimePassphrase, string FilePath) {
        this.ImportiFoldersCryptoKeysAsync(DomainID, NewPassphrase, OneTimePassphrase, FilePath, null);
    }
    
    public void ImportiFoldersCryptoKeysAsync(string DomainID, string NewPassphrase, string OneTimePassphrase, string FilePath, object userState) {
        if ((this.ImportiFoldersCryptoKeysOperationCompleted == null)) {
            this.ImportiFoldersCryptoKeysOperationCompleted = new System.Threading.SendOrPostCallback(this.OnImportiFoldersCryptoKeysCompleted);
        }
        this.InvokeAsync("ImportiFoldersCryptoKeys", new object[] {
                    DomainID,
                    NewPassphrase,
                    OneTimePassphrase,
                    FilePath}, this.ImportiFoldersCryptoKeysOperationCompleted, userState);
    }
    
    private void OnImportiFoldersCryptoKeysCompleted(object arg) {
        if ((this.ImportiFoldersCryptoKeysCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.ImportiFoldersCryptoKeysCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Exports the iFolders Crypto Keys to a XML Document.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/ExportiFoldersCryptoKeysToDoc", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    [return: System.Xml.Serialization.XmlElementAttribute("keyDocument")]
    public System.Xml.XmlNode ExportiFoldersCryptoKeysToDoc(string DomainID, string UserID) {
        object[] results = this.Invoke("ExportiFoldersCryptoKeysToDoc", new object[] {
                    DomainID,
                    UserID});
        return ((System.Xml.XmlNode)(results[0]));
    }
    
    public System.IAsyncResult BeginExportiFoldersCryptoKeysToDoc(string DomainID, string UserID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ExportiFoldersCryptoKeysToDoc", new object[] {
                    DomainID,
                    UserID}, callback, asyncState);
    }
    
    public System.Xml.XmlNode EndExportiFoldersCryptoKeysToDoc(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Xml.XmlNode)(results[0]));
    }
    
    public void ExportiFoldersCryptoKeysToDocAsync(string DomainID, string UserID) {
        this.ExportiFoldersCryptoKeysToDocAsync(DomainID, UserID, null);
    }
    
    public void ExportiFoldersCryptoKeysToDocAsync(string DomainID, string UserID, object userState) {
        if ((this.ExportiFoldersCryptoKeysToDocOperationCompleted == null)) {
            this.ExportiFoldersCryptoKeysToDocOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExportiFoldersCryptoKeysToDocCompleted);
        }
        this.InvokeAsync("ExportiFoldersCryptoKeysToDoc", new object[] {
                    DomainID,
                    UserID}, this.ExportiFoldersCryptoKeysToDocOperationCompleted, userState);
    }
    
    private void OnExportiFoldersCryptoKeysToDocCompleted(object arg) {
        if ((this.ExportiFoldersCryptoKeysToDocCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.ExportiFoldersCryptoKeysToDocCompleted(this, new ExportiFoldersCryptoKeysToDocCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Recover the ifolder crypto keys for an user in a Domain given a RA.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/RecoverKeys", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public bool RecoverKeys(string DomainID, string UserID, string RAName, System.Xml.XmlNode keyDocument, string oneTimePP, out System.Xml.XmlNode decryptedKeyDoc) {
        object[] results = this.Invoke("RecoverKeys", new object[] {
                    DomainID,
                    UserID,
                    RAName,
                    keyDocument,
                    oneTimePP});
        decryptedKeyDoc = ((System.Xml.XmlNode)(results[1]));
        return ((bool)(results[0]));
    }
    
    public System.IAsyncResult BeginRecoverKeys(string DomainID, string UserID, string RAName, System.Xml.XmlNode keyDocument, string oneTimePP, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("RecoverKeys", new object[] {
                    DomainID,
                    UserID,
                    RAName,
                    keyDocument,
                    oneTimePP}, callback, asyncState);
    }
    
    public bool EndRecoverKeys(System.IAsyncResult asyncResult, out System.Xml.XmlNode decryptedKeyDoc) {
        object[] results = this.EndInvoke(asyncResult);
        decryptedKeyDoc = ((System.Xml.XmlNode)(results[1]));
        return ((bool)(results[0]));
    }
    
    public void RecoverKeysAsync(string DomainID, string UserID, string RAName, System.Xml.XmlNode keyDocument, string oneTimePP) {
        this.RecoverKeysAsync(DomainID, UserID, RAName, keyDocument, oneTimePP, null);
    }
    
    public void RecoverKeysAsync(string DomainID, string UserID, string RAName, System.Xml.XmlNode keyDocument, string oneTimePP, object userState) {
        if ((this.RecoverKeysOperationCompleted == null)) {
            this.RecoverKeysOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRecoverKeysCompleted);
        }
        this.InvokeAsync("RecoverKeys", new object[] {
                    DomainID,
                    UserID,
                    RAName,
                    keyDocument,
                    oneTimePP}, this.RecoverKeysOperationCompleted, userState);
    }
    
    private void OnRecoverKeysCompleted(object arg) {
        if ((this.RecoverKeysCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.RecoverKeysCompleted(this, new RecoverKeysCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Imports the iFolder Crypto Keys from an Array
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/ImportiFoldersCryptoKeysFromDoc", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void ImportiFoldersCryptoKeysFromDoc(string DomainID, string UserID, string NewPassphrase, string OneTimePassword, System.Xml.XmlNode keyDocument) {
        this.Invoke("ImportiFoldersCryptoKeysFromDoc", new object[] {
                    DomainID,
                    UserID,
                    NewPassphrase,
                    OneTimePassword,
                    keyDocument});
    }
    
    public System.IAsyncResult BeginImportiFoldersCryptoKeysFromDoc(string DomainID, string UserID, string NewPassphrase, string OneTimePassword, System.Xml.XmlNode keyDocument, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ImportiFoldersCryptoKeysFromDoc", new object[] {
                    DomainID,
                    UserID,
                    NewPassphrase,
                    OneTimePassword,
                    keyDocument}, callback, asyncState);
    }
    
    public void EndImportiFoldersCryptoKeysFromDoc(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    public void ImportiFoldersCryptoKeysFromDocAsync(string DomainID, string UserID, string NewPassphrase, string OneTimePassword, System.Xml.XmlNode keyDocument) {
        this.ImportiFoldersCryptoKeysFromDocAsync(DomainID, UserID, NewPassphrase, OneTimePassword, keyDocument, null);
    }
    
    public void ImportiFoldersCryptoKeysFromDocAsync(string DomainID, string UserID, string NewPassphrase, string OneTimePassword, System.Xml.XmlNode keyDocument, object userState) {
        if ((this.ImportiFoldersCryptoKeysFromDocOperationCompleted == null)) {
            this.ImportiFoldersCryptoKeysFromDocOperationCompleted = new System.Threading.SendOrPostCallback(this.OnImportiFoldersCryptoKeysFromDocCompleted);
        }
        this.InvokeAsync("ImportiFoldersCryptoKeysFromDoc", new object[] {
                    DomainID,
                    UserID,
                    NewPassphrase,
                    OneTimePassword,
                    keyDocument}, this.ImportiFoldersCryptoKeysFromDocOperationCompleted, userState);
    }
    
    private void OnImportiFoldersCryptoKeysFromDocCompleted(object arg) {
        if ((this.ImportiFoldersCryptoKeysFromDocCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.ImportiFoldersCryptoKeysFromDocCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Resets the passphrase by Export-Recover-Import automation
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/ExportRecoverImport", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void ExportRecoverImport(string DomainID, string UserID, string NewPassphrase) {
        this.Invoke("ExportRecoverImport", new object[] {
                    DomainID,
                    UserID,
                    NewPassphrase});
    }
    
    public System.IAsyncResult BeginExportRecoverImport(string DomainID, string UserID, string NewPassphrase, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ExportRecoverImport", new object[] {
                    DomainID,
                    UserID,
                    NewPassphrase}, callback, asyncState);
    }
    
    public void EndExportRecoverImport(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    public void ExportRecoverImportAsync(string DomainID, string UserID, string NewPassphrase) {
        this.ExportRecoverImportAsync(DomainID, UserID, NewPassphrase, null);
    }
    
    public void ExportRecoverImportAsync(string DomainID, string UserID, string NewPassphrase, object userState) {
        if ((this.ExportRecoverImportOperationCompleted == null)) {
            this.ExportRecoverImportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExportRecoverImportCompleted);
        }
        this.InvokeAsync("ExportRecoverImport", new object[] {
                    DomainID,
                    UserID,
                    NewPassphrase}, this.ExportRecoverImportOperationCompleted, userState);
    }
    
    private void OnExportRecoverImportCompleted(object arg) {
        if ((this.ExportRecoverImportCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.ExportRecoverImportCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Set the passphrase and recovery agent.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/SetPassPhrase", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public Status SetPassPhrase(string DomainID, string PassPhrase, string RAName, string RAPublicKey) {
        object[] results = this.Invoke("SetPassPhrase", new object[] {
                    DomainID,
                    PassPhrase,
                    RAName,
                    RAPublicKey});
        return ((Status)(results[0]));
    }
    
    public System.IAsyncResult BeginSetPassPhrase(string DomainID, string PassPhrase, string RAName, string RAPublicKey, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetPassPhrase", new object[] {
                    DomainID,
                    PassPhrase,
                    RAName,
                    RAPublicKey}, callback, asyncState);
    }
    
    public Status EndSetPassPhrase(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((Status)(results[0]));
    }
    
    public void SetPassPhraseAsync(string DomainID, string PassPhrase, string RAName, string RAPublicKey) {
        this.SetPassPhraseAsync(DomainID, PassPhrase, RAName, RAPublicKey, null);
    }
    
    public void SetPassPhraseAsync(string DomainID, string PassPhrase, string RAName, string RAPublicKey, object userState) {
        if ((this.SetPassPhraseOperationCompleted == null)) {
            this.SetPassPhraseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetPassPhraseCompleted);
        }
        this.InvokeAsync("SetPassPhrase", new object[] {
                    DomainID,
                    PassPhrase,
                    RAName,
                    RAPublicKey}, this.SetPassPhraseOperationCompleted, userState);
    }
    
    private void OnSetPassPhraseCompleted(object arg) {
        if ((this.SetPassPhraseCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SetPassPhraseCompleted(this, new SetPassPhraseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Set the passphrase and recovery agent.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/DefaultAccount", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public bool DefaultAccount(string DomainID, string iFolderID) {
        object[] results = this.Invoke("DefaultAccount", new object[] {
                    DomainID,
                    iFolderID});
        return ((bool)(results[0]));
    }
    
    public System.IAsyncResult BeginDefaultAccount(string DomainID, string iFolderID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("DefaultAccount", new object[] {
                    DomainID,
                    iFolderID}, callback, asyncState);
    }
    
    public bool EndDefaultAccount(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    public void DefaultAccountAsync(string DomainID, string iFolderID) {
        this.DefaultAccountAsync(DomainID, iFolderID, null);
    }
    
    public void DefaultAccountAsync(string DomainID, string iFolderID, object userState) {
        if ((this.DefaultAccountOperationCompleted == null)) {
            this.DefaultAccountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDefaultAccountCompleted);
        }
        this.InvokeAsync("DefaultAccount", new object[] {
                    DomainID,
                    iFolderID}, this.DefaultAccountOperationCompleted, userState);
    }
    
    private void OnDefaultAccountCompleted(object arg) {
        if ((this.DefaultAccountCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.DefaultAccountCompleted(this, new DefaultAccountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Set the passphrase and recovery agent.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/GetDefaultiFolder", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public string GetDefaultiFolder(string DomainID) {
        object[] results = this.Invoke("GetDefaultiFolder", new object[] {
                    DomainID});
        return ((string)(results[0]));
    }
    
    public System.IAsyncResult BeginGetDefaultiFolder(string DomainID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetDefaultiFolder", new object[] {
                    DomainID}, callback, asyncState);
    }
    
    public string EndGetDefaultiFolder(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    public void GetDefaultiFolderAsync(string DomainID) {
        this.GetDefaultiFolderAsync(DomainID, null);
    }
    
    public void GetDefaultiFolderAsync(string DomainID, object userState) {
        if ((this.GetDefaultiFolderOperationCompleted == null)) {
            this.GetDefaultiFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDefaultiFolderCompleted);
        }
        this.InvokeAsync("GetDefaultiFolder", new object[] {
                    DomainID}, this.GetDefaultiFolderOperationCompleted, userState);
    }
    
    private void OnGetDefaultiFolderCompleted(object arg) {
        if ((this.GetDefaultiFolderCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetDefaultiFolderCompleted(this, new GetDefaultiFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Reset passphrase and recovery agent.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/ReSetPassPhrase", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public Status ReSetPassPhrase(string DomainID, string OldPassPhrase, string PassPhrase, string RAName, string RAPublicKey) {
        object[] results = this.Invoke("ReSetPassPhrase", new object[] {
                    DomainID,
                    OldPassPhrase,
                    PassPhrase,
                    RAName,
                    RAPublicKey});
        return ((Status)(results[0]));
    }
    
    public System.IAsyncResult BeginReSetPassPhrase(string DomainID, string OldPassPhrase, string PassPhrase, string RAName, string RAPublicKey, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ReSetPassPhrase", new object[] {
                    DomainID,
                    OldPassPhrase,
                    PassPhrase,
                    RAName,
                    RAPublicKey}, callback, asyncState);
    }
    
    public Status EndReSetPassPhrase(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((Status)(results[0]));
    }
    
    public void ReSetPassPhraseAsync(string DomainID, string OldPassPhrase, string PassPhrase, string RAName, string RAPublicKey) {
        this.ReSetPassPhraseAsync(DomainID, OldPassPhrase, PassPhrase, RAName, RAPublicKey, null);
    }
    
    public void ReSetPassPhraseAsync(string DomainID, string OldPassPhrase, string PassPhrase, string RAName, string RAPublicKey, object userState) {
        if ((this.ReSetPassPhraseOperationCompleted == null)) {
            this.ReSetPassPhraseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReSetPassPhraseCompleted);
        }
        this.InvokeAsync("ReSetPassPhrase", new object[] {
                    DomainID,
                    OldPassPhrase,
                    PassPhrase,
                    RAName,
                    RAPublicKey}, this.ReSetPassPhraseOperationCompleted, userState);
    }
    
    private void OnReSetPassPhraseCompleted(object arg) {
        if ((this.ReSetPassPhraseCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.ReSetPassPhraseCompleted(this, new ReSetPassPhraseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Validate the passphrase for the correctness.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/ValidatePassPhrase", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public Status ValidatePassPhrase(string DomainID, string PassPhrase) {
        object[] results = this.Invoke("ValidatePassPhrase", new object[] {
                    DomainID,
                    PassPhrase});
        return ((Status)(results[0]));
    }
    
    public System.IAsyncResult BeginValidatePassPhrase(string DomainID, string PassPhrase, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ValidatePassPhrase", new object[] {
                    DomainID,
                    PassPhrase}, callback, asyncState);
    }
    
    public Status EndValidatePassPhrase(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((Status)(results[0]));
    }
    
    public void ValidatePassPhraseAsync(string DomainID, string PassPhrase) {
        this.ValidatePassPhraseAsync(DomainID, PassPhrase, null);
    }
    
    public void ValidatePassPhraseAsync(string DomainID, string PassPhrase, object userState) {
        if ((this.ValidatePassPhraseOperationCompleted == null)) {
            this.ValidatePassPhraseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidatePassPhraseCompleted);
        }
        this.InvokeAsync("ValidatePassPhrase", new object[] {
                    DomainID,
                    PassPhrase}, this.ValidatePassPhraseOperationCompleted, userState);
    }
    
    private void OnValidatePassPhraseCompleted(object arg) {
        if ((this.ValidatePassPhraseCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.ValidatePassPhraseCompleted(this, new ValidatePassPhraseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Returns the passphrase state.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/IsPassPhraseSet", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public bool IsPassPhraseSet(string DomainID) {
        object[] results = this.Invoke("IsPassPhraseSet", new object[] {
                    DomainID});
        return ((bool)(results[0]));
    }
    
    public System.IAsyncResult BeginIsPassPhraseSet(string DomainID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("IsPassPhraseSet", new object[] {
                    DomainID}, callback, asyncState);
    }
    
    public bool EndIsPassPhraseSet(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    public void IsPassPhraseSetAsync(string DomainID) {
        this.IsPassPhraseSetAsync(DomainID, null);
    }
    
    public void IsPassPhraseSetAsync(string DomainID, object userState) {
        if ((this.IsPassPhraseSetOperationCompleted == null)) {
            this.IsPassPhraseSetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsPassPhraseSetCompleted);
        }
        this.InvokeAsync("IsPassPhraseSet", new object[] {
                    DomainID}, this.IsPassPhraseSetOperationCompleted, userState);
    }
    
    private void OnIsPassPhraseSetCompleted(object arg) {
        if ((this.IsPassPhraseSetCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.IsPassPhraseSetCompleted(this, new IsPassPhraseSetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Gets the directory path to the Simias data area.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/GetSimiasDataPath", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public string GetSimiasDataPath() {
        object[] results = this.Invoke("GetSimiasDataPath", new object[0]);
        return ((string)(results[0]));
    }
    
    public System.IAsyncResult BeginGetSimiasDataPath(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetSimiasDataPath", new object[0], callback, asyncState);
    }
    
    public string EndGetSimiasDataPath(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    public void GetSimiasDataPathAsync() {
        this.GetSimiasDataPathAsync(null);
    }
    
    public void GetSimiasDataPathAsync(object userState) {
        if ((this.GetSimiasDataPathOperationCompleted == null)) {
            this.GetSimiasDataPathOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSimiasDataPathCompleted);
        }
        this.InvokeAsync("GetSimiasDataPath", new object[0], this.GetSimiasDataPathOperationCompleted, userState);
    }
    
    private void OnGetSimiasDataPathCompleted(object arg) {
        if ((this.GetSimiasDataPathCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetSimiasDataPathCompleted(this, new GetSimiasDataPathCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Gets the process ID for the current running process.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/simias/web/GetSimiasProcessID", RequestNamespace="http://novell.com/simias/web/", ResponseNamespace="http://novell.com/simias/web/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public int GetSimiasProcessID() {
        object[] results = this.Invoke("GetSimiasProcessID", new object[0]);
        return ((int)(results[0]));
    }
    
    public System.IAsyncResult BeginGetSimiasProcessID(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetSimiasProcessID", new object[0], callback, asyncState);
    }
    
    public int EndGetSimiasProcessID(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((int)(results[0]));
    }
    
    public void GetSimiasProcessIDAsync() {
        this.GetSimiasProcessIDAsync(null);
    }
    
    public void GetSimiasProcessIDAsync(object userState) {
        if ((this.GetSimiasProcessIDOperationCompleted == null)) {
            this.GetSimiasProcessIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSimiasProcessIDCompleted);
        }
        this.InvokeAsync("GetSimiasProcessID", new object[0], this.GetSimiasProcessIDOperationCompleted, userState);
    }
    
    private void OnGetSimiasProcessIDCompleted(object arg) {
        if ((this.GetSimiasProcessIDCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetSimiasProcessIDCompleted(this, new GetSimiasProcessIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/simias/web/")]
public partial class MemberInfo {
    
    private string objectIDField;
    
    private string userIDField;
    
    private string nameField;
    
    private string givenNameField1;
    
    private string familyNameField1;
    
    private string fullNameField;
    
    private int accessRightsField;
    
    private bool isOwnerField;
    
    private bool isHostField;
    
    /// <remarks/>
    public string ObjectID {
        get {
            return this.objectIDField;
        }
        set {
            this.objectIDField = value;
        }
    }
    
    /// <remarks/>
    public string UserID {
        get {
            return this.userIDField;
        }
        set {
            this.userIDField = value;
        }
    }
    
    /// <remarks/>
    public string Name {
        get {
            return this.nameField;
        }
        set {
            this.nameField = value;
        }
    }
    
    /// <remarks/>
    public string GivenName {
        get {
            return this.givenNameField1;
        }
        set {
            this.givenNameField1 = value;
        }
    }
    
    /// <remarks/>
    public string FamilyName {
        get {
            return this.familyNameField1;
        }
        set {
            this.familyNameField1 = value;
        }
    }
    
    /// <remarks/>
    public string FullName {
        get {
            return this.fullNameField;
        }
        set {
            this.fullNameField = value;
        }
    }
    
    /// <remarks/>
    public int AccessRights {
        get {
            return this.accessRightsField;
        }
        set {
            this.accessRightsField = value;
        }
    }
    
    /// <remarks/>
    public bool IsOwner {
        get {
            return this.isOwnerField;
        }
        set {
            this.isOwnerField = value;
        }
    }
    
    /// <remarks/>
    public bool IsHost {
        get {
            return this.isHostField;
        }
        set {
            this.isHostField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/simias/web/")]
public enum SearchType {
    
    /// <remarks/>
    Equal,
    
    /// <remarks/>
    Not_Equal,
    
    /// <remarks/>
    Begins,
    
    /// <remarks/>
    Ends,
    
    /// <remarks/>
    Contains,
    
    /// <remarks/>
    Greater,
    
    /// <remarks/>
    Less,
    
    /// <remarks/>
    Greater_Equal,
    
    /// <remarks/>
    Less_Equal,
    
    /// <remarks/>
    Exists,
    
    /// <remarks/>
    CaseEqual,
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/simias/web/")]
public partial class DomainInformation {
    
    private DomainType typeField;
    
    private bool activeField;
    
    private bool authenticatedField;
    
    private string nameField1;
    
    private string descriptionField;
    
    private string iDField;
    
    private string memberUserIDField;
    
    private string memberNameField1;
    
    private string remoteUrlField;
    
    private string pOBoxIDField;
    
    private string hostUrlField;
    
    private string hostField;
    
    private bool isSlaveField;
    
    private bool isDefaultField;
    
    private StatusCodes statusCodeField;
    
    private int remainingGraceLoginsField;
    
    /// <remarks/>
    public DomainType Type {
        get {
            return this.typeField;
        }
        set {
            this.typeField = value;
        }
    }
    
    /// <remarks/>
    public bool Active {
        get {
            return this.activeField;
        }
        set {
            this.activeField = value;
        }
    }
    
    /// <remarks/>
    public bool Authenticated {
        get {
            return this.authenticatedField;
        }
        set {
            this.authenticatedField = value;
        }
    }
    
    /// <remarks/>
    public string Name {
        get {
            return this.nameField1;
        }
        set {
            this.nameField1 = value;
        }
    }
    
    /// <remarks/>
    public string Description {
        get {
            return this.descriptionField;
        }
        set {
            this.descriptionField = value;
        }
    }
    
    /// <remarks/>
    public string ID {
        get {
            return this.iDField;
        }
        set {
            this.iDField = value;
        }
    }
    
    /// <remarks/>
    public string MemberUserID {
        get {
            return this.memberUserIDField;
        }
        set {
            this.memberUserIDField = value;
        }
    }
    
    /// <remarks/>
    public string MemberName {
        get {
            return this.memberNameField1;
        }
        set {
            this.memberNameField1 = value;
        }
    }
    
    /// <remarks/>
    public string RemoteUrl {
        get {
            return this.remoteUrlField;
        }
        set {
            this.remoteUrlField = value;
        }
    }
    
    /// <remarks/>
    public string POBoxID {
        get {
            return this.pOBoxIDField;
        }
        set {
            this.pOBoxIDField = value;
        }
    }
    
    /// <remarks/>
    public string HostUrl {
        get {
            return this.hostUrlField;
        }
        set {
            this.hostUrlField = value;
        }
    }
    
    /// <remarks/>
    public string Host {
        get {
            return this.hostField;
        }
        set {
            this.hostField = value;
        }
    }
    
    /// <remarks/>
    public bool IsSlave {
        get {
            return this.isSlaveField;
        }
        set {
            this.isSlaveField = value;
        }
    }
    
    /// <remarks/>
    public bool IsDefault {
        get {
            return this.isDefaultField;
        }
        set {
            this.isDefaultField = value;
        }
    }
    
    /// <remarks/>
    public StatusCodes StatusCode {
        get {
            return this.statusCodeField;
        }
        set {
            this.statusCodeField = value;
        }
    }
    
    /// <remarks/>
    public int RemainingGraceLogins {
        get {
            return this.remainingGraceLoginsField;
        }
        set {
            this.remainingGraceLoginsField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/simias/web/")]
public enum DomainType {
    
    /// <remarks/>
    Master,
    
    /// <remarks/>
    Slave,
    
    /// <remarks/>
    Local,
    
    /// <remarks/>
    None,
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/simias/web/")]
public enum StatusCodes {
    
    /// <remarks/>
    Success,
    
    /// <remarks/>
    SuccessInGrace,
    
    /// <remarks/>
    InvalidCertificate,
    
    /// <remarks/>
    UnknownUser,
    
    /// <remarks/>
    AmbiguousUser,
    
    /// <remarks/>
    InvalidCredentials,
    
    /// <remarks/>
    InvalidPassword,
    
    /// <remarks/>
    AccountDisabled,
    
    /// <remarks/>
    AccountLockout,
    
    /// <remarks/>
    SimiasLoginDisabled,
    
    /// <remarks/>
    UnknownDomain,
    
    /// <remarks/>
    InternalException,
    
    /// <remarks/>
    MethodNotSupported,
    
    /// <remarks/>
    Timeout,
    
    /// <remarks/>
    OlderVersion,
    
    /// <remarks/>
    ServerOld,
    
    /// <remarks/>
    UpgradeNeeded,
    
    /// <remarks/>
    PassPhraseNotSet,
    
    /// <remarks/>
    PassPhraseInvalid,
    
    /// <remarks/>
    UserAlreadyMoved,
    
    /// <remarks/>
    ServerUnAvailable,
    
    /// <remarks/>
    Unknown,
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/simias/web/")]
public partial class Status {
    
    private StatusCodes statusCodeField1;
    
    private string domainIDField9;
    
    private string userIDField1;
    
    private string userNameField;
    
    private string distinguishedUserNameField;
    
    private string exceptionMessageField;
    
    private int totalGraceLoginsField;
    
    private int remainingGraceLoginsField1;
    
    private int daysUntilPasswordExpiresField;
    
    /// <remarks/>
    public StatusCodes statusCode {
        get {
            return this.statusCodeField1;
        }
        set {
            this.statusCodeField1 = value;
        }
    }
    
    /// <remarks/>
    public string DomainID {
        get {
            return this.domainIDField9;
        }
        set {
            this.domainIDField9 = value;
        }
    }
    
    /// <remarks/>
    public string UserID {
        get {
            return this.userIDField1;
        }
        set {
            this.userIDField1 = value;
        }
    }
    
    /// <remarks/>
    public string UserName {
        get {
            return this.userNameField;
        }
        set {
            this.userNameField = value;
        }
    }
    
    /// <remarks/>
    public string DistinguishedUserName {
        get {
            return this.distinguishedUserNameField;
        }
        set {
            this.distinguishedUserNameField = value;
        }
    }
    
    /// <remarks/>
    public string ExceptionMessage {
        get {
            return this.exceptionMessageField;
        }
        set {
            this.exceptionMessageField = value;
        }
    }
    
    /// <remarks/>
    public int TotalGraceLogins {
        get {
            return this.totalGraceLoginsField;
        }
        set {
            this.totalGraceLoginsField = value;
        }
    }
    
    /// <remarks/>
    public int RemainingGraceLogins {
        get {
            return this.remainingGraceLoginsField1;
        }
        set {
            this.remainingGraceLoginsField1 = value;
        }
    }
    
    /// <remarks/>
    public int DaysUntilPasswordExpires {
        get {
            return this.daysUntilPasswordExpiresField;
        }
        set {
            this.daysUntilPasswordExpiresField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/simias/web/")]
public enum CredentialType {
    
    /// <remarks/>
    None,
    
    /// <remarks/>
    NotRequired,
    
    /// <remarks/>
    Basic,
    
    /// <remarks/>
    PPK,
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/simias/web/")]
public enum CertificateProblem {
    
    /// <remarks/>
    CertOK,
    
    /// <remarks/>
    CertEXPIRED,
    
    /// <remarks/>
    CertVALIDITYPERIODNESTING,
    
    /// <remarks/>
    CertROLE,
    
    /// <remarks/>
    CertPATHLENCONST,
    
    /// <remarks/>
    CertCRITICAL,
    
    /// <remarks/>
    CertPURPOSE,
    
    /// <remarks/>
    CertISSUERCHAINING,
    
    /// <remarks/>
    CertMALFORMED,
    
    /// <remarks/>
    CertUNTRUSTEDROOT,
    
    /// <remarks/>
    CertCHAINING,
    
    /// <remarks/>
    CertREVOKED,
    
    /// <remarks/>
    CertUNTRUSTEDTESTROOT,
    
    /// <remarks/>
    CertREVOCATION_FAILURE,
    
    /// <remarks/>
    CertCN_NO_MATCH,
    
    /// <remarks/>
    CertWRONG_USAGE,
    
    /// <remarks/>
    CertUNTRUSTEDCA,
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/simias/web/")]
public partial class CollectionKey {
    
    private string nodeIDField;
    
    private string pEDEKField;
    
    private string rEDEKField;
    
    /// <remarks/>
    public string NodeID {
        get {
            return this.nodeIDField;
        }
        set {
            this.nodeIDField = value;
        }
    }
    
    /// <remarks/>
    public string PEDEK {
        get {
            return this.pEDEKField;
        }
        set {
            this.pEDEKField = value;
        }
    }
    
    /// <remarks/>
    public string REDEK {
        get {
            return this.rEDEKField;
        }
        set {
            this.rEDEKField = value;
        }
    }
}

public delegate void PingSimiasCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs args);

public delegate void AddMemberToDomainCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs args);

public delegate void RemoveMemberFromDomainCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs args);

public delegate void FindCloseMembersCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs args);

public partial class FindFirstMembersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal FindFirstMembersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
    
    public string searchContext {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[1]));
        }
    }
    
    public MemberInfo[] memberList {
        get {
            this.RaiseExceptionIfNecessary();
            return ((MemberInfo[])(this.results[2]));
        }
    }
    
    public int totalMembers {
        get {
            this.RaiseExceptionIfNecessary();
            return ((int)(this.results[3]));
        }
    }
}

public delegate void FindFirstMembersCompletedEventHandler(object sender, FindFirstMembersCompletedEventArgs args);

public partial class FindFirstSpecificMembersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal FindFirstSpecificMembersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
    
    public string searchContext {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[1]));
        }
    }
    
    public MemberInfo[] memberList {
        get {
            this.RaiseExceptionIfNecessary();
            return ((MemberInfo[])(this.results[2]));
        }
    }
    
    public int totalMembers {
        get {
            this.RaiseExceptionIfNecessary();
            return ((int)(this.results[3]));
        }
    }
}

public delegate void FindFirstSpecificMembersCompletedEventHandler(object sender, FindFirstSpecificMembersCompletedEventArgs args);

public partial class FindNextMembersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal FindNextMembersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
    
    public string searchContext {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[1]));
        }
    }
    
    public MemberInfo[] memberList {
        get {
            this.RaiseExceptionIfNecessary();
            return ((MemberInfo[])(this.results[2]));
        }
    }
}

public delegate void FindNextMembersCompletedEventHandler(object sender, FindNextMembersCompletedEventArgs args);

public partial class FindPreviousMembersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal FindPreviousMembersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
    
    public string searchContext {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[1]));
        }
    }
    
    public MemberInfo[] memberList {
        get {
            this.RaiseExceptionIfNecessary();
            return ((MemberInfo[])(this.results[2]));
        }
    }
}

public delegate void FindPreviousMembersCompletedEventHandler(object sender, FindPreviousMembersCompletedEventArgs args);

public partial class FindSeekMembersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal FindSeekMembersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
    
    public string searchContext {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[1]));
        }
    }
    
    public MemberInfo[] memberList {
        get {
            this.RaiseExceptionIfNecessary();
            return ((MemberInfo[])(this.results[2]));
        }
    }
}

public delegate void FindSeekMembersCompletedEventHandler(object sender, FindSeekMembersCompletedEventArgs args);

public partial class GetSimiasInformationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetSimiasInformationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

public delegate void GetSimiasInformationCompletedEventHandler(object sender, GetSimiasInformationCompletedEventArgs args);

public partial class GetDomainInformationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetDomainInformationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public DomainInformation Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((DomainInformation)(this.results[0]));
        }
    }
}

public delegate void GetDomainInformationCompletedEventHandler(object sender, GetDomainInformationCompletedEventArgs args);

public partial class GetDomainsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetDomainsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public DomainInformation[] Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((DomainInformation[])(this.results[0]));
        }
    }
}

public delegate void GetDomainsCompletedEventHandler(object sender, GetDomainsCompletedEventArgs args);

public partial class LoginToRemoteDomainCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal LoginToRemoteDomainCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public Status Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((Status)(this.results[0]));
        }
    }
}

public delegate void LoginToRemoteDomainCompletedEventHandler(object sender, LoginToRemoteDomainCompletedEventArgs args);

public partial class LogoutFromRemoteDomainCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal LogoutFromRemoteDomainCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public Status Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((Status)(this.results[0]));
        }
    }
}

public delegate void LogoutFromRemoteDomainCompletedEventHandler(object sender, LogoutFromRemoteDomainCompletedEventArgs args);

public delegate void DisableDomainAutoLoginCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs args);

public partial class IsDomainActiveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal IsDomainActiveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

public delegate void IsDomainActiveCompletedEventHandler(object sender, IsDomainActiveCompletedEventArgs args);

public partial class SetDomainActiveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal SetDomainActiveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public int Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((int)(this.results[0]));
        }
    }
}

public delegate void SetDomainActiveCompletedEventHandler(object sender, SetDomainActiveCompletedEventArgs args);

public partial class SetDomainInactiveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal SetDomainInactiveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public int Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((int)(this.results[0]));
        }
    }
}

public delegate void SetDomainInactiveCompletedEventHandler(object sender, SetDomainInactiveCompletedEventArgs args);

public partial class ValidCredentialsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal ValidCredentialsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

public delegate void ValidCredentialsCompletedEventHandler(object sender, ValidCredentialsCompletedEventArgs args);

public delegate void SetDomainCredentialsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs args);

public delegate void SetHostAddressCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs args);

public delegate void StorePassPhraseCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs args);

public partial class GetDomainCredentialsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetDomainCredentialsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public CredentialType Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CredentialType)(this.results[0]));
        }
    }
    
    public string userID {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[1]));
        }
    }
    
    public string credentials {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[2]));
        }
    }
}

public delegate void GetDomainCredentialsCompletedEventHandler(object sender, GetDomainCredentialsCompletedEventArgs args);

public partial class GetPassPhraseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetPassPhraseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

public delegate void GetPassPhraseCompletedEventHandler(object sender, GetPassPhraseCompletedEventArgs args);

public partial class GetRememberOptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetRememberOptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

public delegate void GetRememberOptionCompletedEventHandler(object sender, GetRememberOptionCompletedEventArgs args);

public partial class ConnectToDomainCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal ConnectToDomainCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public DomainInformation Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((DomainInformation)(this.results[0]));
        }
    }
}

public delegate void ConnectToDomainCompletedEventHandler(object sender, ConnectToDomainCompletedEventArgs args);

public delegate void LeaveDomainCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs args);

public delegate void RemoveCertFromTableCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs args);

public delegate void SetDefaultDomainCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs args);

public partial class GetDefaultDomainIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetDefaultDomainIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

public delegate void GetDefaultDomainIDCompletedEventHandler(object sender, GetDefaultDomainIDCompletedEventArgs args);

public partial class GetCertificateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetCertificateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public byte[] Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((byte[])(this.results[0]));
        }
    }
}

public delegate void GetCertificateCompletedEventHandler(object sender, GetCertificateCompletedEventArgs args);

public partial class GetCertificate2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetCertificate2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public byte[] Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((byte[])(this.results[0]));
        }
    }
    
    public CertificateProblem Problem {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CertificateProblem)(this.results[1]));
        }
    }
}

public delegate void GetCertificate2CompletedEventHandler(object sender, GetCertificate2CompletedEventArgs args);

public delegate void StoreCertificateCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs args);

public delegate void StoreDomainCertificateCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs args);

public partial class GetRAListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetRAListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public string[] Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string[])(this.results[0]));
        }
    }
}

public delegate void GetRAListCompletedEventHandler(object sender, GetRAListCompletedEventArgs args);

public partial class GetRAListOnClientCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetRAListOnClientCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public string[] Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string[])(this.results[0]));
        }
    }
}

public delegate void GetRAListOnClientCompletedEventHandler(object sender, GetRAListOnClientCompletedEventArgs args);

public partial class GetRACertificateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetRACertificateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public byte[] Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((byte[])(this.results[0]));
        }
    }
}

public delegate void GetRACertificateCompletedEventHandler(object sender, GetRACertificateCompletedEventArgs args);

public partial class GetRACertificateOnClientCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetRACertificateOnClientCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public byte[] Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((byte[])(this.results[0]));
        }
    }
}

public delegate void GetRACertificateOnClientCompletedEventHandler(object sender, GetRACertificateOnClientCompletedEventArgs args);

public partial class GetPublicKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetPublicKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

public delegate void GetPublicKeyCompletedEventHandler(object sender, GetPublicKeyCompletedEventArgs args);

public partial class GetDefaultPublicKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetDefaultPublicKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

public delegate void GetDefaultPublicKeyCompletedEventHandler(object sender, GetDefaultPublicKeyCompletedEventArgs args);

public partial class GetDefaultRSAFromServerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetDefaultRSAFromServerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

public delegate void GetDefaultRSAFromServerCompletedEventHandler(object sender, GetDefaultRSAFromServerCompletedEventArgs args);

public partial class GetDefaultRSAKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetDefaultRSAKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

public delegate void GetDefaultRSAKeyCompletedEventHandler(object sender, GetDefaultRSAKeyCompletedEventArgs args);

public delegate void StoreRACertificateCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs args);

public partial class GetInvalidSyncFilenameCharsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetInvalidSyncFilenameCharsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

public delegate void GetInvalidSyncFilenameCharsCompletedEventHandler(object sender, GetInvalidSyncFilenameCharsCompletedEventArgs args);

public partial class SetDomainHostAddressCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal SetDomainHostAddressCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

public delegate void SetDomainHostAddressCompletedEventHandler(object sender, SetDomainHostAddressCompletedEventArgs args);

public partial class SetProxyAddressCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal SetProxyAddressCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

public delegate void SetProxyAddressCompletedEventHandler(object sender, SetProxyAddressCompletedEventArgs args);

public partial class CanShareServiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal CanShareServiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

public delegate void CanShareServiceCompletedEventHandler(object sender, CanShareServiceCompletedEventArgs args);

public delegate void StopSimiasProcessCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs args);

public partial class AddSimiasReferenceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal AddSimiasReferenceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public int Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((int)(this.results[0]));
        }
    }
}

public delegate void AddSimiasReferenceCompletedEventHandler(object sender, AddSimiasReferenceCompletedEventArgs args);

public partial class RemoveSimiasReferenceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal RemoveSimiasReferenceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public int Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((int)(this.results[0]));
        }
    }
}

public delegate void RemoveSimiasReferenceCompletedEventHandler(object sender, RemoveSimiasReferenceCompletedEventArgs args);

public partial class ServerSetDefaultAccountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal ServerSetDefaultAccountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

public delegate void ServerSetDefaultAccountCompletedEventHandler(object sender, ServerSetDefaultAccountCompletedEventArgs args);

public partial class ServerGetDefaultiFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal ServerGetDefaultiFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

public delegate void ServerGetDefaultiFolderCompletedEventHandler(object sender, ServerGetDefaultiFolderCompletedEventArgs args);

public partial class GetGroupsiFolderLimitPolicyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetGroupsiFolderLimitPolicyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public int Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((int)(this.results[0]));
        }
    }
}

public delegate void GetGroupsiFolderLimitPolicyCompletedEventHandler(object sender, GetGroupsiFolderLimitPolicyCompletedEventArgs args);

public partial class IsTransferAllowedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal IsTransferAllowedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

public delegate void IsTransferAllowedCompletedEventHandler(object sender, IsTransferAllowedCompletedEventArgs args);

public partial class GetGroupsSharingPolicyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetGroupsSharingPolicyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public int Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((int)(this.results[0]));
        }
    }
}

public delegate void GetGroupsSharingPolicyCompletedEventHandler(object sender, GetGroupsSharingPolicyCompletedEventArgs args);

public partial class GetGroupsSecurityPolicyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetGroupsSecurityPolicyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public int Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((int)(this.results[0]));
        }
    }
}

public delegate void GetGroupsSecurityPolicyCompletedEventHandler(object sender, GetGroupsSecurityPolicyCompletedEventArgs args);

public partial class GetEffectiveSyncPolicyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetEffectiveSyncPolicyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public int Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((int)(this.results[0]));
        }
    }
}

public delegate void GetEffectiveSyncPolicyCompletedEventHandler(object sender, GetEffectiveSyncPolicyCompletedEventArgs args);

public partial class ServerSetPassPhraseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal ServerSetPassPhraseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public Status Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((Status)(this.results[0]));
        }
    }
}

public delegate void ServerSetPassPhraseCompletedEventHandler(object sender, ServerSetPassPhraseCompletedEventArgs args);

public partial class ServerGetEncrypPassKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal ServerGetEncrypPassKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

public delegate void ServerGetEncrypPassKeyCompletedEventHandler(object sender, ServerGetEncrypPassKeyCompletedEventArgs args);

public partial class ServerGetPassKeyHashCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal ServerGetPassKeyHashCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

public delegate void ServerGetPassKeyHashCompletedEventHandler(object sender, ServerGetPassKeyHashCompletedEventArgs args);

public partial class UpdateUserMoveStateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal UpdateUserMoveStateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

public delegate void UpdateUserMoveStateCompletedEventHandler(object sender, UpdateUserMoveStateCompletedEventArgs args);

public partial class UpdateHomeServerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal UpdateHomeServerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

public delegate void UpdateHomeServerCompletedEventHandler(object sender, UpdateHomeServerCompletedEventArgs args);

public partial class DownloadiFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal DownloadiFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

public delegate void DownloadiFolderCompletedEventHandler(object sender, DownloadiFolderCompletedEventArgs args);

public partial class UpdateLocalPropertiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal UpdateLocalPropertiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

public delegate void UpdateLocalPropertiesCompletedEventHandler(object sender, UpdateLocalPropertiesCompletedEventArgs args);

public partial class DisableUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal DisableUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

public delegate void DisableUserCompletedEventHandler(object sender, DisableUserCompletedEventArgs args);

public delegate void SetOnMasterEncryptionBlobFlagCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs args);

public partial class CommitDomainMemberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal CommitDomainMemberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

public delegate void CommitDomainMemberCompletedEventHandler(object sender, CommitDomainMemberCompletedEventArgs args);

public partial class ServerGetCollectionHashKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal ServerGetCollectionHashKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

public delegate void ServerGetCollectionHashKeyCompletedEventHandler(object sender, ServerGetCollectionHashKeyCompletedEventArgs args);

public partial class GetiFolderCryptoKeysCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetiFolderCryptoKeysCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public CollectionKey Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CollectionKey)(this.results[0]));
        }
    }
}

public delegate void GetiFolderCryptoKeysCompletedEventHandler(object sender, GetiFolderCryptoKeysCompletedEventArgs args);

public partial class SetiFolderCryptoKeysCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal SetiFolderCryptoKeysCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

public delegate void SetiFolderCryptoKeysCompletedEventHandler(object sender, SetiFolderCryptoKeysCompletedEventArgs args);

public delegate void ExportiFoldersCryptoKeysCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs args);

public delegate void ImportiFoldersCryptoKeysCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs args);

public partial class ExportiFoldersCryptoKeysToDocCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal ExportiFoldersCryptoKeysToDocCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public System.Xml.XmlNode Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Xml.XmlNode)(this.results[0]));
        }
    }
}

public delegate void ExportiFoldersCryptoKeysToDocCompletedEventHandler(object sender, ExportiFoldersCryptoKeysToDocCompletedEventArgs args);

public partial class RecoverKeysCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal RecoverKeysCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
    
    public System.Xml.XmlNode decryptedKeyDoc {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Xml.XmlNode)(this.results[1]));
        }
    }
}

public delegate void RecoverKeysCompletedEventHandler(object sender, RecoverKeysCompletedEventArgs args);

public delegate void ImportiFoldersCryptoKeysFromDocCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs args);

public delegate void ExportRecoverImportCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs args);

public partial class SetPassPhraseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal SetPassPhraseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public Status Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((Status)(this.results[0]));
        }
    }
}

public delegate void SetPassPhraseCompletedEventHandler(object sender, SetPassPhraseCompletedEventArgs args);

public partial class DefaultAccountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal DefaultAccountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

public delegate void DefaultAccountCompletedEventHandler(object sender, DefaultAccountCompletedEventArgs args);

public partial class GetDefaultiFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetDefaultiFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

public delegate void GetDefaultiFolderCompletedEventHandler(object sender, GetDefaultiFolderCompletedEventArgs args);

public partial class ReSetPassPhraseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal ReSetPassPhraseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public Status Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((Status)(this.results[0]));
        }
    }
}

public delegate void ReSetPassPhraseCompletedEventHandler(object sender, ReSetPassPhraseCompletedEventArgs args);

public partial class ValidatePassPhraseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal ValidatePassPhraseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public Status Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((Status)(this.results[0]));
        }
    }
}

public delegate void ValidatePassPhraseCompletedEventHandler(object sender, ValidatePassPhraseCompletedEventArgs args);

public partial class IsPassPhraseSetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal IsPassPhraseSetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

public delegate void IsPassPhraseSetCompletedEventHandler(object sender, IsPassPhraseSetCompletedEventArgs args);

public partial class GetSimiasDataPathCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetSimiasDataPathCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

public delegate void GetSimiasDataPathCompletedEventHandler(object sender, GetSimiasDataPathCompletedEventArgs args);

public partial class GetSimiasProcessIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetSimiasProcessIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public int Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((int)(this.results[0]));
        }
    }
}

public delegate void GetSimiasProcessIDCompletedEventHandler(object sender, GetSimiasProcessIDCompletedEventArgs args);
