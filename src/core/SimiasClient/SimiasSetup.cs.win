/*****************************************************************************
*
* Copyright (c) [2009] Novell, Inc.
* All Rights Reserved.
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of version 2 of the GNU General Public License as
* published by the Free Software Foundation.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program; if not, contact Novell, Inc.
*
* To contact Novell about this file by physical or electronic mail,
* you may find current contact information at www.novell.com
*
*-----------------------------------------------------------------------------
*
*                 $Author: Rob
*                 $Modified by: <Modifier>
*                 $Mod Date: <Date Modified>
*                 $Revision: 0.1
*-----------------------------------------------------------------------------
* This module is used to:
*        <Description of the functionality of the file >
*
*
*******************************************************************************/

using System;
using System.IO;
using System.Reflection;

namespace Simias.Client
{
	/// <summary>
	/// Simias Setup Information
	/// </summary>
	public class SimiasSetup
	{
		// setup paths
		private static string _prefix = "/opt/novell/ifolder3/";
		private static string _bindir = "/opt/novell/ifolder3//bin";
		private static string _datadir = "/opt/novell/ifolder3//share";
		private static string _includedir = "/opt/novell/ifolder3//include";
		private static string _infodir = "/opt/novell/ifolder3//info";
		private static string _libexecdir = "/opt/novell/ifolder3//lib/simias";
		private static string _libdir = "/opt/novell/ifolder3//lib";
		private static string _localstatedir = "/opt/novell/ifolder3//var";
		private static string _mandir = "/opt/novell/ifolder3//man";
		private static string _sbindir = "/opt/novell/ifolder3//sbin";
		private static string _sharedstatedir = "/opt/novell/ifolder3//com";
		private static string _sysconfdir = "/opt/novell/ifolder3//etc";

		// custom setup paths
		private static string _webdir = "/opt/novell/ifolder3//lib/simias/web";
		private static string _webbindir = "/opt/novell/ifolder3//lib/simias/web/bin";
		private static string _modulesdir = "/opt/novell/ifolder3//lib/simias/web/modules";
		private static string _bootstrapdir = "/opt/novell/ifolder3//etc/simias/bill";
		private static string _simiasconfdir = "/opt/novell/ifolder3//etc/simias";
//		private static string _simiaslogdir = "/var/lib/simias/log";
		
		// setup info
		private static string _target = "i686-suse-linux";

		/// <summary>
		/// Static Constructor
		/// </summary>
		static SimiasSetup()
		{
			// note: with DotNet with the entry assembly directory as the prefix
//			if (MyEnvironment.DotNet)
//			{
#if WINDOWS
				string newprefix = null;
				
				try
				{
					// location of the entry assembly as the prefix
					newprefix = Path.GetDirectoryName(Assembly.GetEntryAssembly().Location);
					Console.WriteLine("new pre {0}", newprefix);
				}
				catch
				{
					// ignore
				}
				
				if ((newprefix == null) || (newprefix.Length == 0))
				{
					newprefix = Environment.CurrentDirectory;
					
					string tempPref = Path.GetFullPath(newprefix);
		                    if (Path.GetFileName(tempPref) == "bin")
	        	            {
                		        newprefix = Path.Combine(Environment.CurrentDirectory, "../../../..");
                	        	Console.WriteLine("new pre2 {0}", newprefix);
		                    }
				}

				// assign
				prefix = newprefix;
#endif
//			}
		}

		/// <summary>
		/// Private Constructor
		/// </summary>
		private SimiasSetup()
		{
		}
		
		/// <summary>
		/// prefix
		/// </summary>
		public static string prefix
		{
			get { return _prefix; }
			
#if WINDOWS
			set
			{
				// On some Windows clients, the initial prefix path is C:\ which causes
				// a malformed path to be returned by Replace ... removing the trailing separator
				// will fix this.
				_prefix = _prefix.Trim(Path.DirectorySeparatorChar);
				
				// replace the old prefix
				_bindir = Path.GetFullPath(_bindir.Replace(_prefix, value));
				_datadir = Path.GetFullPath(_datadir.Replace(_prefix, value));
				_includedir = Path.GetFullPath(_includedir.Replace(_prefix, value));
				_infodir = Path.GetFullPath(_infodir.Replace(_prefix, value));
				_libexecdir = Path.GetFullPath(_libexecdir.Replace(_prefix, value));
				_libdir = Path.GetFullPath(_libdir.Replace(_prefix, value));
				_localstatedir = Path.GetFullPath(_localstatedir.Replace(_prefix, value));
				_mandir = Path.GetFullPath(_mandir.Replace(_prefix, value));
				_sbindir = Path.GetFullPath(_sbindir.Replace(_prefix, value));
				_sharedstatedir = Path.GetFullPath(_sharedstatedir.Replace(_prefix, value));
				_sysconfdir = Path.GetFullPath(_sysconfdir.Replace(_prefix, value));
				_webdir = Path.GetFullPath(_webdir.Replace(_prefix, value));
				_webbindir = Path.GetFullPath(_webbindir.Replace(_prefix, value));
				_modulesdir = Path.GetFullPath(_modulesdir.Replace(_prefix, value));
				_bootstrapdir = Path.GetFullPath(_bootstrapdir.Replace(_prefix, value));
				_simiasconfdir = Path.GetFullPath(_simiasconfdir.Replace(_prefix, value));
//				_simiaslogdir = Path.GetFullPath(_simiaslogdir.Replace(_prefix, value));
				
				// update prefix
				_prefix = Path.GetFullPath(value);
			}
#endif
		}
		
		/// <summary>
		/// bindir
		/// </summary>
		public static string bindir
		{
			get { return _bindir; }
		}
		
		/// <summary>
		/// datadir
		/// </summary>
		public static string datadir
		{
			get { return _datadir; }
		}
		
		/// <summary>
		/// includedir
		/// </summary>
		public static string includedir
		{
			get { return _includedir; }
		}
		
		/// <summary>
		/// infodir
		/// </summary>
		public static string infodir
		{
			get { return _infodir; }
		}
		
		/// <summary>
		/// libexecdir
		/// </summary>
		public static string libexecdir
		{
			get { return _libexecdir; }
		}
		
		/// <summary>
		/// libdir
		/// </summary>
		public static string libdir
		{
			get { return _libdir; }
		}
		
		/// <summary>
		/// localstatedir
		/// </summary>
		public static string localstatedir
		{
			get { return _localstatedir; }
		}
		
		/// <summary>
		/// mandir
		/// </summary>
		public static string mandir
		{
			get { return _mandir; }
		}
		
		/// <summary>
		/// sbindir
		/// </summary>
		public static string sbindir
		{
			get { return _sbindir; }
		}
		
		/// <summary>
		/// sharedstatedir
		/// </summary>
		public static string sharedstatedir
		{
			get { return _sharedstatedir; }
		}
		
		/// <summary>
		/// sysconfdir
		/// </summary>
		public static string sysconfdir
		{
			get { return _sysconfdir; }
		}
		
		/// <summary>
		/// webdir
		/// </summary>
		public static string webdir
		{
			get { return _webdir; }
		}
		
		/// <summary>
		/// webbindir
		/// </summary>
		public static string webbindir
		{
			get { return _webbindir; }
		}

		/// <summary>
		/// modulesdir
		/// </summary>
		public static string modulesdir
		{
			get { return _modulesdir; }
		}

		/// <summary>
		/// bootstrapdir
		/// </summary>
		public static string bootstrapdir
		{
			get { return _bootstrapdir; }
		}

		/// <summary>
		/// simiasconfdir
		/// </summary>
		public static string simiasconfdir
		{
			get { return _simiasconfdir; }
		}
		
		/// <summary>
		/// simiaslogdir
		/// </summary>
//		public static string simiaslogdir
	//	{
		//	get { return _simiaslogdir; }
//		}
		
		/// <summary>
		/// target
		/// </summary>
		public static string target
		{
			get { return _target; }
		}
	}
}
