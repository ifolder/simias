AC_INIT(src/Configuration/Configuration.cs)
AC_CANONICAL_SYSTEM
AM_INIT_AUTOMAKE(simias, 0.5)
AM_MAINTAINER_MODE
AC_PROG_CC

SRCDIR='$(top_srcdir)/src'
TOOLDIR='$(top_srcdir)/tools'
DOCDIR="$SRCDIR/doc"
APIDOCDIR="$SRCDIR/api-doc"

COMMON_SUBDIRS="Configuration Common CollectionEvents UserService StoreProvider FsProvider SqliteProvider Identity WorkGroupIdentity CollectionStore FsWatcher Agent SyncCommon StoreWatcher CollectionWatcher SyncManager Sync SyncLogicLite SyncTools AddressBook Smtp InviteAgent"
LINUX_SUBDIRS="CommonGtkWindows"
WINDOWS_SUBDIRS="CommonFormWindows"

#
# Check for a valid operating system
#
case $host_os in
    linux*)
        SIMIAS_OS='linux'
    ;;
    cygwin*)
        SIMIAS_OS='windows'
    ;;
    *)
        AC_MSG_ERROR([Unknown host_os: $host_os])
    ;;
esac
AC_SUBST(SIMIAS_OS)
        
#
# Set platform-specific variables
#
case $SIMIAS_OS in
    #
    # Linux-specific configuration
    #
    linux)
        #
        # Check for valid compilers
        #
        AC_CHECK_PROG(CSC, mcs, mcs)
        test -z "$CSC" && AC_MSG_ERROR([no acceptable C Sharp compiler found in \$PATH])
        AC_CHECK_PROG(CC, cc, cc)
        test -z "$CC" && AC_MSG_ERROR([no acceptable C compiler found in \$PATH])
        AC_CHECK_PROG(CXX, c++, c++)
        test -z "$CXX" && AC_MSG_ERROR([no acceptable C++ compiler found in \$PATH])
        AC_CHECK_PROG(LD, c++, c++)
        test -z "$LD" && AC_MSG_ERROR([no acceptable linker found in \$PATH])
        #
        # Set variables
        #
        CC='cc -c'
        CDEF='-D'
        CFLAGS="-pipe -Wall -W -DLINUX -DPRODUCT_NAME=@PRODUCT_NAME@ -DPRODUCT_VERSION=@PRODUCT_VERSION@"
        CINC='-I'
        COUT='-o'
        CSC_EXEFLAG=/target:exe
        CSC_LIBFLAG=/target:library
        CSCFLAGS='/d:MONO /warn:4 /d:TRACE'
        CXX='c++ -c'
        CXXFLAGS="-pipe -Wall -W -DLINUX -DPRODUCT_NAME=@PRODUCT_NAME@ -DPRODUCT_VERSION=@PRODUCT_VERSION@";
        DEBUG_CFLAGS="-g -DDEBUG"
        DEBUG_CSCFLAGS="/debug+ /d:DEBUG"
        DEBUG_CXXFLAGS="-g -DDEBUG"
        DEBUG_LDFLAGS="-g"
        DEBUG_NUNIT_FLAGS='--debug'
        EMPTY=
        EXE_EXT=''
        ICON_EXT='.ico'
        ICON_FLAG='/resource:'
        LDFLAGS=''
        LDINC='-L'
        LDOUT='-o '
        LIB_EXT=''
        LIB_PRE='lib'
        LIBFLAG='-l'
        LIBS=''
        MONO=mono
        NON_PLATFORM_SUBDIRS="$WINDOWS_SUBDIRS package/windows"
        NUNIT="$TOOLDIR/NUnit/bin/nunit-console.exe"
        NUNIT_FLAGS='/nologo'
        NUNIT_LIBPATH="$TOOLDIR/NUnit/bin"
        OBJ_EXT='.o'
        OPTIMIZE_CFLAGS="-O2 -DNDEBUG"
        OPTIMIZE_CSCFLAGS="/optimize+"
        OPTIMIZE_CXXFLAGS="-O2 -DNDEBUG"
        OPTIMIZE_LDFLAGS=""
        OPTIMIZE_NUNIT_FLAGS=''
        PLATFORM_SUBDIRS=$LINUX_SUBDIRS
        SEP='/'
        SHARED_LIB_EXT='.so'
        SHARED_LIB_FLAG='-shared'
        SQLITELIB_PATH="../../external/sqlite/linux"
        SQLITELIB="libsqlite.so"
        SYSTEM_XML='System.Xml.dll'
    ;;
    #
    # Windows-specific configuration
    #
    windows)
        #
        # Check for valid compilers
        #
        AC_CHECK_PROG(CSC, csc, csc)
        test -z "$CSC" && AC_MSG_ERROR([no acceptable C Sharp compiler found in \$PATH])
        AC_CHECK_PROG(CC, cl, cl)
        test -z "$CC" && AC_MSG_ERROR([no acceptable C compiler found in \$PATH])
        AC_CHECK_PROG(CXX, cl, cl)
        test -z "$CXX" && AC_MSG_ERROR([no acceptable C++ compiler found in \$PATH])
        AC_CHECK_PROG(LD, link, link)
        test -z "$LD" && AC_MSG_ERROR([no acceptable linker found in \$PATH])
        #
        # Set variables
        #
        CC='cl -c'
        CXX='cl -c'
        CDEF='-D'
        CFLAGS="-nologo -W3 -DWIN32 -D_WINDOWS -DWINDOWS -DPRODUCT_NAME=@PRODUCT_NAME@ -DPRODUCT_VERSION=@PRODUCT_VERSION@";
        CINC='-I'
        COUT='-Fo'
        CSC_EXEFLAG=/target:exe
        CSC_LIBFLAG=/target:library
        CSCFLAGS='/d:DOTNET /warn:4 /d:TRACE'
        CXXFLAGS="-nologo -GX -W3 -DWIN32 -D_WINDOWS -DWINDOWS -DPRODUCT_NAME=@PRODUCT_NAME@ -DPRODUCT_VERSION=@PRODUCT_VERSION@";
        DEBUG_CFLAGS="-MDd -Od -Zi -RTC1 -DDEBUG -D_DEBUG"
        DEBUG_CSCFLAGS="/debug+ /d:DEBUG"
        DEBUG_CXXFLAGS="-MDd -Od -Zi -RTC1 -DDEBUG -D_DEBUG"
        DEBUG_LDFLAGS="-DEBUG"
        DEBUG_NUNIT_FLAGS=''
        DEF='-def:'
        EMPTY=
        EXE_EXT='.exe'
        ICON_EXT='.ico'
        ICON_FLAG='/win32icon:'
        LDFLAGS='-nologo -machine:X86'
        LDINC='-libpath:'
        LDOUT='-out:'
        LIB_EXT='.lib'
        LIB_PRE=''
        LIBFLAG=''
        LIBS='kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib rpcrt4.lib ws2_32.lib imagehlp.lib'
        MONO=
        NON_PLATFORM_SUBDIRS="$LINUX_SUBDIRS package/linux"
        NUNIT="$TOOLDIR/NUnit/bin/nunit-console.exe"
        NUNIT_FLAGS='/nologo'
        NUNIT_LIBPATH=`echo "$TOOLDIR/NUnit/bin" | sed 's,/cygdrive/\(.\)/,\1:/,'`
        OBJ_EXT='.obj'
        OPTIMIZE_CFLAGS="-MD -O2 -DNDEBUG"
        OPTIMIZE_CSCFLAGS="/optimize+"
        OPTIMIZE_CXXFLAGS="-MD -O2 -DNDEBUG"
        OPTIMIZE_NUNIT_FLAGS=''
        PLATFORM_SUBDIRS=$WINDOWS_SUBDIRS
        RC='rc'
        RC_FLAGS='-r'
        RES_EXT='.res'
        SEP='$(EMPTY)\\$(EMPTY)'
        SHARED_LIB_EXT='.dll'
        SHARED_LIB_FLAG='-dll'
        SQLITELIB="sqlite.dll"
        SQLITELIB_PATH="../../external/sqlite/w32"
        SYSTEM_XML='System.XML.dll'
        TLBX='tlbexp'
        TYPE_LIB_EXT='.tlb'
    ;;
esac
AC_SUBST(APIDOCDIR)
AC_SUBST(COMMON_SUBDIRS)
AC_SUBST(CSC)
AC_SUBST(CSC_EXEFLAG)
AC_SUBST(CSC_LIBFLAG)
AC_SUBST(DOCDIR)
AC_SUBST(EMPTY)
AC_SUBST(ICON_EXT)
AC_SUBST(ICON_FLAG)
AC_SUBST(LINUX_SUBDIRS)
AC_SUBST(MONO)
AC_SUBST(NON_PLATFORM_SUBDIRS)
AC_SUBST(NUNIT)
AC_SUBST(NUNIT_FLAGS)
AC_SUBST(NUNIT_LIBPATH)
AC_SUBST(PLATFORM_SUBDIRS)
AC_SUBST(ROOTDIR)
AC_SUBST(SEP)
AC_SUBST(SRCDIR)
AC_SUBST(SQLITELIB)
AC_SUBST(SQLITELIB_PATH)
AC_SUBST(SYSTEM_XML)
AC_SUBST(TOOLDIR)
AC_SUBST(WINDOWS_SUBDIRS)

#
# Run standard macros
#
AM_PROG_CC_STDC
AC_PROG_INSTALL
AC_HEADER_STDC
#AM_PROG_LIBTOOL

#
# Handle --with-cygwin-path
#
AC_ARG_WITH(cygwin-path,
    [  --with-cygwin-path=PATH full path to Cygwin (default is c:/cygwin)],
    [ CYGWIN_PATH=$withval ],
    [ CYGWIN_PATH="c:/cygwin" ]
    )
AC_SUBST(CYGWIN_PATH)

#
# Handle --enable-debug
#
AC_ARG_ENABLE(debug, [
  --enable-debug    Configure the Makefiles to build in DEBUG mode],
    [case "${enableval}" in
        yes) enable_debug=true ;;
        no)  enable_debug=false ;;
        *) AC_MSG_ERROR(bad value ${enableval} for --enable-debug) ;;
    esac],[enable_debug=false])
AM_CONDITIONAL(DEBUG, test x$enable_debug = xtrue)
if test "$enable_debug" = "true"
then
  # Build debug version.
  CFLAGS="$DEBUG_CFLAGS $CFLAGS"
  CSCFLAGS="$DEBUG_CSCFLAGS $CSCFLAGS"
  CXXFLAGS="$DEBUG_CXXFLAGS $CXXFLAGS"
  DEVENV_CONFIGURATION=Debug
  NUNIT_FLAGS="$DEBUG_NUNITFLAGS $NUNIT_FLAGS"
else
  # Build optimized version.
  CFLAGS="$OPTIMIZE_CFLAGS $CFLAGS"
  CSCFLAGS="$OPTIMIZE_CSCFLAGS $CSCFLAGS"
  CXXFLAGS="$OPTIMIZE_CXXFLAGS $CXXFLAGS"
  DEVENV_CONFIGURATION=Release
  NUNIT_FLAGS="$OPTIMIZE_NUNITFLAGS $NUNIT_FLAGS"
fi
AC_SUBST(CSCFLAGS)
AC_SUBST(DEVENV_CONFIGURATION)

#
# Configure PKG_CONFIG
#
AC_PATH_PROG(PKG_CONFIG, pkg-config, no)
if test "x$PKG_CONFIG" = "xno"; then
	AC_MSG_ERROR([You need to install pkg-config])
fi
case $host_os in
    linux*)
        GTK_SHARP_REQUIRED_VERSION=0.10
        PKG_CHECK_MODULES(BASE_DEPENDENCIES, gtk-sharp >= $GTK_SHARP_REQUIRED_VERSION)
    ;;
esac


#
# Configure files
#
AC_OUTPUT([
Makefile
src/Makefile
src/Configuration/Makefile
src/Common/Makefile
src/CommonGtkWindows/Makefile
src/CommonFormWindows/Makefile
src/CollectionEvents/Makefile
src/UserService/Makefile
src/StoreProvider/Makefile
src/FsProvider/Makefile
src/SqliteProvider/Makefile
src/Identity/Makefile
src/WorkGroupIdentity/Makefile
src/CollectionStore/Makefile
src/FsWatcher/Makefile
src/Agent/Makefile
src/SyncCommon/Makefile
src/StoreWatcher/Makefile
src/CollectionWatcher/Makefile
src/SyncManager/Makefile
src/Sync/Makefile
src/SyncLogicLite/Makefile
src/SyncTools/Makefile
src/AddressBook/Makefile
src/Smtp/Makefile
src/InviteAgent/Makefile
src/package/Makefile
src/package/windows/Makefile
])
