// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 1.1.4322.573
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

// 
// This source code was auto-generated by Mono Web Services Description Language Utility
//

/// <remarks/>
/// <remarks>
///Web Service providing access to domain server functionality.
///</remarks>
[System.Web.Services.WebServiceBinding(Name="Domain ServiceSoap",Namespace="http://novell.com/ifolder/domain"),
System.Diagnostics.DebuggerStepThroughAttribute(),
System.ComponentModel.DesignerCategoryAttribute("code")]
public class DomainService : System.Web.Services.Protocols.SoapHttpClientProtocol {

    public DomainService () {
        this.Url = "http://localhost:8086/simias10/DomainService.asmx";
    }

    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/domain/GetDomainInfo",RequestNamespace="http://novell.com/ifolder/domain",ResponseNamespace="http://novell.com/ifolder/domain",ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped,Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public DomainInfo GetDomainInfo(string userID) {
        object[] results = this.Invoke("GetDomainInfo", new object[] {
            userID});
        return ((DomainInfo)(results[0]));
    }

    public System.IAsyncResult BeginGetDomainInfo(string userID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetDomainInfo", new object[] {
            userID}, callback, asyncState);
    }

    public DomainInfo EndGetDomainInfo(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((DomainInfo)(results[0]));
    }

    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/domain/ProvisionUser",RequestNamespace="http://novell.com/ifolder/domain",ResponseNamespace="http://novell.com/ifolder/domain",ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped,Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public ProvisionInfo ProvisionUser(string user, string password) {
        object[] results = this.Invoke("ProvisionUser", new object[] {
            user,
            password});
        return ((ProvisionInfo)(results[0]));
    }

    public System.IAsyncResult BeginProvisionUser(string user, string password, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ProvisionUser", new object[] {
            user,
            password}, callback, asyncState);
    }

    public ProvisionInfo EndProvisionUser(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((ProvisionInfo)(results[0]));
    }

    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/domain/CreateMaster",RequestNamespace="http://novell.com/ifolder/domain",ResponseNamespace="http://novell.com/ifolder/domain",ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped,Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public string CreateMaster(string collectionID, string collectionName, string rootDirID, string rootDirName, string userID, string memberName, string memberID, string memberRights) {
        object[] results = this.Invoke("CreateMaster", new object[] {
            collectionID,
            collectionName,
            rootDirID,
            rootDirName,
            userID,
            memberName,
            memberID,
            memberRights});
        return ((string)(results[0]));
    }

    public System.IAsyncResult BeginCreateMaster(string collectionID, string collectionName, string rootDirID, string rootDirName, string userID, string memberName, string memberID, string memberRights, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CreateMaster", new object[] {
            collectionID,
            collectionName,
            rootDirID,
            rootDirName,
            userID,
            memberName,
            memberID,
            memberRights}, callback, asyncState);
    }

    public string EndCreateMaster(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }

    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/domain/DeleteMaster",RequestNamespace="http://novell.com/ifolder/domain",ResponseNamespace="http://novell.com/ifolder/domain",ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped,Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void DeleteMaster(string id) {
        this.Invoke("DeleteMaster", new object[] {
            id});
    }

    public System.IAsyncResult BeginDeleteMaster(string id, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("DeleteMaster", new object[] {
            id}, callback, asyncState);
    }

    public void EndDeleteMaster(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
}

/// <remarks/>
[System.Xml.Serialization.XmlType(Namespace="http://novell.com/ifolder/domain")]
public class DomainInfo  {

    /// <remarks/>
    public string Name;

    /// <remarks/>
    public string Description;

    /// <remarks/>
    public string ID;

    /// <remarks/>
    public string RosterID;

    /// <remarks/>
    public string RosterName;

    /// <remarks/>
    public string MemberNodeID;

    /// <remarks/>
    public string MemberNodeName;

    /// <remarks/>
    public string MemberRights;
}

/// <remarks/>
[System.Xml.Serialization.XmlType(Namespace="http://novell.com/ifolder/domain")]
public class ProvisionInfo  {

    /// <remarks/>
    public string UserID;

    /// <remarks/>
    public string POBoxID;

    /// <remarks/>
    public string POBoxName;

    /// <remarks/>
    public string MemberNodeID;

    /// <remarks/>
    public string MemberNodeName;

    /// <remarks/>
    public string MemberRights;
}

