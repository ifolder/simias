//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 1.1.4322.2032.
// 
namespace iFolderWebClient.Simias10 {
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Web.Services;
    
    
    /// <remarks/>
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="iFolderWebSoap", Namespace="http://novell.com/ifolder/web/")]
    public class iFolderWeb : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        /// <remarks/>
        public iFolderWeb() {
            this.Url = "http://127.0.0.1:8086/simias10/iFolderWeb.asmx";
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/web/GetServer", RequestNamespace="http://novell.com/ifolder/web/", ResponseNamespace="http://novell.com/ifolder/web/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public iFolderServer GetServer() {
            object[] results = this.Invoke("GetServer", new object[0]);
            return ((iFolderServer)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetServer(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetServer", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public iFolderServer EndGetServer(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((iFolderServer)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/web/GetSystem", RequestNamespace="http://novell.com/ifolder/web/", ResponseNamespace="http://novell.com/ifolder/web/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public iFolderSystem GetSystem() {
            object[] results = this.Invoke("GetSystem", new object[0]);
            return ((iFolderSystem)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetSystem(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetSystem", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public iFolderSystem EndGetSystem(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((iFolderSystem)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/web/CreateiFolder", RequestNamespace="http://novell.com/ifolder/web/", ResponseNamespace="http://novell.com/ifolder/web/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public iFolder CreateiFolder(string name, string description) {
            object[] results = this.Invoke("CreateiFolder", new object[] {
                        name,
                        description});
            return ((iFolder)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCreateiFolder(string name, string description, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CreateiFolder", new object[] {
                        name,
                        description}, callback, asyncState);
        }
        
        /// <remarks/>
        public iFolder EndCreateiFolder(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((iFolder)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/web/GetiFolder", RequestNamespace="http://novell.com/ifolder/web/", ResponseNamespace="http://novell.com/ifolder/web/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public iFolder GetiFolder(string ifolderID) {
            object[] results = this.Invoke("GetiFolder", new object[] {
                        ifolderID});
            return ((iFolder)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetiFolder(string ifolderID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetiFolder", new object[] {
                        ifolderID}, callback, asyncState);
        }
        
        /// <remarks/>
        public iFolder EndGetiFolder(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((iFolder)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/web/GetiFolderByName", RequestNamespace="http://novell.com/ifolder/web/", ResponseNamespace="http://novell.com/ifolder/web/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public iFolder GetiFolderByName(string ifolderName) {
            object[] results = this.Invoke("GetiFolderByName", new object[] {
                        ifolderName});
            return ((iFolder)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetiFolderByName(string ifolderName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetiFolderByName", new object[] {
                        ifolderName}, callback, asyncState);
        }
        
        /// <remarks/>
        public iFolder EndGetiFolderByName(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((iFolder)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/web/DeleteiFolder", RequestNamespace="http://novell.com/ifolder/web/", ResponseNamespace="http://novell.com/ifolder/web/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteiFolder(string ifolderID) {
            this.Invoke("DeleteiFolder", new object[] {
                        ifolderID});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteiFolder(string ifolderID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteiFolder", new object[] {
                        ifolderID}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDeleteiFolder(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/web/GetiFolders", RequestNamespace="http://novell.com/ifolder/web/", ResponseNamespace="http://novell.com/ifolder/web/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public iFolder[] GetiFolders() {
            object[] results = this.Invoke("GetiFolders", new object[0]);
            return ((iFolder[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetiFolders(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetiFolders", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public iFolder[] EndGetiFolders(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((iFolder[])(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/web/GetUser", RequestNamespace="http://novell.com/ifolder/web/", ResponseNamespace="http://novell.com/ifolder/web/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public iFolderUser GetUser() {
            object[] results = this.Invoke("GetUser", new object[0]);
            return ((iFolderUser)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetUser(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetUser", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public iFolderUser EndGetUser(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((iFolderUser)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/web/GetMembers", RequestNamespace="http://novell.com/ifolder/web/", ResponseNamespace="http://novell.com/ifolder/web/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public iFolderUser[] GetMembers(string ifolderID) {
            object[] results = this.Invoke("GetMembers", new object[] {
                        ifolderID});
            return ((iFolderUser[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetMembers(string ifolderID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetMembers", new object[] {
                        ifolderID}, callback, asyncState);
        }
        
        /// <remarks/>
        public iFolderUser[] EndGetMembers(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((iFolderUser[])(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/web/CreateDirectoryEntry", RequestNamespace="http://novell.com/ifolder/web/", ResponseNamespace="http://novell.com/ifolder/web/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public iFolderEntry CreateDirectoryEntry(string ifolderID, string parentID, string entryName) {
            object[] results = this.Invoke("CreateDirectoryEntry", new object[] {
                        ifolderID,
                        parentID,
                        entryName});
            return ((iFolderEntry)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCreateDirectoryEntry(string ifolderID, string parentID, string entryName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CreateDirectoryEntry", new object[] {
                        ifolderID,
                        parentID,
                        entryName}, callback, asyncState);
        }
        
        /// <remarks/>
        public iFolderEntry EndCreateDirectoryEntry(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((iFolderEntry)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/web/CreateFileEntry", RequestNamespace="http://novell.com/ifolder/web/", ResponseNamespace="http://novell.com/ifolder/web/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public iFolderEntry CreateFileEntry(string ifolderID, string parentID, string entryName) {
            object[] results = this.Invoke("CreateFileEntry", new object[] {
                        ifolderID,
                        parentID,
                        entryName});
            return ((iFolderEntry)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCreateFileEntry(string ifolderID, string parentID, string entryName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CreateFileEntry", new object[] {
                        ifolderID,
                        parentID,
                        entryName}, callback, asyncState);
        }
        
        /// <remarks/>
        public iFolderEntry EndCreateFileEntry(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((iFolderEntry)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/web/DeleteEntry", RequestNamespace="http://novell.com/ifolder/web/", ResponseNamespace="http://novell.com/ifolder/web/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteEntry(string ifolderID, string entryID) {
            this.Invoke("DeleteEntry", new object[] {
                        ifolderID,
                        entryID});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteEntry(string ifolderID, string entryID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteEntry", new object[] {
                        ifolderID,
                        entryID}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDeleteEntry(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/web/GetEntry", RequestNamespace="http://novell.com/ifolder/web/", ResponseNamespace="http://novell.com/ifolder/web/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public iFolderEntry GetEntry(string ifolderID, string entryID) {
            object[] results = this.Invoke("GetEntry", new object[] {
                        ifolderID,
                        entryID});
            return ((iFolderEntry)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetEntry(string ifolderID, string entryID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetEntry", new object[] {
                        ifolderID,
                        entryID}, callback, asyncState);
        }
        
        /// <remarks/>
        public iFolderEntry EndGetEntry(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((iFolderEntry)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/web/GetEntryByPath", RequestNamespace="http://novell.com/ifolder/web/", ResponseNamespace="http://novell.com/ifolder/web/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public iFolderEntry GetEntryByPath(string ifolderID, string entryPath) {
            object[] results = this.Invoke("GetEntryByPath", new object[] {
                        ifolderID,
                        entryPath});
            return ((iFolderEntry)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetEntryByPath(string ifolderID, string entryPath, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetEntryByPath", new object[] {
                        ifolderID,
                        entryPath}, callback, asyncState);
        }
        
        /// <remarks/>
        public iFolderEntry EndGetEntryByPath(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((iFolderEntry)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/web/GetEntriesByParent", RequestNamespace="http://novell.com/ifolder/web/", ResponseNamespace="http://novell.com/ifolder/web/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public iFolderEntry[] GetEntriesByParent(string ifolderID, string entryID) {
            object[] results = this.Invoke("GetEntriesByParent", new object[] {
                        ifolderID,
                        entryID});
            return ((iFolderEntry[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetEntriesByParent(string ifolderID, string entryID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetEntriesByParent", new object[] {
                        ifolderID,
                        entryID}, callback, asyncState);
        }
        
        /// <remarks/>
        public iFolderEntry[] EndGetEntriesByParent(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((iFolderEntry[])(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/web/OpenFileRead", RequestNamespace="http://novell.com/ifolder/web/", ResponseNamespace="http://novell.com/ifolder/web/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string OpenFileRead(string ifolderID, string entryID) {
            object[] results = this.Invoke("OpenFileRead", new object[] {
                        ifolderID,
                        entryID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginOpenFileRead(string ifolderID, string entryID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("OpenFileRead", new object[] {
                        ifolderID,
                        entryID}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndOpenFileRead(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/web/OpenFileWrite", RequestNamespace="http://novell.com/ifolder/web/", ResponseNamespace="http://novell.com/ifolder/web/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string OpenFileWrite(string ifolderID, string entryID, long length) {
            object[] results = this.Invoke("OpenFileWrite", new object[] {
                        ifolderID,
                        entryID,
                        length});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginOpenFileWrite(string ifolderID, string entryID, long length, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("OpenFileWrite", new object[] {
                        ifolderID,
                        entryID,
                        length}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndOpenFileWrite(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/web/ReadFile", RequestNamespace="http://novell.com/ifolder/web/", ResponseNamespace="http://novell.com/ifolder/web/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public System.Byte[] ReadFile(string fileID, int size) {
            object[] results = this.Invoke("ReadFile", new object[] {
                        fileID,
                        size});
            return ((System.Byte[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginReadFile(string fileID, int size, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ReadFile", new object[] {
                        fileID,
                        size}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Byte[] EndReadFile(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Byte[])(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/web/WriteFile", RequestNamespace="http://novell.com/ifolder/web/", ResponseNamespace="http://novell.com/ifolder/web/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void WriteFile(string fileID, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] System.Byte[] buffer) {
            this.Invoke("WriteFile", new object[] {
                        fileID,
                        buffer});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginWriteFile(string fileID, System.Byte[] buffer, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("WriteFile", new object[] {
                        fileID,
                        buffer}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndWriteFile(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/web/CloseFile", RequestNamespace="http://novell.com/ifolder/web/", ResponseNamespace="http://novell.com/ifolder/web/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CloseFile(string fileID) {
            this.Invoke("CloseFile", new object[] {
                        fileID});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCloseFile(string fileID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CloseFile", new object[] {
                        fileID}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndCloseFile(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/ifolder/web/")]
    public class iFolderServer {
        
        /// <remarks/>
        public string Version;
        
        /// <remarks/>
        public string HostName;
        
        /// <remarks/>
        public string MachineName;
        
        /// <remarks/>
        public string OSVersion;
        
        /// <remarks/>
        public string UserName;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/ifolder/web/")]
    public class iFolderEntry {
        
        /// <remarks/>
        public string ID;
        
        /// <remarks/>
        public string Name;
        
        /// <remarks/>
        public string Path;
        
        /// <remarks/>
        public string iFolderID;
        
        /// <remarks/>
        public string ParentID;
        
        /// <remarks/>
        public bool IsDirectory;
        
        /// <remarks/>
        public bool IsRoot;
        
        /// <remarks/>
        public bool HasChildren;
        
        /// <remarks/>
        public System.DateTime ModifiedTime;
        
        /// <remarks/>
        public long Size;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/ifolder/web/")]
    public class iFolderUser {
        
        /// <remarks/>
        public string UserID;
        
        /// <remarks/>
        public string UserName;
        
        /// <remarks/>
        public string FullName;
        
        /// <remarks/>
        public Rights Rights;
        
        /// <remarks/>
        public bool Enabled;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/ifolder/web/")]
    public enum Rights {
        
        /// <remarks/>
        Deny,
        
        /// <remarks/>
        ReadOnly,
        
        /// <remarks/>
        ReadWrite,
        
        /// <remarks/>
        Admin,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/ifolder/web/")]
    public class iFolder {
        
        /// <remarks/>
        public string ID;
        
        /// <remarks/>
        public string Name;
        
        /// <remarks/>
        public string Description;
        
        /// <remarks/>
        public string OwnerID;
        
        /// <remarks/>
        public string OwnerName;
        
        /// <remarks/>
        public string Domain;
        
        /// <remarks/>
        public string ManagedPath;
        
        /// <remarks/>
        public string UnManagedPath;
        
        /// <remarks/>
        public long Size;
        
        /// <remarks/>
        public Rights Rights;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/ifolder/web/")]
    public class iFolderSystem {
        
        /// <remarks/>
        public string ID;
        
        /// <remarks/>
        public string Name;
    }
}
